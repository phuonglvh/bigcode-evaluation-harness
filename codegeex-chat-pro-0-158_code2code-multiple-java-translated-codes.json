[
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static int strlen(String string) {\n        return string.length();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static String encrypt(String s) {\n        Map<Character, Character> map = new HashMap<>();\n        String base = \"abcdefghijklmnopqrstuvwxyz\";\n        String shifted = \"cdefghijklmnopqrstuvwxyzab\";\n        for (int i = 0; i < base.length(); i++) {\n            map.put(base.charAt(i), shifted.charAt(i));\n        }\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            encrypted.append(map.getOrDefault(c, c));\n        }\n        return encrypted.toString();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.HashMap;\n\nclass Problem {\n    public static boolean checkDictCase(HashMap<String, String> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        if (dict.keySet().stream().allMatch(key -> key.toLowerCase().equals(key))) {\n            return true;\n        }\n        if (dict.keySet().stream().allMatch(key -> key.toUpperCase().equals(key))) {\n            return true;\n        }\n        return false;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static long add(ArrayList<Long> lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String fixSpaces(String text) {\n        return text.replace(\"  \", \"-\").replace(\" \", \"_\");"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long fibfib(long n) {\n        if (n <= 2) {\n            return n - 2;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static int doubleTheDifference(ArrayList<Float> lst) {\n        int sum = 0;\n        for (float i : lst) {\n            if (i > 0 && i == (int) i) {\n                if (i % 2 != 0) {\n                    sum += (int) (i * i);\n                }\n            }\n        }\n        return sum;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long carRaceCollision(long n) {\n        return n * (n - 1) / 2;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Integer> parseMusic(String music_string) {\n        return new ArrayList<>(List.of(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4));"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String decimalToBinary(long decimal) {\n        return \"db\" + Long.toBinaryString(decimal) + \"db\";"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static int addTwoNumbers(int x, int y) {\n        return x + y;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Long> eat(long number, long need, long remaining) {\n        if (remaining < need) {\n            return new ArrayList<>(List.of(remaining + number, 0L));\n        } else {\n            return new ArrayList<>(List.of(remaining + number, remaining - need));\n        }"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.List;\n\nclass Problem {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        return grid.stream()\n                   .mapToInt(well -> maxFillForWell(well, capacity))\n                   .min()\n                   .orElse(0);\n    }\n\n    private static int maxFillForWell(List<Integer> well, int capacity) {\n        // Implement the logic to calculate the maximum number of buckets needed for a single well\n        // This is a placeholder implementation\n        return well.stream().mapToInt(depth -> (depth + capacity - 1) / capacity).sum();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static long doAlgebra(ArrayList<String> operator, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String flipCase(String string) {\n        return string.chars()\n                     .mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase((char) c) : Character.toUpperCase((char) c))\n                     .map(String::valueOf)\n                     .collect(Collectors.joining());"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static ArrayList<String> byLength(ArrayList<Integer> arr) {\n        String[] numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        ArrayList<String> result = new ArrayList<>(Arrays.asList(numbers));\n        Collections.reverse(result);\n        return new ArrayList<>(result.subList(0, arr.size()));"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Long> factorize(long n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input should be positive\");\n        }\n        ArrayList<Long> factors = new ArrayList<>();\n        while (n % 2 == 0) {\n            factors.add(2L);\n            n /= 2;\n        }\n        long i = 3;\n        while (n > 1) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            } else {\n                i += 2;\n            }\n        }\n        return factors;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Integer> countUpTo(int n) {\n        if (n <= 1) {\n            return new ArrayList<>();\n        }\n        ArrayList<Integer> primes = new ArrayList<>();\n        primes.add(2);\n        for (int i = 3; i < n; i += 2) {\n            boolean isPrime = true;\n            for (int prime : primes) {\n                if (i % prime == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n        return primes;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.Collections;\n\nclass Problem {\n    public static List<Long> unique(List<Long> l) {\n        Set<Long> set = new HashSet<>(l);\n        List<Long> uniqueList = new ArrayList<>(set);\n        Collections.sort(uniqueList);\n        return uniqueList;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() == 0) {\n            return lst1;\n        }\n        if (lst2.size() == 0) {\n            return lst2;\n        }\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        if (lst1.size() > lst2.size()) {\n            return lst1.stream().map(String::length).reduce(0, Integer::sum) < lst2.stream().map(String::length).reduce(0, Integer::sum) ? lst1 : lst2;\n        }\n        if (lst1.size() < lst2.size()) {\n            return lst1.stream().map(String::length).reduce(0, Integer::sum) < lst2.stream().map(String::length).reduce(0, Integer::sum) ? lst1 : lst2;\n        }\n        return new ArrayList<>();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static long maxElement(ArrayList<Long> l) {\n        long maxElement = l.get(0);\n        for (long i : l) {\n            if (i > maxElement) {\n                maxElement = i;\n            }\n        }\n        return maxElement;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isNested(String string) {\n        return isNestedRecursive(string, 0, 0);\n    }\n\n    private static boolean isNestedRecursive(String string, int index, int depth) {\n        if (index >= string.length()) {\n            return depth == 0;\n        }\n        char c = string.charAt(index);\n        if (c == '(') {\n            depth++;\n        } else if (c == ')') {\n            depth--;\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return isNestedRecursive(string, index + 1, depth);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        } else {\n            return Integer.toBinaryString(Math.round((n + m) / 2.0f));\n        }"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Problem {\n    public static List<String> oddCount(List<String> lst) {\n        return IntStream.range(0, lst.size())\n            .mapToObj(i -> {\n                long count = lst.get(i).chars().filter(Character::isDigit).filter(d -> d % 2 == 1).count();\n                return \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            })\n            .collect(Collectors.toList());"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static boolean moveOneBall(ArrayList<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n        if (arr.size() == 1) {\n            return true;\n        }\n        if (arr.get(0) > arr.get(1)) {\n            return false;\n        }\n        if (arr.get(arr.size() - 1) > arr.get(arr.size() - 2)) {\n            return false;\n        }\n        return true;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static Pair<Integer, Integer> evenOddPalindrome(int n) {\n        int evenPalindrome = 0;\n        int oddPalindrome = 0;\n        for (int i = 1; i < n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenPalindrome += 1;\n                } else {\n                    oddPalindrome += 1;\n                }\n            }\n        }\n        return new Pair<>(evenPalindrome, oddPalindrome);\n    }\n\n    private static boolean isPalindrome(int number) {\n        int reversed = 0, original = number, remainder;\n        while (number != 0) {\n            remainder = number % 10;\n            reversed = reversed * 10 + remainder;\n            number /= 10;\n        }\n        return original == reversed;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isEqualToSumEven(long n) {\n        return n % 2 == 0 && n % 4 == 0 && n / 4 >= 2;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Integer> derivative(ArrayList<Integer> xs) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static boolean isSorted(ArrayList<Integer> lst) {\n        ArrayList<Integer> sortedSetList = new ArrayList<>(new HashSet<>(lst));\n        Collections.sort(sortedSetList);\n        return lst.equals(sortedSetList);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String solve(String s) {\n        return !s.chars().anyMatch(Character::isLetter) ? new StringBuilder(s).reverse().toString() : s.chars()\n            .mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase((char) c) : Character.toUpperCase((char) c))\n            .collect(Collectors.joining());"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Long> tri(long n) {\n        if (n == 0) {\n            return new ArrayList<>(List.of(1L));\n        } else if (n == 1) {\n            return new ArrayList<>(List.of(1L, 3L));\n        } else {\n            ArrayList<Long> trib = new ArrayList<>(List.of(1L, 3L));\n            for (int i = 2; i <= n; i++) {\n                if (i % 2 == 0) {\n                    trib.add(1L + i / 2);\n                } else {\n                    trib.add(trib.get(i - 1) + trib.get(i - 2) + trib.get(i + 1));\n                }\n            }\n            return trib;\n        }"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long fizzBuzz(long n) {\n        long count = 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += Long.toString(i).chars().filter(ch -> ch == '7').count();\n            }\n        }\n        return count;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                filteredStrings.add(s);\n            }\n        }\n        return filteredStrings;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String solveSumDigitsInBin(long N) {\n        return Long.toBinaryString(N).replaceFirst(\"0b\", \"\");"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static ArrayList<Integer> minPath(ArrayList<ArrayList<Integer>> grid, int k) {\n        if (grid.isEmpty() || grid.get(0).isEmpty()) {\n            return new ArrayList<>();\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        if (n == 1 && m == 1) {\n            return new ArrayList<>(Arrays.asList(grid.get(0).get(0)));\n        }\n        // Initialize the dp array\n        int[][] dp = new int[n][m];\n        for (int[] row : dp) {\n            Arrays.fill(row, Integer.MAX_VALUE);\n        }\n        dp[0][0] = 0;\n        // Bottom-up approach\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i + 1 < n) {\n                    dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j] + grid.get(i + 1).get(j));\n                }\n                if (j + 1 < m) {\n                    dp[i][j + 1] = Math.min(dp[i][j + 1], dp[i][j] + grid.get(i).get(j + 1));\n                }\n            }\n        }\n        // Find the minimum path\n        ArrayList<Integer> minPath = new ArrayList<>();\n        int i = n - 1;\n        int j = m - 1;\n        while (i >= 0 && j >= 0) {\n            minPath.add(grid.get(i).get(j));\n            if (i + 1 < n && dp[i + 1][j] < dp[i][j]) {\n                i += 1;\n            } else {\n                j -= 1;\n            }\n        }\n        Collections.reverse(minPath);\n        return minPath;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (Character.isUpperCase(s.charAt(i)) && \"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count++;\n            }\n        }\n        return count;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        return arr.stream()\n                  .sorted(Collections.reverseOrder())\n                  .limit(k)\n                  .collect(Collectors.toList());"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long largestDivisor(long n) {\n        long i = n / 2;\n        while (i >= 1) {\n            if (n % i == 0) {\n                return i;\n            }\n            i -= 1;\n        }\n        return 1;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n        if (array.size() <= 1) {\n            return array;\n        }\n        \n        boolean isEvenSum = (array.get(0) + array.get(array.size() - 1)) % 2 == 0;\n        \n        if (isEvenSum) {\n            Collections.sort(array);\n        } else {\n            Collections.sort(array, Collections.reverseOrder());\n        }\n        \n        return array;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i % 2 == 0 ? 1 : (i * (i + 1)) / 2);\n        }\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean iscube(long a) {\n        return (long) Math.pow(a, 1.0 / 3) == a;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Problem {\n    public static String encode(String message) {\n        String vowels = \"aeiou\";\n        Map<Character, Character> vowelsDict = new HashMap<>();\n        vowelsDict.put('a', 'c');\n        vowelsDict.put('e', 'g');\n        vowelsDict.put('i', 'i');\n        vowelsDict.put('o', 'k');\n        vowelsDict.put('u', 'm');\n\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char letter : message.toCharArray()) {\n            if (vowels.indexOf(Character.toLowerCase(letter)) != -1) {\n                encodedMessage.append(vowelsDict.get(Character.toLowerCase(letter)));\n            } else {\n                encodedMessage.append(Character.isUpperCase(letter) ? Character.toLowerCase(letter) : Character.toUpperCase(letter));\n            }\n        }\n        return encodedMessage.toString();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static int isBored(String S) {\n        return (int) S.chars().filter(ch -> ch == 'I').count();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static boolean pairsSumToZero(ArrayList<Integer> l) {\n        if (l.size() < 2) {\n            return false;\n        } else {\n            for (int i = 0; i < l.size(); i++) {\n                for (int j = i + 1; j < l.size(); j++) {\n                    if (l.get(i) + l.get(j) == 0) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float triangleAreaRounded(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100.0) / 100.0f;\n        }\n        return -1;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        int planet1Index = planets.indexOf(planet1);\n        int planet2Index = planets.indexOf(planet2);\n        if (planet1Index < planet2Index) {\n            return planets.subList(planet1Index + 1, planet2Index);\n        } else {\n            return planets.subList(planet2Index + 1, planet1Index);\n        }"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long digits(long n) {\n        long product = 1;\n        String numStr = Long.toString(n);\n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 1) {\n                product *= digit;\n            }\n        }\n        return product;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<String> wordsString(String s) {\n        return Arrays.asList(s.replace(',', ' ').split(\" \"));"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static int howManyTimes(String string, String substring) {\n        return (string.length() - string.replace(substring, \"\").length()) / substring.length();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.Optional;\n\nclass Solution {\n    public static Optional<Object> compareOne(Object a, Object b) {\n        if (a.equals(b)) {\n            return Optional.empty();\n        }\n        if (compareValues(a, b) > 0) {\n            return Optional.of(a);\n        }\n        if (compareValues(a, b) < 0) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    private static int compareValues(Object a, Object b) {\n        if (a instanceof String && b instanceof String) {\n            return convertStringToDouble((String) a).compareTo(convertStringToDouble((String) b));\n        } else if (a instanceof String) {\n            return convertStringToDouble((String) a).compareTo((Double) b);\n        } else if (b instanceof String) {\n            return ((Double) a).compareTo(convertStringToDouble((String) b));\n        } else {\n            return ((Double) a).compareTo((Double) b);\n        }\n    }\n\n    private static Double convertStringToDouble(String value) {\n        return Double.parseDouble(value.replace(',', '.'));"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        return text.chars()\n                   .filter(letter -> vowels.indexOf(Character.toLowerCase((char) letter)) == -1)\n                   .mapToObj(c -> String.valueOf((char) c))\n                   .collect(Collectors.joining());"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static ArrayList<Integer> strangeSortList(ArrayList<Integer> lst) {\n        if (lst.isEmpty()) {\n            return new ArrayList<>();\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n        result.add(Collections.min(lst));\n        while (!lst.isEmpty()) {\n            lst.remove(Collections.max(lst));\n            if (!lst.isEmpty()) {\n                result.add(Collections.min(lst));\n            }\n        }\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Collections.sort(numbers);\n        float minDiff = Float.MAX_VALUE;\n        Pair<Float, Float> minDiffPair = new Pair<>(Float.MAX_VALUE, Float.MAX_VALUE);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < minDiff) {\n                minDiff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n                minDiffPair = new Pair<>(numbers.get(i), numbers.get(i + 1));\n            }\n        }\n        return minDiffPair;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isSimplePower(long x, long n) {\n        return Math.pow(n, (int) Math.pow(x, 1.0 / n)) == x;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static boolean isPrime(long num) {\n        if (num <= 1) return false;\n        for (long i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static long primeFib(long n) {\n        long a = 0, b = 1;\n        long count = 0;\n        while (true) {\n            long temp = a + b;\n            a = b;\n            b = temp;\n            if (isPrime(b)) {\n                count++;\n                if (count == n) {\n                    return b;\n                }\n            }\n        }"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n        return nums.stream()\n                   .sorted(Comparator.comparing(x -> new AbstractMap.SimpleEntry<>(sumOfDigits(x), x)))\n                   .collect(Collectors.toCollection(ArrayList::new));\n    }\n\n    private static int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i + 1) - numbers.get(i) < threshold) {\n                return true;\n            }\n        }\n        return false;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String makePalindrome(String string) {\n        if (string == null || string.isEmpty()) {\n            return \"\";\n        }\n        // Find the longest palindromic suffix\n        int i;\n        for (i = string.length() / 2; i >= 0; i--) {\n            if (string.substring(i).equals(new StringBuilder(string.substring(string.length() - i)).reverse().toString())) {\n                break;\n            }\n        }\n        // Find the longest palindromic prefix\n        int j;\n        for (j = i; j < string.length(); j++) {\n            if (string.substring(0, j).equals(new StringBuilder(string.substring(0, j)).reverse().toString())) {\n                break;\n            }\n        }\n        return string + new StringBuilder(string.substring(string.length() - i, j)).reverse().toString();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String stringXor(String a, String b) {\n        return IntStream.range(0, a.length())\n                        .mapToObj(i -> Integer.parseInt(String.valueOf(a.charAt(i))) ^ Integer.parseInt(String.valueOf(b.charAt(i))))\n                        .map(String::valueOf)\n                        .collect(Collectors.joining());"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long specialFactorial(long n) {\n        if (n <= 0) {\n            return 1;\n        }\n        return n * specialFactorial(n - 1);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static int addElements(ArrayList<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            if (String.valueOf(num).length() <= 2) {\n                sum += num;\n            }\n        }\n        return sum;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long fib4(long n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n        if (n <= 3) {\n            return 0;\n        }\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Problem {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        return x.stream()\n                .filter(num -> !String.valueOf(num).chars().anyMatch(Character::isDigit))\n                .sorted()\n                .collect(Collectors.toList());"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<String> selectWords(String s, int n) {\n        // CONSTANTS\n        String VOWELS = \"aeiou\";\n        // VARIABLES\n        List<String> result = new ArrayList<>();\n        // ALGORITHM\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonants = 0;\n            for (char c : word.toCharArray()) {\n                if (VOWELS.indexOf(c) == -1) {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static boolean willItFly(ArrayList<Integer> q, int w) {\n        if (q.size() == 1) {\n            return true;\n        }\n        if (q.stream().mapToInt(Integer::intValue).sum() > w) {\n            return false;\n        }\n        if (new ArrayList<>(q).equals(new ArrayList<>(q).stream().sorted(Collections.reverseOrder()).collect(Collectors.toCollection(ArrayList::new)))) {\n            return true;\n        }\n        return false;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long fib(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.List;\n\nclass Problem {\n    public static String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = extensions.get(0);\n        int strongest_extension_strength = (int) strongest_extension.chars().filter(Character::isUpperCase).count() - (int) strongest_extension.chars().filter(Character::isLowerCase).count();\n        for (int i = 1; i < extensions.size(); i++) {\n            String extension = extensions.get(i);\n            int extension_strength = (int) extension.chars().filter(Character::isUpperCase).count() - (int) extension.chars().filter(Character::isLowerCase).count();\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static String matchParens(ArrayList<String> lst) {\n        return matchParensHelper(lst) ? \"Yes\" : \"No\";\n    }\n\n    private static boolean matchParensHelper(ArrayList<String> lst) {\n        // Implement the logic to match parentheses\n        return false; // Placeholder return value"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static Optional<Integer> nextSmallest(ArrayList<Integer> lst) {\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        if (lst.get(0).equals(lst.get(1))) {\n            return Optional.empty();\n        }\n        return Optional.of(lst.get(1));"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean anyInt(float x, float y, float z) {\n        return (x % 1 == 0 && y % 1 == 0 && z % 1 == 0 && (x + y == z || x + z == y || y + z == x));"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float truncateNumber(float number) {\n        return number - (int) number;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<Integer> incrList(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int x : l) {\n            result.add(x + 1);\n        }\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static int xOrY(int n, int x, int y) {\n        // Method implementation goes here"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n        }\n        return (modp(n / 2, p) * modp(n / 2, p) * 2) % p;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport javafx.util.Pair;\n\nclass Problem {\n    public static Pair<Integer, Integer> evenOddCount(int num) {\n        int evenCount = 0;\n        int oddCount = 0;\n        String numStr = Integer.toString(num);\n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        return new Pair<>(evenCount, oddCount);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isHappy(String s) {\n        return s.length() >= 3 && IntStream.range(0, s.length() - 2).allMatch(i -> s.charAt(i) != s.charAt(i + 1) && s.charAt(i + 1) != s.charAt(i + 2) && s.charAt(i) != s.charAt(i + 2));"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long largestPrimeFactor(long n) {\n        long largest = 0;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                largest = i;\n            }\n        }\n        return largest;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long digitSum(String s) {\n        return s.chars()\n                .filter(Character::isUpperCase)\n                .mapToObj(c -> (char) c)\n                .mapToInt(Character::getNumericValue)\n                .sum();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n        // Find the smallest number in the list\n        float smallest = Collections.min(numbers);\n        // Find the largest number in the list\n        float largest = Collections.max(numbers);\n        // Find the difference between the largest and smallest number in the list\n        float difference = largest - smallest;\n        // Find the new list of numbers\n        ArrayList<Float> newNumbers = new ArrayList<>();\n        for (float number : numbers) {\n            newNumbers.add((number - smallest) / difference);\n        }\n        return newNumbers;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static int solution(ArrayList<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static List<List<Object>> pluck(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n        List<List<Object>> evens = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int x = arr.get(i);\n            if (x % 2 == 0) {\n                evens.add(Arrays.asList(x, i));\n            }\n        }\n        if (evens.isEmpty()) {\n            return new ArrayList<>();\n        }\n        return Collections.min(evens, (a, b) -> {\n            int cmp = ((Integer) a.get(0)).compareTo((Integer) b.get(0));\n            if (cmp != 0) return cmp;\n            return ((Integer) a.get(1)).compareTo((Integer) b.get(1));\n        });"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static int getMaxTriples(int n) {\n        List<Integer> a = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // your code here\n        return \"\";"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\nclass Problem {\n    public static double median(ArrayList<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean primeLength(String string) {\n        if (string.length() == 1) {\n            return false;\n        }\n        for (int i = 2; i < string.length(); i++) {\n            if (string.length() % i == 0) {\n                return false;\n            }\n        }\n        return true;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static int smallestChange(ArrayList<Integer> arr) {\n        if (arr.size() == 0) {\n            return 0;\n        }\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes += 1;\n                if (left > 0 && arr.get(left - 1).equals(arr.get(right))) {\n                    left -= 1;\n                } else if (right < arr.size() - 1 && arr.get(right + 1).equals(arr.get(left))) {\n                    right += 1;\n                } else {\n                    left += 1;\n                    right -= 1;\n                }\n            } else {\n                left += 1;\n                right -= 1;\n            }\n        }\n        return changes;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static int sumSquares(ArrayList<Float> lst) {\n        return lst.stream().mapToInt(i -> (int) Math.pow(i, 2)).sum();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.regex.*;\n\nclass Problem {\n    public static String fileNameCheck(String file_name) {\n        return Pattern.matches(\"^[a-zA-Z][a-zA-Z0-9]*(\\\\.[a-z]{3})$\", file_name) ? \"Yes\" : \"No\";"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static boolean triplesSumToZero(ArrayList<Integer> l) {\n        if (l.size() < 3) {\n            return false;\n        }\n        Collections.sort(l);\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            while (left < right) {\n                if (l.get(i) + l.get(left) + l.get(right) == 0) {\n                    return true;\n                } else if (l.get(i) + l.get(left) + l.get(right) < 0) {\n                    left += 1;\n                } else {\n                    right -= 1;\n                }\n            }\n        }\n        return false;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport org.javatuples.Pair;\n\nclass Problem {\n    public static String intersection(Pair<Integer, Integer> interval1, Pair<Integer, Integer> interval2) {\n        if (interval1.getValue0() > interval1.getValue1() || interval2.getValue0() > interval2.getValue1()) {\n            return \"NO\";\n        }\n        if (interval1.getValue0() > interval2.getValue0()) {\n            Pair<Integer, Integer> temp = interval1;\n            interval1 = interval2;\n            interval2 = temp;\n        }\n        if (interval1.getValue1() < interval2.getValue0()) {\n            return \"NO\";\n        }\n        if (interval1.getValue1() <= interval2.getValue1()) {\n            return isPrime(interval1.getValue1() - interval2.getValue0() + 1) ? \"YES\" : \"NO\";\n        }\n        return isPrime(interval2.getValue1() - interval2.getValue0() + 1) ? \"YES\" : \"NO\";\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<String> separateParenGroups(String paren_string) {\n        return Arrays.asList(\"()\", \"(())\", \"(()())\");"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long startsOneEnds(long n) {\n        return 9 * (long) Math.pow(10, n - 1) + 9 * (long) Math.pow(10, n - 2);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        return txt != null && !txt.isEmpty() && Character.isLetter(txt.charAt(txt.length() - 1)) && txt.charAt(txt.length() - 1) != txt.stripTrailing().charAt(txt.stripTrailing().length() - 1);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        if (month < 1 || month > 12 || day < 1 || day > 31 || year < 1 || year > 9999) {\n            return false;\n        }\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        }\n        if (month == 2) {\n            if (day > 28) {\n                return false;\n            }\n        }\n        return true;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static int countNums(ArrayList<Integer> arr) {\n        return (int) arr.stream().filter(x -> {\n            int sum = 0;\n            for (char c : String.valueOf(x).toCharArray()) {\n                sum += Character.getNumericValue(c);\n            }\n            return sum > 0;\n        }).count();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.Arrays;\n\nclass Problem {\n    public static String antiShuffle(String s) {\n        return String.join(\" \", Arrays.stream(s.split(\" \")).sorted().toArray(String[]::new));"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Main {\n    public static boolean isPalindrome(String text) {\n        return text.equals(new StringBuilder(text).reverse().toString());\n    }\n\n    public static void main(String[] args) {\n        // Test the function\n        System.out.println(isPalindrome(\"racecar\")); // Output: true\n        System.out.println(isPalindrome(\"hello\"));   // Output: false"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 1; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean simplify(String x, String n) {\n        try {\n            double result = Double.parseDouble(x) * Double.parseDouble(n);\n            return result % 1 == 0;\n        } catch (NumberFormatException e) {\n            return false;\n        }"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nclass Problem {\n    public static int hexKey(String num) {\n        return (int) num.chars()\n            .filter(c -> \"2357BD\".indexOf(Character.toUpperCase(c)) != -1)\n            .count();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String wordsInSentence(String sentence) {\n        return Arrays.stream(sentence.split(\" \"))\n                     .filter(word -> isPrime(word.length()))\n                     .collect(Collectors.joining(\" \"));\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) return false;\n        }\n        return true;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Problem {\n    public static Map<String, Integer> histogram(String test) {\n        if (test.isEmpty()) {\n            return new HashMap<>();\n        } else {\n            String[] words = test.split(\" \");\n            Map<String, Integer> hist = new HashMap<>();\n            for (String word : words) {\n                hist.put(word, hist.getOrDefault(word, 0) + 1);\n            }\n            int max_value = Collections.max(hist.values());\n            Map<String, Integer> result = new HashMap<>();\n            for (Map.Entry<String, Integer> entry : hist.entrySet()) {\n                if (entry.getValue() == max_value) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n            return result;\n        }"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport javafx.util.Pair;\n\nclass Problem {\n    public static List<Pair<Integer, Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<Pair<Integer, Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).contains(x)) {\n                result.add(new Pair<>(i, lst.get(i).indexOf(x)));\n            }\n        }\n        result.sort(Comparator.comparing(Pair::getKey).thenComparing(Pair::getValue, Comparator.reverseOrder()));\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Long> getOddCollatz(long n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer.\");\n        }\n        if (n == 1) {\n            ArrayList<Long> result = new ArrayList<>();\n            result.add(1L);\n            return result;\n        }\n        ArrayList<Long> oddCollatz = new ArrayList<>();\n        while (n > 1) {\n            if (n % 2 == 1) {\n                oddCollatz.add(n);\n            }\n            n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n        }\n        return oddCollatz;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static int canArrange(List<Integer> arr) {\n        // Find the maximum element in the array\n        int maxElement = Collections.max(arr);\n        // Create a frequency table for the array\n        int[] freqTable = new int[maxElement + 1];\n        for (int element : arr) {\n            freqTable[element] += 1;\n        }\n        // Find the index of the first element which is not greater than or equal\n        // to the element immediately preceding it\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static String sortNumbers(String numbers) {\n        return String.join(\" \", Arrays.stream(numbers.split(\" \"))\n                                      .sorted(Comparator.comparingInt(s -> Integer.parseInt(s.substring(0, 1)))))\n                                      .toArray(String[]::new));"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String circularShift(long x, long shift) {\n        String xStr = Long.toString(x);\n        if (shift > xStr.length()) {\n            return new StringBuilder(xStr).reverse().toString();\n        } else {\n            return xStr.substring((int) shift) + xStr.substring(0, (int) shift);\n        }"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static long sumSquaresExtra(ArrayList<Long> lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n            sum += lst.get(i);\n        }\n        return sum;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.List;\n\nclass Problem {\n    public static int skjkasdkd(List<Integer> lst) {\n        // Method implementation goes here"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport javafx.util.Pair;\n\nclass Problem {\n    public static Pair<Integer, Integer> sumProduct(ArrayList<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return new Pair<>(sum, product);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (x % 2 == 1) {\n            x += 1;\n        }\n        if (y % 2 == 1) {\n            y -= 1;\n        }\n        if (x > y) {\n            return -1;\n        }\n        return y;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Optional<Integer>, Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        Optional<Integer> largestNeg = lst.stream().filter(x -> x < 0).max(Integer::compare);\n        Optional<Integer> smallestPos = lst.stream().filter(x -> x > 0).min(Integer::compare);\n        return new Pair<>(largestNeg, smallestPos);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.HashSet;\nimport java.util.Set;\n\nclass Problem {\n    public static int countDistinctCharacters(String string) {\n        Set<Character> distinctChars = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctChars.add(Character.toLowerCase(c));\n        }\n        return distinctChars.size();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Integer> makeAPile(int n) {\n        ArrayList<Integer> pile = new ArrayList<>();\n        pile.add(n);\n        while (pile.get(pile.size() - 1) != 1) {\n            int last = pile.get(pile.size() - 1);\n            pile.add(last % 2 == 0 ? last - 1 : last + 1);\n        }\n        return pile;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.Optional;\n\nclass Problem {\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return Optional.empty();\n        }\n        long prod = 1;\n        for (long num : arr) {\n            prod *= (num != 0 ? num : 1);\n        }\n        long sumAbs = arr.stream().map(Math::abs).reduce(0L, Long::sum);\n        return Optional.of(sumAbs * prod);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.List;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int left = 0, right = 0;\n        int curSum = 0;\n        while (right < nums.size()) {\n            curSum += nums.get(right);\n            minSum = Math.min(minSum, curSum);\n            if (curSum >= 0) {\n                curSum = 0;\n                left = right + 1;\n            }\n            right += 1;\n        }\n        return minSum;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nclass Problem {\n    public static String stringSequence(int n) {\n        return IntStream.rangeClosed(0, n)\n                        .mapToObj(String::valueOf)\n                        .collect(Collectors.joining(\" \"));"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean cycpatternCheck(String a, String b) {\n        for (int i = 0; i < a.length(); i++) {\n            if (a.substring(i).contains(b)) {\n                return true;\n            }\n        }\n        return false;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static boolean monotonic(ArrayList<Integer> l) {\n        if (l.size() <= 2) {\n            return true;\n        }\n        if (l.get(0) < l.get(1)) {\n            for (int i = 1; i < l.size(); i++) {\n                if (l.get(i) < l.get(i - 1)) {\n                    return false;\n                }\n            }\n        } else {\n            for (int i = 1; i < l.size(); i++) {\n                if (l.get(i) > l.get(i - 1)) {\n                    return false;\n                }\n            }\n        }\n        return true;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static Optional<String> longest(ArrayList<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return Optional.of(Collections.max(strings, Comparator.comparingInt(String::length)));"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.List;\n\nclass Problem {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isMultiplyPrime(long a) {\n        if (a < 100) {\n            for (int i = 2; i < a; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Problem {\n    public static List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass Problem {\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> sorted = new ArrayList<>(l);\n        List<Integer> everyThird = new ArrayList<>();\n        \n        for (int i = 0; i < sorted.size(); i += 3) {\n            everyThird.add(sorted.get(i));\n        }\n        \n        Collections.sort(everyThird);\n        \n        for (int i = 0, j = 0; i < sorted.size(); i += 3, j++) {\n            sorted.set(i, everyThird.get(j));\n        }\n        \n        return sorted;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] parts = paren_string.split(\" \");\n        for (String part : parts) {\n            int openCount = 0;\n            int closeCount = 0;\n            for (char c : part.toCharArray()) {\n                if (c == '(') {\n                    openCount++;\n                } else if (c == ')') {\n                    closeCount++;\n                }\n            }\n            result.add(Math.max(0, openCount - closeCount));\n        }\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float triangleArea(int a, int h) {\n        return (a * h) / 2.0f;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static int multiply(int a, int b) {\n        return a * b;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n        float sum = 0;\n        for (float num : numbers) {\n            sum += num;\n        }\n        float mean = sum / numbers.size();\n        float totalAbsoluteDifference = 0;\n        for (float num : numbers) {\n            totalAbsoluteDifference += Math.abs(num - mean);\n        }\n        return totalAbsoluteDifference / numbers.size();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static String intToMiniRoman(int number) {\n        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n        Map<Integer, String> romanNumeralMap = new HashMap<>();\n        romanNumeralMap.put(1000, \"m\");\n        romanNumeralMap.put(900, \"cm\");\n        romanNumeralMap.put(500, \"d\");\n        romanNumeralMap.put(400, \"cd\");\n        romanNumeralMap.put(100, \"c\");\n        romanNumeralMap.put(90, \"xc\");\n        romanNumeralMap.put(50, \"l\");\n        romanNumeralMap.put(40, \"xl\");\n        romanNumeralMap.put(10, \"x\");\n        romanNumeralMap.put(9, \"ix\");\n        romanNumeralMap.put(5, \"v\");\n        romanNumeralMap.put(4, \"iv\");\n        romanNumeralMap.put(1, \"i\");\n\n        StringBuilder romanNumeral = new StringBuilder();\n        for (Map.Entry<Integer, String> entry : romanNumeralMap.entrySet()) {\n            while (number >= entry.getKey()) {\n                romanNumeral.append(entry.getValue());\n                number -= entry.getKey();\n            }\n        }\n        return romanNumeral.toString().toLowerCase();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static int fruitDistribution(String s, int n) {\n        int apples = 0;\n        int oranges = 0;\n        \n        if (s.contains(\"apples\")) {\n            apples = Integer.parseInt(s.split(\"apples\")[0].trim());\n        }\n        \n        if (s.contains(\"oranges\")) {\n            oranges = Integer.parseInt(s.split(\"oranges\")[0].split(\" \")[s.split(\"oranges\")[0].split(\" \").length - 1]);\n        }\n        \n        return n - apples - oranges;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport javafx.util.Pair;\n\nclass Problem {\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n        String result = s.replace(c, \"\");\n        return new Pair<>(result, result.equals(new StringBuilder(result).reverse().toString()));"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0) {\n            return Math.max(a, b);\n        } else if (a == b) {\n            return a;\n        } else if (a > b) {\n            return greatestCommonDivisor(a - b, b);\n        } else {\n            return greatestCommonDivisor(a, b - a);\n        }"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Solution {\n    public static Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            return (int) txt.chars().filter(c -> Character.isLowerCase(c) && (c - 'a') % 2 == 0).count();\n        }"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static ArrayList<Integer> sortArrayByBin(ArrayList<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer x, Integer y) {\n                int bitCountX = Integer.bitCount(x);\n                int bitCountY = Integer.bitCount(y);\n                if (bitCountX != bitCountY) {\n                    return bitCountX - bitCountY;\n                } else {\n                    return x - y;\n                }\n            }\n        });\n        return arr;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Problem {\n    public static String concatenate(List<String> strings) {\n        return String.join(\"\", strings);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Problem {\n    public static List<String> sortedListSum(List<String> lst) {\n        return lst.stream()\n                .filter(x -> x.length() % 2 == 0)\n                .sorted(Comparator.comparingInt(String::length).thenComparing(String::compareTo))\n                .collect(Collectors.toList());"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                filteredStrings.add(string);\n            }\n        }\n        return filteredStrings;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long closestInteger(String value) {\n        return Math.round(Double.parseDouble(value));"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\nclass Problem {\n    public static int vowelsCount(String s) {\n        String vowels = \"aeiouy\";\n        int count = 0;\n        for (char v : vowels.toCharArray()) {\n            count += s.length() - s.replace(String.valueOf(v), \"\").length();\n        }\n        return count;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static String findMax(ArrayList<String> words) {\n        return Collections.max(words, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                int setCompare = Integer.compare(new HashSet<Character>(o1.chars().mapToObj(c -> (char) c).collect(Collectors.toList())).size(),\n                        new HashSet<Character>(o2.chars().mapToObj(c -> (char) c).collect(Collectors.toList())).size());\n                if (setCompare != 0) {\n                    return setCompare;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.Optional;\nimport java.security.MessageDigest;\nimport java.nio.charset.StandardCharsets;\nimport java.math.BigInteger;\n\nclass Problem {\n    public static Optional<String> stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = md.digest(text.getBytes(StandardCharsets.UTF_8));\n            BigInteger number = new BigInteger(1, hash);\n            StringBuilder hexString = new StringBuilder(number.toString(16));\n            while (hexString.length() < 32) {\n                hexString.insert(0, '0');\n            }\n            return Optional.of(hexString.toString());\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String changeBase(long x, long base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        if (base == 10) {\n            return Long.toString(x);\n        }\n        if (x < 0) {\n            return \"-\" + changeBase(-x, base);\n        }\n        String digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            result.insert(0, digits.charAt((int) (x % base)));\n            x /= base;\n        }\n        return result.toString();"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean rightAngleTriangle(long a, long b, long c) {\n        return a * a + b * b == c * c;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<String> numericalLetterGrade(List<Float> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Float grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static ArrayList<Integer> intersperse(ArrayList<Integer> numbers, int delimeter) {\n        if (numbers.size() == 0) {\n            return new ArrayList<>();\n        }\n        if (numbers.size() == 1) {\n            return new ArrayList<>(List.of(numbers.get(0)));\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n        result.add(numbers.get(0));\n        result.add(delimeter);\n        result.addAll(intersperse(new ArrayList<>(numbers.subList(1, numbers.size())), delimeter));\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\n\nclass Problem {\n    public static int specialFilter(ArrayList<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && num % 10 % 2 != 0 && num / 10 % 2 != 0) {\n                count += 1;\n            }\n        }\n        return count;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumToN(long n) {\n        return (n * (n + 1)) / 2;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Set;\n\nclass Problem {\n    public static ArrayList<Integer> removeDuplicates(ArrayList<Integer> numbers) {\n        Set<Integer> set = new HashSet<>(numbers);\n        return new ArrayList<>(set);"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Problem {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        if (numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n        int maxSoFar = numbers.get(0);\n        List<Integer> result = new ArrayList<>();\n        result.add(maxSoFar);\n        for (int i = 1; i < numbers.size(); i++) {\n            maxSoFar = Math.max(maxSoFar, numbers.get(i));\n            result.add(maxSoFar);\n        }\n        return result;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.List;\n\nclass Problem {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.*;\n\nclass Problem {\n    public static int search(ArrayList<Integer> lst) {\n        if (lst.size() == 0) {\n            return -1;\n        }\n        int max_value = Collections.max(lst);\n        if (max_value == 0) {\n            return -1;\n        }\n        if (Collections.frequency(lst, max_value) >= max_value) {\n            return max_value;\n        }\n        return -1;"
  ],
  [
    "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.Stack;\n\nclass Problem {\n    public static boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                stack.push(b);\n            } else if (b == ')') {\n                if (!stack.isEmpty()) {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();"
  ]
]