[
  [
    "\n// language: Java\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int idx = 0; idx < numbers.size(); idx++) {\n            double elem = numbers.get(idx);\n            for (int idx2 = 0; idx2 < numbers.size(); idx2++) {\n                double elem2 = numbers.get(idx2);\n                if (idx != idx2) {\n                    double distance = Math.abs(elem - elem2);\n                    if (distance < threshold) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;"
  ],
  [
    "\nCertainly! Below is the Java code equivalent to the given Python function `separate_paren_groups`:\n\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder currentString = new StringBuilder();\n        int currentDepth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                currentDepth++;\n                currentString.append(c);\n            } else if (c == ')') {\n                currentDepth--;\n                currentString.append(c);\n\n                if (currentDepth == 0) {\n                    result.add(currentString.toString());\n                    currentString.setLength(0); // Clear the StringBuilder\n                }\n            }\n        }\n\n        return result;\n\n### Key Points to Note in Conversion:\n- **List Initialization**: In Java, arrays and lists are initialized using `ArrayList<>();`.\n- **String Building**: In Java, `StringBuilder` is used to efficiently build strings, and `setLength(0)` is used to clear it.\n- **Character Iteration**: Iterating through characters of a string is done using `toCharArray()` in Java.\n- **Condition and Grouping Logic**: The logic and conditions remain exactly equivalent to ensure the functionality is preserved."
  ],
  [
    "\nTo convert the given Python function `truncate_number` to Java, we need to implement a similar method in the Java `Solution` class that computes the fractional part of a number. This can be done using basic arithmetic operations in Java. Here is the Java equivalent of the provided Python code:\n\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncateNumber(double number) {\n        return number % 1.0;\n    }\n  \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        double result = sol.truncateNumber(5.345);\n        System.out.println(\"Truncated number: \" + result); // Outputs: Truncated number: 0.345\n\n### Explanation:\n- The function `truncateNumber` in Java is defined as a method within the `Solution` class.\n- The method performs the same operation as the Python function: `number % 1.0`, which retrieves the fractional part of the number.\n- An example `main` method is included to demonstrate how to use the `truncateNumber` method and print the result."
  ],
  [
    "\nTo convert the Python function `below_zero` into Java, we need to ensure that the logic remains consistent while conforming to Java syntax and conventions. Here is a direct translation:\n\n// language: Java\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n\n### Key Points in the Translation:\n- **Type Specification**: The `List<Integer>` parameter in Java is equivalent to `List[int]` in Python with respect to storing a list of integers.\n- **Iteration**: Java uses enhanced for-loops (for-each loops) for iterating over collections, similar to Python's for-loops.\n- **Primitive Type**: Java uses `int` instead of Python's `int`, although it serves the same purpose here.\n- **Return Type**: The return type `boolean` corresponds to Python's `bool`.\n- **Class Method**: Java methods are usually placed within a class, hence the `belowZero` method is placed within a `Solution` class.\n- **Method Definition**: A Java method has an explicit return type, parameter list with types, and is contained within a class, typically with usage of public access modifier for broader access, matching Python's function definitions without separate access control but typically used within their module or class."
  ],
  [
    "\nimport java.util.List;\n\nclass Solution {\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        \n        double mean = sum / numbers.size();\n        \n        double totalDeviation = 0;\n        for (double number : numbers) {\n            totalDeviation += Math.abs(number - mean);\n        }\n        \n        return totalDeviation / numbers.size();\n"
  ],
  [
    "\nHere's how you could convert the given Python function `intersperse` into Java, following the predefined template:\n\n// language: Java\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n\n        result.add(numbers.get(numbers.size() - 1));\n\n        return result;\n\n### Explanation:\n1. **Initialization and Edge Cases:** \n   - Check if `numbers` is null or empty just like the Python code checks for emptiness. In Java, you must also handle the possibility of null references.\n   \n2. **Iterate through List:**\n   - Use a `for` loop that iterates up to `numbers.size() - 1` to intersperse the delimiter between numbers except for the last one.\n   \n3. **Add Last Element:**\n   - After the loop, add the last element of the list to ensure it remains at the end without a delimiter following it.\n   \n4. **Return Result:**\n   - Return the newly formed list."
  ],
  [
    "\nCertainly! Let's translate the given Python function `parse_nested_parens` into Java within the provided template.\n\n// language: Java\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseNestedParens(String parenString) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = parenString.split(\" \");\n        \n        for (String group : groups) {\n            if (!group.isEmpty()) {\n                result.add(parseParenGroup(group));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int parseParenGroup(String s) {\n        int depth = 0;\n        int maxDepth = 0;\n        \n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                depth++;\n                if (depth > maxDepth) {\n                    maxDepth = depth;\n                }\n            } else if (c == ')') {\n                depth--;\n            }\n        }\n        \n        return maxDepth;\n\nThis Java code mirrors the Python code's logic:\n\n1. The `parseNestedParens` function takes a string of nested parentheses groups, splits it by spaces, and processes each group to determine its maximum depth using `parseParenGroup`.\n\n2. The helper method `parseParenGroup` calculates the maximum depth of nested parentheses in a given group of characters.\n\n3. The primary functionality and logic are preserved from the Python version, ensuring similar behavior and output."
  ],
  [
    "\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n\n        return result;"
  ],
  [
    "\nHere is the Python `sum_product` function translated into Java within the provided template:\n\n// language: Java\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sumValue = 0;\n        int prodValue = 1;\n\n        for (int n : numbers) {\n            sumValue += n;\n            prodValue *= n;\n        }\n        \n        return Arrays.asList(sumValue, prodValue);\n\n### Explanation:\n- The Python function `sum_product` is converted into a Java method `sumProduct`.\n- The Python `List[int]` translates to Java's `List<Integer>`.\n- The tuple return type in Python is converted to a `List<Integer>` in Java, created using `Arrays.asList()`.\n- The `for n in numbers` loop is converted into an enhanced for-loop `for (int n : numbers)` in Java.\n- Sum and product calculations in both languages complement each other with equivalent syntax."
  ],
  [
    "\nHere's the equivalent Java implementation of the provided Python code:\n\n// language: Java\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        Integer runningMax = null;\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer n : numbers) {\n            if (runningMax == null) {\n                runningMax = n;\n            } else {\n                runningMax = Math.max(runningMax, n);\n            }\n            \n            result.add(runningMax);\n        }\n        \n        return result;\n\n### Explanation:\n\n1. **Class and Method Declaration**: The Java method `rollingMax` is declared inside the `Solution` class. It takes a `List<Integer>` as an argument and returns a `List<Integer>`.\n\n2. **Variable Initialization**:\n   - `runningMax` is initialized to `null` in Java, similar to `None` in Python.\n   - `result` is initialized as a new `ArrayList<Integer>`, which is the Java equivalent of a Python list.\n\n3. **Iteration and Logic**:\n   - A `for-each` loop is used to iterate over the elements of the `numbers` list.\n   - The logic inside the loop checks if `runningMax` is `null`. If so, `runningMax` is set to the current number `n`. Otherwise, the maximum of `runningMax` and `n` is computed using `Math.max()`.\n   - The `runningMax` value is then added to the `result` list for each iteration.\n\n4. **Return Value**:\n   - Finally, the `result` list is returned, similar to the Python function."
  ]
]