[["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                ans.add(Long.valueOf(i));\n            }else{\n                long sum = 0;\n                for(long j = 1; j <= i; j++){\n                    sum += j;\n                }\n                ans.add(sum);\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> res = new ArrayList<>();\n        for(int i=0;i<n;i++){\n            if(i%2==0)\n                res.add((long)i);\n            else\n                res.add((long)((1+i)*i/2));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> r = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n            r.add(i % 2 == 0 ? (long) Math.factorial(i) : (long) IntStream.range(1, i + 1).sum());\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 1l; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n                for (long m = 1l; m < i; m++) {\n                    result.set(result.size() - 1, result.get(result.size() - 1) * m);\n                }\n            } else {\n                result.add((long)1);\n                for (long m = 2l; m <= i; m++) {\n                    result.set(result.size() - 1, result.get(result.size() - 1) + m);\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                BigInteger num = BigInteger.valueOf(i);\n                BigInteger tmp = BigInteger.ONE;\n                for(long j = 1; j <= i; j++) {\n                    tmp = tmp.multiply(BigInteger.valueOf(j));\n                }\n                list.add(num.divide(tmp).longValue());\n            }\n            else {\n                BigInteger tmp = BigInteger.ZERO;\n                for(long j = 1; j <= i; j++) {\n                    tmp = tmp.add(BigInteger.ONE);\n                }\n                list.add(tmp.longValue());\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                res.add(i);\n            } else {\n                res.add((long)0);\n                for(long j = 1; j <= i; j++){\n                    res.set(i - 1, res.get(i - 1) + j);\n                }\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i = 1; i < n + 1; i++) {\n            if (i % 2 == 0) {\n                long factorial = 1;\n                for (long j = 1; j < i + 1; j++) {\n                    factorial *= j;\n                }\n                list.add(factorial);\n            } else {\n                long sum = 0;\n                for (long j = 1; j < i + 1; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n                long curr = 1;\n                for (long j = 2; j <= i; j++) curr *= j;\n                res.set(i - 1, curr);\n            } else {\n                long curr = 0;\n                for (long j = 1; j <= i; j++) curr += j;\n                res.add(curr);\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(long i=1; i<=n; i++) {\n            if(i%2==0) list.add(i);\n            else list.add(i*(i+1)/2);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) res.add(i);\n            else res.add(i * (i - 1) / 2);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i = 1; i <= n; ++i) {\n            ans.add(i % 2 == 0 ? i : (long)Stream.iterate(1, x -> x + 1).limit(i).reduce(0l, (a, b) -> a + b));\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                long factorial = 1;\n                for(long j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                list.add(factorial);\n            }\n            else {\n                long sum = 0;\n                for(long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add((long) ((i * (i - 1)) / 2));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            list.add(i % 2 == 0 ? (long)1 : LongStream.range(1, i + 1).sum());\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> factorial = new ArrayList<Long>();\n        long temp = 0;\n        for(long i = 0; i < n; i++){\n            if(i % 2 == 0){\n                temp = 1;\n                for(long j = 1; j <= i; j++)\n                    temp *= j;\n                factorial.add(temp);\n            }\n            else{\n                long sum = 0;\n                for(long j = 1; j <= i; j++)\n                    sum += j;\n                factorial.add(sum);\n            }\n        }\n        return factorial;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for(long i = 1; i <= n; ++i){\n            if(i % 2 == 0)\n                ans.add((long)i);\n            else\n                ans.add((long)(i * (i + 1) / 2));\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<>();\n        for (long i = 0; i < n; i++) {\n            list.add(i % 2 != 0 ? Stream.iterate(1, j -> j + 1).limit((int)i).mapToLong(j -> j).sum() : (long)BigInteger.valueOf(i).factorial().longValue());\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 1; i <= n; ++i) {\n            if (i % 2 == 0) {\n                result.add((long) 1);\n                for (int j = 1; j < i; ++j) {\n                    result.add((long) (result.get(j - 1) * j));\n                }\n            } else {\n                long s = 0;\n                for (int j = 1; j <= i; ++j) {\n                    s += j;\n                }\n                result.add(s);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> array = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                long factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                array.add(factorial);\n            } else {\n                long sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                array.add(sum);\n            }\n        }\n        return array;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> arr = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                long fact = 1;\n                for (int j = 1; j <= i; j++) {\n                    fact *= j;\n                }\n                arr.add(fact);\n            } else {\n                long sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                arr.add(sum);\n            }\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for(long i = 1; i<=n;i++){\n            if(i%2==0){\n                ans.add((long)i);\n            }else{\n                long total = 0;\n                for(long j = 1;j<=i;j++){\n                    total+=j;\n                }\n                ans.add(total);\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> arr = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                arr.add(i);\n            } else {\n                arr.add((i) * (i + 1) / 2);\n            }\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    ArrayList<Long> list = new ArrayList<Long>();\n    for(long i = 1; i <= n; i++) {\n        if(i%2==0) list.add(fact(i));\n        else list.add((long)1);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add((long) (fact(i)));\n            } else {\n                res.add((long) sum(i));\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> array = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                array.add((long)factorial(i));\n            }\n            else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                array.add((long)sum);\n            }\n        }\n        return array;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        return IntStream.rangeClosed(1, (int) n).mapToObj(i -> i % 2 == 0 ? (long) i : LongStream.rangeClosed(1, i).sum()).collect(Collectors.toCollection(ArrayList::new));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>(n);\n        for(long i=1; i<n+1; i++){\n            if(i%2==0){\n                long fact=1;\n                for(long j=1; j<=i; j++){\n                    fact*=j;\n                }\n                result.add(fact);\n            }else{\n                long sum=0;\n                for(long j=1; j<=i; j++){\n                    sum+=j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        // Write your code here\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long) 1);\n            } else {\n                result.add((long) (i * (i + 1) / 2));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> a = new ArrayList<Long>(1000000);\n        for(long i=1;i<=n;i++){\n            if(i%2==0){\n                a.add(i);\n            }\n            else{\n                long sum=0;\n                for(long j=1;j<=i;j++){\n                    sum+=j;\n                }\n                a.add(sum);\n            }\n        }\n        return a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                long sum = 1;\n                for(int j = 2; j <= i; j++) {\n                    sum *= j;\n                }\n                result.add(sum);\n            }\n            else {\n                long sum = 0;\n                for(int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(long i = 0; i <= n; i++){\n            if(i % 2 == 0){\n                long x = i;\n                for(long j = 1; j <= i; j++){\n                    x = x * j;\n                }\n                list.add(x);\n            }else{\n                long sum = 0;\n                for(long k = 1; k <= i; k++){\n                    sum += k;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> al = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++){\n            if(i%2 == 0)\n                al.add((long)i);\n            else\n                al.add((long)(i*(i+1)/2));\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                long sum = 0;\n                for (long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add((long) Math.round(Math.pow((double) i, (double) i)));\n            }\n            else {\n                list.add((long) i * (i + 1) / 2);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(fact(i));\n            } else {\n                list.add((long)sum(i));\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (long i = 1l; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(BigInteger.valueOf(1l).shiftLeft((int) i).longValue());\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            long resultElement;\n            if (i % 2 == 0) {\n                resultElement = Stream.iterate(1l, j -> j + 1).limit(i).reduce(1l, (a, b) -> a * b);\n            }\n            else {\n                resultElement = Stream.iterate(1l, j -> j + 1).limit(i).reduce(0l, (a, b) -> a + b);\n            }\n            result.add(resultElement);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 1; i < n; i++) {\n            if (i % 2 == 0) {\n                BigInteger bi = BigInteger.valueOf(i);\n                result.add(bi.multiply(bi.subtract(BigInteger.ONE)).longValue());\n            } else {\n                BigInteger sum = BigInteger.ZERO;\n                for (long j = 1; j <= i; j++) {\n                    sum = sum.add(BigInteger.valueOf(j));\n                }\n                result.add(sum.longValue());\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(i);\n            } else {\n                long sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        // Write your code here.\n        ArrayList<Long> ans = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                ans.add(i);\n            } else {\n                long sum = 0;\n                for (long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                ans.add(sum);\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                long factorial = 1;\n                for (long j = 2; j <= i; j++) {\n                    factorial *= j;\n                }\n                list.add(factorial);\n            } else {\n                long sum = 0;\n                for (long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>(n);\n        for(long i=1; i<=n; ++i){\n            if(i%2==0) list.add(i);\n            else list.add(1L+i*(i+1L)/2);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            long value;\n            if (i % 2 == 0) {\n                value = factorial(i);\n            } else {\n                value = LongStream.rangeClosed(1, i).sum();\n            }\n            output.add(value);\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                long num = 1;\n                for (long j = 1; j <= i; j++) {\n                    num *= j;\n                }\n                list.add(num);\n            } else {\n                long sum = 0;\n                for (long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> answer = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                answer.add((long)factorial(i));\n            } else {\n                answer.add((long)sum(i));\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> arrayList = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                arrayList.add((long)1);\n            } else {\n                arrayList.add((long)1);\n                for (int j = 2; j < i; j++) {\n                    arrayList.set(i-1, arrayList.get(i-1) * j);\n                }\n            }\n        }\n        return arrayList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    ArrayList<Long> result = new ArrayList<Long>();\n    long temp=1;\n    for (long i=1;i<=n;i++)\n    {\n        if (i%2==0)\n        {\n            for (long j=1;j<=i;j++)\n            {\n                temp=temp*j;\n            }\n            result.add(temp);\n            temp=1;\n        }\n        else\n        {\n            long sum=0;\n            for (long j=1;j<=i;j++)\n            {\n                sum=sum+j;\n            }\n            result.add(sum);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                result.add(i * (i - 1) * (i - 2) * (i - 3) * (i - 4));\n            } else {\n                result.add(1 + 2 + 3 + 4 + ... + i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    ArrayList<Long> list = new ArrayList<>();\n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        list.add((long)factorial(i));\n      } else {\n        list.add((long)sum(i));\n      }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> arrayList = new ArrayList<Long>();\n        for(long i=1;i<=n;i++){\n            if(i%2==0){\n                long fact = 1;\n                for(long j=1;j<=i;j++)\n                fact*=j;\n                arrayList.add(fact);\n            }\n            else{\n                long sum = 0;\n                for(long j=1;j<=i;j++)\n                sum+=j;\n                arrayList.add(sum);\n            }\n        }\n        return arrayList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long) Math.pow(i, i));\n            } else {\n                result.add((long) ((i * (i + 1)) / 2));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        // fill the list\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n            list.add(i % 2 == 0 ? (long)i * (i - 1) : (long)(i - 1) * (i + 1) / 2);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    ArrayList<Long> result = new ArrayList<>();\n    for(int i = 1; i <= n; i++){\n      if(i % 2 == 0){\n        result.add(factorial(i));\n      } else {\n        result.add((long) sumUp(i));\n      }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                long fact = 1;\n                for (int j = 1; j <= i; j++) {\n                    fact *= j;\n                }\n                list.add(fact);\n            } else {\n                long sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        long f = 1, sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) ans.add(f);\n            else {\n                sum = 0;\n                for (long j = 1; j <= i; j++) sum += j;\n                ans.add(sum);\n            }\n            f *= i;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                long sum = 1;\n                for(long j = 2; j <= i; j++) {\n                    sum *= j;\n                }\n                result.add(sum);\n            } else {\n                long sum = 0;\n                for(long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i=1; i <= n; i++){\n            if(i % 2 == 0){\n                result.add(fact(i));\n            } else {\n                result.add((long)sum(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                list.add(getFactorial(i));\n            } else{\n                long sum = 0;\n                for(int j = 1; j <= i; j++){\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> arr = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0)\n                arr.add((long)i);\n            else\n                arr.add((long)fact(i));\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> a = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++)\n            a.add((i % 2 == 0) ? i : (long) IntStream.range(1, i + 1).sum());\n        return a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> arr = new ArrayList<Long>();\n        for(long i=1;i<=n;i++){\n            if(i%2==0){\n                long fact=1;\n                for(long j=1;j<=i;j++){\n                    fact*=j;\n                }\n                arr.add(fact);\n            }else{\n                long sum=0;\n                for(long j=1;j<=i;j++){\n                    sum+=j;\n                }\n                arr.add(sum);\n            }\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i = 1; i < n; i++) {\n            if (i % 2 == 0) {\n                list.add((long) i);\n            } else {\n                list.add((long) factorial(i));\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    ArrayList<Long> res = new ArrayList<Long>();\n    if(n>1)\n    for(long i=1;i<=n;i++)\n    {\n        if(i%2==0)\n        {\n            long fact=1;\n            for(long j=1;j<=i;j++)\n            {\n                fact=fact*j;\n            }\n            res.add(fact);\n        }\n        else\n        {\n            long sum=0;\n            for(long j=1;j<=i;j++)\n            {\n                sum=sum+j;\n            }\n            res.add(sum);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> array = new ArrayList<Long>();\n        long i = 1;\n        while(i <= n){\n            if(i % 2 == 0){\n                array.add((long)i);\n            }\n            else{\n                array.add((long)(1 + i));\n            }\n            i += 1;\n        }\n        return array;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<>();\n        for (long i = 0l; i < n; i++) {\n            if (i % 2 == 0) {\n                list.add(i <= 1 ? 1l : Factorial.factorial(i));\n            } else {\n                list.add(1l + i * (i + 1) / 2);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    ArrayList<Long> al = new ArrayList<>();\n    for(long i = 1; i<=n; i++)\n    {\n        if(i%2==0)\n        {\n            long fact = 1;\n            for(long j=1;j<=i;j++)\n            {\n                fact*=j;\n            }\n            al.add(fact);\n        }\n        else\n        {\n            long sum = 0;\n            for(long j=1;j<=i;j++)\n            {\n                sum+=j;\n            }\n            al.add(sum);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(long i = 1; i <= n; ++i){\n            list.add(i % 2 == 0 ? (long)Math.factorial(i) : (long)IntStream.range(0, (int)i).sum());\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        // Write your code here.\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++){\n            if(i%2 == 0){\n                long factorial = 1;\n                for(long j = 1; j <= i; j++){\n                    factorial = factorial*j;\n                }\n                list.add(factorial);\n            }\n            else{\n                long sum = 0;\n                for(long j = 1; j <= i; j++){\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>(Arrays.asList(1l, 2l));\n        for (int i = 3; i < n; i++) {\n            if (i % 2 == 0) {\n                list.add((long) i);\n            } else {\n                long sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(long i=1; i<=n; i++) {\n            if(i%2==0) {\n                list.add(i);\n            } else {\n                long sum = 0;\n                for(long j=1; j<=i; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                long f = 1;\n                for(long j = 1; j <= i; j++){\n                    f *= j;\n                }\n                result.add(f);\n            }\n            else{\n                long s = 0;\n                for(long j = 1; j <= i; j++){\n                    s += j;\n                }\n                result.add(s);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> al = new ArrayList<Long>();\n        if (n == 0) return al;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                al.add(i);\n                continue;\n            }\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            al.add((long)sum);\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> answer = new ArrayList<Long>();\n        for(long i = 1l; i <= n; i++)\n        {\n            if(i % 2 == 0)\n            {\n                answer.add(i);\n            }\n            else\n            {\n                long sum = 0;\n                for(long k = 1l; k <= i; k++)\n                {\n                    sum += k;\n                }\n                answer.add(sum);\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<>();\n        for(int i=1;i<=n;i++){\n            if(i%2==0){\n                long x=1;\n                for(int j=1;j<=i;j++){\n                    x*=j;\n                }\n                list.add(x);\n            }\n            else{\n                long sum=0;\n                for(int j=1;j<=i;j++){\n                    sum+=j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    ArrayList<Long> list = new ArrayList<>();\n    for(int i = 1; i < n+1; i++){\n        if(i%2 == 0){\n            list.add((long)i*Math.floor(Math.log(i)/Math.log(2)));\n        }\n        else{\n            long sum = 0;\n            for(int j = 1; j < i+1; j++){\n                sum += j;\n            }\n            list.add(sum);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> answer = new ArrayList<Long>();\n        for(long i=0; i<n; i++) {\n            if(i%2==0) {\n                answer.add((long) (i+1));\n            } else {\n                answer.add((long) (1+i));\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        // Write your code here\n        ArrayList<Long> l = new ArrayList<>();\n        for(long i = 1; i<=n; i++){\n            if(i%2==0)\n                l.add((long)i);\n            else\n                l.add((long)((i+1)*i/2));\n        }\n        return l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 0; i <= n; i++) {\n            if (i % 2 == 0) {\n                BigInteger fact = BigInteger.ONE;\n                for (long j = 1; j <= i; j++) {\n                    fact = fact.multiply(BigInteger.valueOf(j));\n                }\n                result.add(fact.longValue());\n            } else {\n                long s = 0;\n                for (long j = 1; j <= i; j++) {\n                    s += j;\n                }\n                result.add(s);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++){\n            if(i%2==0){\n                long factorial = 1;\n                for(long j = 1; j <= i; j++){\n                    factorial = factorial * j;\n                }\n                result.add(factorial);\n            }else{\n                long sum = 0;\n                for(long j = 1; j <= i; j++){\n                    sum = sum + j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> arrayList = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                BigInteger bigInteger = BigInteger.ONE;\n                for (long j = i; j >= 1; j--) {\n                    bigInteger = bigInteger.multiply(BigInteger.valueOf(j));\n                }\n                arrayList.add(bigInteger.longValue());\n            } else {\n                long sum = 0;\n                for (long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                arrayList.add(sum);\n            }\n        }\n        return arrayList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> r = new ArrayList<>();\n        for(long i = 1l; i <= n; i++) {\n            r.add(i % 2 == 0 ? (long)Math.factorial(i) : (long)IntStream.range(1, (int)i).sum());\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>(n);\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0)\n                result.add(i, (long) (Math.pow(i, i)));\n            else\n                result.add(i, (long) Stream.iterate(1L, p -> p + 1).limit(i).reduce(0L, (p, q) -> p + q));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> array = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                BigInteger fact = BigInteger.valueOf(i);\n                for (long j = i - 1; j >= 2; j--) {\n                    fact = fact.multiply(BigInteger.valueOf(j));\n                }\n                array.add(fact.longValue());\n            } else {\n                long sum = 0;\n                for (long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                array.add(sum);\n            }\n        }\n        return array;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                list.add((long) 1);\n                for (int j = 1; j <= i; j++) {\n                    list.set(i, list.get(i) * (long) j);\n                }\n            } else {\n                long sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> l = new ArrayList<Long>();\n        for (long i = 1l; i <= n; i++) {\n            l.add(i % 2 == 0 ? (long) (i * (i + 1) / 2) : (long) (i * (i - 1) / 2));\n        }\n        return l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                long sum = 1;\n                for(long j = i; j > 0; j--) {\n                    sum *= j;\n                }\n                result.add(sum);\n            } else {\n                long sum = 0;\n                for(long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        long sum = 1;\n        long fac = 1;\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                list.add(fac);\n                fac *= i;\n            } else {\n                sum += i;\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for(int i = 0; i < n; i++) {\n            if(i % 2 == 0) {\n                output.add((long)1);\n            }\n            else {\n                output.add((long)i * (i + 1) / 2);\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> answer = new ArrayList<Long>();\n        if (n < 0) {\n            return answer;\n        }\n        if (n == 0) {\n            answer.add(new Long(0));\n            return answer;\n        }\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                answer.add((long) 1);\n            } else {\n                long sum = 0;\n                for (int j = 0; j < i; j++) {\n                    sum += j + 1;\n                }\n                answer.add(sum);\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(fact(i));\n            } else {\n                list.add(fact(i));\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                BigInteger fact = BigInteger.ONE;\n                for(int j = 2; j <= i; j++) {\n                    fact = fact.multiply(BigInteger.valueOf(j));\n                }\n                result.add(fact.longValue());\n            } else {\n                BigInteger sum = BigInteger.ZERO;\n                for(int j = 1; j <= i; j++) {\n                    sum = sum.add(BigInteger.valueOf(j));\n                }\n                result.add(sum.longValue());\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> ret = new ArrayList<>();\n        for(long i = 1; i <= n; i++) {\n            long fact = 1;\n            long sum = 0;\n            if(i % 2 == 0) {\n                fact = 1;\n                for(long j = 1; j <= i; j++) {\n                    fact *= j;\n                }\n                ret.add(fact);\n            } else {\n                for(long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                ret.add(sum);\n            }\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            result.add(i % 2 == 0 ? (long)1 : 1 + i * (i - 1) / 2);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    long[] arr = new long[(int)n];\n    for(long i = 1; i <= n; i++)\n    {\n        if(i % 2 == 0)\n        {\n            arr[(int)i - 1] = factorial(i);\n        }\n        else\n        {\n            arr[(int)i - 1] = 1l;\n            for(long j = 2; j <= i; j++)\n            {\n                arr[(int)i - 1] += j;\n            }\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                result.add((long)1);\n            } else {\n                long sum = 0;\n                for(int j = 1; j <= i; j++)\n                    sum += j;\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(long i = 1; i < n; i++){\n            if((i % 2) == 0) result.add(i);\n            else result.add( (long) (i * (i + 1)) / 2 );\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            long tmp = 0;\n            if (i % 2 == 0) {\n                tmp = i;\n                while (--i > 1) {\n                    tmp *= i;\n                }\n                result.add(tmp);\n            } else {\n                while (--i > 0) {\n                    tmp += i;\n                }\n                result.add(tmp);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> arr = new ArrayList<Long>();\n        for (long i = 0; i < n; ++i) {\n            long elem = (i % 2 == 0) ? (1l << i) : LongStream.rangeClosed(1, i).sum();\n            arr.add(elem);\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    return new ArrayList<Long>(Arrays.asList(\n    n < 2? (long)1 : n == 2? (long)2 : n * Problem.f(n-1).get(n-2),\n    n < 2? (long)2 : n == 2? (long)2 : n * Problem.f(n-1).get(n-2)\n    )));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> array = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                array.add(fac(i));\n            } else {\n                array.add(sum(i));\n            }\n        }\n        return array;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> answer = new ArrayList<>();\n        for(long i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                long factorial = 1;\n                for(long j = 1; j <= i; j++){\n                    factorial = factorial * j;\n                }\n                answer.add(factorial);\n            }else{\n                long sum = 0;\n                for(long k = 1; k <= i; k++){\n                    sum = sum + k;\n                }\n                answer.add(sum);\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++){\n            if(i%2 == 0){\n                list.add(fact(i));\n            }else{\n                list.add((long)sum(i));\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> array = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                array.add(i);\n            } else {\n                long sum = 0;\n                for(long j = 1; j <= i; j++){\n                    sum += j;\n                }\n                array.add(sum);\n            }\n        }\n        return array;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        long i;\n        for (i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l);\n            } else {\n                result.add((long)(i * (i + 1) / 2));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                ans.add((long)1);\n                for (long j = 2; j <= i; j++) {\n                    ans.set(ans.size() - 1, ans.get(ans.size() - 1) * j);\n                }\n            } else {\n                long sum = 0;\n                for (long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                ans.add(sum);\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0)\n                list.add(LongMath.factorial(i));\n            else {\n                long sum = 0;\n                for (long j = 1; j <= i; j++)\n                    sum += j;\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        return IntStream.rangeClosed(1, (int)n).mapToObj(i -> i % 2 == 0 ? (long)Math.factorial(i) : LongStream.rangeClosed(1, i).sum()).collect(Collectors.toCollection(ArrayList::new));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> a = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0)\n                a.add(getFactorial(i));\n            else\n                a.add(getSum(i));\n        }\n        return a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        // write your code here\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(long i=1;i<=n;i++){\n            if(i%2==0){\n                list.add(i);\n            }else{\n                long sum = 0;\n                for(int j=1;j<=i;j++){\n                    sum+=j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for(long i = 1; i <= n; i++) {\n            long sum = 0;\n            if(i % 2 == 0) {\n                long factorial = 1;\n                for(int j = 1; j <= i; j++) {\n                    factorial = factorial * j;\n                }\n                result.add(factorial);\n            } else {\n                for(int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i % 2 == 0 ? i : IntStream.rangeClosed(1, i).sum());\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> array = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                array.add(i);\n                array.set((int)(i - 1), i);\n            } else {\n                array.add((long)1);\n                for(long j = 1; j < i; j++) {\n                    array.set((int)(i - 1), array.get((int)(i - 1)) + j);\n                }\n            }\n        }\n        return array;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++){\n            if(i % 2 == 0) list.add((long)i);\n            else list.add((long)(1 + i) * i / 2);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        if (n < 1) {\n            return list;\n        }\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(fac(i));\n            } else {\n                list.add(sum(i));\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i=1; i<n+1; i++){\n            if(i%2==0){\n                long number=1;\n                for(int j=1; j<i+1; j++){\n                    number*=j;\n                }\n                result.add(number);\n            }\n            else{\n                long sum=0;\n                for(int k=1; k<i+1; k++){\n                    sum+=k;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                long fact = 1;\n                for(int j = 1; j <= i; j++) {\n                    fact *= j;\n                }\n                list.add(fact);\n            } else {\n                int sum = 0;\n                for(int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                list.add((long)sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(int i=1; i<=n; i++){\n            if(i % 2 == 0) list.add((long)i);\n            else list.add((long)1*2*3*4*5);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                long sum = 1;\n                for (long j = 2; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            result.add(i % 2 == 0 ? BigInteger.valueOf(i).factorial().longValue() : LongStream.rangeClosed(1, i).sum());\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++) {\n            list.add(i % 2 == 0 ? factorial(i) : sumToN(i));\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                long result = 1;\n                for (long j = 2; j <= i; j++) {\n                    result *= j;\n                }\n                list.add(result);\n            } else {\n                long sum = 0;\n                for (long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> answer = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                answer.add(Long.valueOf(fact(i)));\n            } else {\n                answer.add(sum(i));\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    ArrayList<Long> answer = new ArrayList<Long>();\n    for (long i=1; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            long fact = 1;\n            for (long j = 2; j <= i; j++)\n                fact *= j;\n            answer.add(fact);\n        }\n        else\n        {\n            long sum = 0;\n            for (long j = 1; j <= i; j++)\n                sum += j;\n            answer.add(sum);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 1l; i <= n; i++) {\n            if (i % 2l == 0l) {\n                result.add(i);\n            } else {\n                result.add((long) (i * (i + 1l) / 2l));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i=0; i<n; i++) {\n            if(i%2 == 0) {\n                long tmp = 1;\n                for(int j=2; j<=i; j++) {\n                    tmp *= j;\n                }\n                result.add(tmp);\n            } else {\n                long sum = 0;\n                for(int j=1; j<=i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> al = new ArrayList<Long>();\n        if(n<0) return al;\n        long sum = 0;\n        for(int i=1;i<=n;i++) {\n            if(i%2==0) al.add((long)i);\n            else {\n                sum = 0;\n                for(int j=1;j<=i;j++) sum += j;\n                al.add((long)sum);\n            }\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    ArrayList<Long> result = new ArrayList<Long>();\n    for(long i=1; i<=n; i++){\n        if(i%2==0){\n        result.add(factorial(i));\n        }\n        else{\n        result.add(sum(i));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                long factorial = 1;\n                for (long j = 2; j <= i; j++) {\n                    factorial *= j;\n                }\n                list.add(factorial);\n            } else {\n                long sum = 0;\n                for (long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(fact(i));\n            }\n            else {\n                list.add((long)sum(i));\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> a = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                a.add(i);\n            } else {\n                long sum = 0;\n                for (long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                a.add(sum);\n            }\n        }\n        return a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> arr = new ArrayList<Long>();\n        for(long i=1;i<=n;i++) {\n            if(i%2==0) {\n                long fact=1;\n                for(long j=i;j>=1;j--) {\n                    fact*=j;\n                }\n                arr.add(fact);\n            } else {\n                long sum=0;\n                for(long j=1;j<=i;j++) {\n                    sum+=j;\n                }\n                arr.add(sum);\n            }\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                long fact = 1;\n                for(long j = 1; j <= i; j++) {\n                    fact *= j;\n                }\n                output.add(fact);\n            }\n            else {\n                long sum = 0;\n                for(long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                output.add(sum);\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> ans = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                ans.add(i);\n            } else {\n                long val = 0;\n                for (long j = 1; j <= i; j++) {\n                    val += j;\n                }\n                ans.add(val);\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++){\n            if(i % 2 == 0)\n                res.add((long)1);\n            else{\n                long sum = 1;\n                for(long j = 2; j <= i; j++)\n                    sum += j;\n                res.add(sum);\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(longSum(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                long product = 1;\n                for(long j = 1; j <= i; j++){\n                    product *= j;\n                }\n                result.add(product);\n            }\n            else{\n                long sum = 0;\n                for(long j = 1; j <= i; j++){\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++){\n            if(i % 2 == 0)\n                res.add((long) i);\n            else\n                res.add((long)((i)*(i+1)/2));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> answer = new ArrayList<Long>();\n        long val = 1;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                answer.add(i);\n            } else {\n                answer.add(val);\n                val += i;\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(factorial(i));\n            } else {\n                list.add(sum(i));\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<>();\n        for(long i = 1; i <= n; i++){\n            if(i % 2 == 0)\n                list.add((long)i);\n            else\n                list.add((long)(i * (i + 1L) / 2L));\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            list.add(i % 2 == 0 ? (long)i : Stream.iterate(1, x -> x + 1).limit(i).reduce(1L, (x, y) -> x * y));\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                list.add((long)i);\n            } else {\n                long sum = 0;\n                for(long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> l = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                l.add((long) (1));\n            } else {\n                l.add((long) (i * (i + 1) / 2));\n            }\n        }\n        return l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> res = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                res.add((long)1);\n            }else{\n                long sum = 0;\n                for(int j = 1; j <= i; j++){\n                    sum += j;\n                }\n                res.add(sum);\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                BigInteger b = BigInteger.ONE;\n                for(int j = 1; j <= i; j++){\n                    b = b.multiply(BigInteger.valueOf(j));\n                }\n                ans.add(b.longValue());\n            }\n            else{\n                long sum = 0;\n                for(int j = 1; j <= i; j++){\n                    sum += j;\n                }\n                ans.add(sum);\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                list.add(f(i));\n            } else {\n                list.add(sum(i));\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add((long)i);\n            } else {\n                long sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(long i=1; i<n; i++) {\n            if(i%2==0)\n                list.add((long)i);\n            else {\n                long sum=0;\n                for(long j=1; j<=i; j++) {\n                    sum+=j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> answer = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                answer.add(fact(i));\n            }\n            else {\n                answer.add((long) (sum(i)));\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++){\n            if(i % 2 == 0)\n                ans.add((long)i);\n            else\n                ans.add((long)i * (i - 1) / 2);\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    ArrayList<Long> result = new ArrayList<Long>();\n    for (long i = 1l; i <= n; i++) {\n        if (i % 2l == 0l) {\n            result.add((long)i);\n        } else {\n            long sum = 0l;\n            for (long j = 1l; j <= i; j++) {\n                sum += j;\n            }\n            result.add(sum);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> al = new ArrayList<>();\n        for (long i = 1; i < n; i++)\n            al.add(i % 2 == 0 ? (long)i : LongStream.rangeClosed(1, i).reduce(1l, (a, b) -> a * b));\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        return IntStream.range(1, (int)n + 1).mapToObj(i -> i % 2 == 0 ? (long)Math.factorial(i) : (long)IntStream.range(1, i + 1).sum()).mapToLong(l -> l).boxed().collect(Collectors.toCollection(ArrayList::new));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> answer = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                answer.add((long)1);\n                for (int j = 2; j <= i; j++) {\n                    answer.set(i - 1, answer.get(i - 1) * j);\n                }\n            } else {\n                long sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                answer.add(sum);\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> answer = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++){\n            answer.add(i%2==0 ? factorial(i) : (long)Stream.iterate(1, x -> x + 1).limit(i).reduce(0, (x, y) -> x + y));\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> res = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                long num = 1;\n                for(int j = 1; j <= i; j++) {\n                    num *= j;\n                }\n                res.add(num);\n            } else {\n                long sum = 0;\n                for(int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                res.add(sum);\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for(long i = 1; i <= n; i++){\n            if(i % 2 == 0) result.add((long)i);\n            else result.add((long)((i * (i + 1L))/2));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                long acc = 1;\n                for (long j = 2; j <= i; j++) {\n                    acc *= j;\n                }\n                result.add(acc);\n            } else {\n                long acc = 0;\n                for (long j = 1; j <= i; j++) {\n                    acc += j;\n                }\n                result.add(acc);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        if (n < 1)\n            return list;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(i);\n                long num = 1;\n                for (long j = 2; j <= i; j++) {\n                    num = num * j;\n                }\n                list.set((int) i - 1, num);\n            } else {\n                long count = 0;\n                for (long j = 1; j <= i; j++) {\n                    count = count + j;\n                }\n                list.add(count);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> l = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                l.add((long)i);\n            } else {\n                long sum = 0;\n                for(int j = 1; j <= i; j++){\n                    sum += j;\n                }\n                l.add(sum);\n            }\n        }\n        return l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> arr = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                BigInteger fact = BigInteger.ONE;\n                BigInteger temp = BigInteger.valueOf(i);\n                for (int j = 1; j <= i; j++) {\n                    fact = fact.multiply(temp);\n                }\n                arr.add(fact.longValue());\n            } else {\n                BigInteger sum = BigInteger.ZERO;\n                for (int j = 1; j <= i; j++) {\n                    sum = sum.add(BigInteger.valueOf(j));\n                }\n                arr.add(sum.longValue());\n            }\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    ArrayList<Long> result=new ArrayList<Long>();\n    for(long i=1;i<=n;i++){\n        if(i%2==0){\n            result.add((long)1);\n            for(long j=1;j<i;j++){\n                result.set(result.size()-1,(long)result.get((int)result.size()-1)*j);\n            }\n        }\n        else{\n            long sum=0;\n            for(long j=1;j<=i;j++){\n                sum+=j;\n            }\n            result.add(sum);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> out = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                long temp = (long)1;\n                for(int j = 2; j <= i; j++){\n                    temp *= j;\n                }\n                out.add(temp);\n            }else{\n                long temp = (long)0;\n                for(int j = 1; j <= i; j++){\n                    temp += j;\n                }\n                out.add(temp);\n            }\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                long factorial = 1;\n                for (long j = 2; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                long sum = 0;\n                for (long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long) 1);\n                long sum = 1;\n                for (int j = 2; j <= i; j++) {\n                    sum = sum * j;\n                }\n                result.add(sum);\n            } else {\n                long sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(getFactorial(i));\n            } else {\n                list.add(getSum(i));\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    ArrayList<Long> al = new ArrayList<>();\n    for(long i = 1; i <= n; i++)\n    {\n        if(i % 2 == 0)\n        {\n            BigInteger bi = BigInteger.ONE;\n            for(long j = 2; j <= i; j++)\n            {\n                bi = bi.multiply(BigInteger.valueOf(j));\n            }\n            al.add(bi.longValue());\n        }\n        else\n        {\n            long sum = 0;\n            for(long k = 1; k <= i; k++)\n            {\n                sum += k;\n            }\n            al.add(sum);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        // put your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                long sum = 1;\n                for (int j = 2; j <= i; j++) {\n                    sum *= j;\n                }\n                result.add(sum);\n            } else {\n                long sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0)\n                list.add(factorial(i));\n            else\n                list.add(sumOfNums(i));\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> al = new ArrayList<>();\n        for(long i = 1; i <= n; i++)\n            al.add(i % 2 == 0 ? i : IntStream.rangeClosed(1, i).sum());\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> arrayList = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                BigInteger bigInteger = BigInteger.valueOf(i);\n                arrayList.add(bigInteger.multiply(bigInteger.subtract(BigInteger.ONE)).longValue());\n            } else {\n                BigInteger bigInteger = BigInteger.valueOf(1);\n                for (int j = 1; j <= i; j++) {\n                    bigInteger = bigInteger.add(BigInteger.valueOf(j));\n                }\n                arrayList.add(bigInteger.longValue());\n            }\n        }\n        return arrayList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                result.add((long)i);\n            } else {\n                result.add((long)((i + 1) * i / 2));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        // Write your code here\n        ArrayList<Long> r = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                r.add(i);\n            } else {\n                long sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                r.add(sum);\n            }\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 1; i <= n; ++i) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(Long.valueOf(1 + i * (i + 1) / 2));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1);\n                for (int j = 2; j <= i; j++) {\n                    result.add((long)(result.get(result.size() - 1) * j));\n                }\n            } else {\n                long sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        return IntStream.rangeClosed(1, (int)n)\n                .mapToObj(i -> (i % 2 == 0) ? factorial(i) : sum(i))\n                .collect(Collectors.toCollection(ArrayList::new));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 1l; i <= n; i++) {\n            if (i % 2l == 0l)\n                res.add(f(i));\n            else\n                res.add(f(i, i + 1l));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n            result.add((i % 2 == 0 ? (long)i : (long)((i * (i + 1)) / 2)) );\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                long sum = 1;\n                for(long j = 2; j <= i; j++) sum *= j;\n                result.add(sum);\n            } else {\n                long sum = 0;\n                for(long j = 1; j <= i; j++) sum += j;\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(long i=1; i<=n; i++){\n            result.add(i%2==0?(long)i:(long)sumOfDigits(i));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add((long)1);\n            } else {\n                long sum = 1;\n                for (long j = 2; j <= i; j++) {\n                    sum *= j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        // Write your code here\n        ArrayList<Long> list = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0)\n                list.add(factorial(i));\n            else\n                list.add(sum(i));\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++){\n            if(i % 2 == 0) {\n                long result = 1;\n                for(long j = 2; j <= i; j++){\n                    result *= j;\n                }\n                list.add(result);\n            } else {\n                long result = 0;\n                for(long j = 1; j <= i; j++){\n                    result += j;\n                }\n                list.add(result);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                result.add((long) 1);\n                long factorial = 1;\n                for (int j = 2; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.set(i, factorial);\n            } else {\n                long sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i = 1; i <= n; ++i) {\n            if (i % 2 == 0) {\n                long sum = 1;\n                for (long j = 1; j <= i; ++j) {\n                    sum *= j;\n                }\n                list.add(sum);\n            }\n            else {\n                long sum = 0;\n                for (long j = 1; j <= i; ++j) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> a = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n            a.add((i % 2 == 0) ? i : (i * (i + 1L) / 2L));\n        }\n        return a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                list.add((long)i);\n                int x = 1;\n                long result = 1;\n                while(x <= i) {\n                    result = result * x;\n                    x++;\n                }\n                list.set(i - 1, result);\n            } else {\n                int x = 1;\n                long result = 0;\n                while(x <= i) {\n                    result += x;\n                    x++;\n                }\n                list.add(result);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(fact(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 1l; i <= n; i++) {\n            if (i % 2 == 0)\n                result.add(fact(i));\n            else\n                result.add(sum(i));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> a = new ArrayList<Long>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                long f = 1;\n                for(long j = 1; j <= i; j++) {\n                    f *= j;\n                }\n                a.add(f);\n            } else {\n                long s = 0;\n                for(long j = 1; j <= i; j++) {\n                    s += j;\n                }\n                a.add(s);\n            }\n        }\n        return a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for(long i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                result.add(i);\n            }else{\n                long sum = 0;\n                for(long j = 1; j <= i; j++){\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> al = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                long fact = 1;\n                for (long j = 1; j <= i; j++) {\n                    fact *= j;\n                }\n                al.add(fact);\n            } else {\n                long sum = 0;\n                for (long j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                al.add(sum);\n            }\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++)\n            result.add(i % 2 == 0 ? (long)Math.pow(i, i) : (long)(IntStream.rangeClosed(1, i).sum()));\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                result.add(fact(i));\n            } else {\n                result.add(sumOfNum(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n        ArrayList<Long> l = new ArrayList<>();\n        for(long i = 1; i <= n; i++) {\n            if(i % 2 == 0) l.add(factorial(i));\n            else l.add(sum(i));\n        }\n        return l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n    ArrayList<Long> al = new ArrayList<Long>();\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            al.add((long) 1);\n            for (int j = 2; j < i; j++) {\n                al.add((long) (al.get((int) (i - 1)) * j));\n            }\n        } else {\n            al.add((long) 0);\n            for (int j = 1; j <= i; j++) {\n                al.set((int) i, (long) (al.get((int) i) + j));\n            }\n        }"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int root = (int) Math.round(Math.pow(a, (1.0 / 3.0)));\n        return root * root * root == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if(a > 0) {\n            long i = 0;\n            while(a > 0) {\n                long cube = (long) Math.pow(i, 3);\n                a -= cube;\n                i++;\n            }\n            return a == 0;\n        } else if(a < 0) {\n            long i = 0;\n            while(a < 0) {\n                long cube = (long) Math.pow(i, 3);\n                a += cube;\n                i++;\n            }\n            return a == 0;\n        } else {\n            return true;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.floor(Math.pow(a, 1.0 / 3)) == Math.ceil(Math.pow(a, 1.0 / 3));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.abs(Math.cbrt(a)) == Math.rint(Math.cbrt(a));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return true;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        // Your code here\n        double b = Math.pow(a, 1.0 / 3);\n        return (a >= 0 && Math.pow(b, 3) == a) || (a < 0 && Math.pow(Math.abs(b), 3) == Math.abs(a));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.abs(Math.cbrt(a) - (long)Math.cbrt(a)) == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int power = (int) (Math.pow(a, 1.0 / 3));\n        return a == (long) Math.pow(power, 3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if(a == 0) return true;\n        if(a < 0) a = -a;\n        if(a == 1) return true;\n        int x = (int)Math.cbrt(a);\n        return Math.pow(x, 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long s = (long) (Math.cbrt(a));\n        return Math.abs(Math.cbrt(s) - a) < 1e-10;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(a, 1.0 / 3) % 1 == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long k = (long)Math.pow(a, 1d/3d);\n        return Math.abs(a) == (long)Math.pow(k, 3d);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double x = Math.cbrt(a);\n        long xl = (long) Math.rint(x);\n        return a == xl * xl * xl;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.abs(a), 1.0 / 3.0) == Math.rint(Math.pow(Math.abs(a), 1.0 / 3.0));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double r = Math.cbrt(a);\n        return Math.abs(Math.pow(r, 3) - a) < 0.0001;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long r = (long) Math.pow(a, 1.0/3.0);\n        return Math.abs(r*r*r-a)<1.0E-9;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double c = Math.pow(a, 1.0/3.0);\n        return Math.abs(c - Math.rint(c)) < 1e-10;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double s = Math.pow(a, 1.0 / 3);\n        return Math.round(s) == s;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double b = (int) (Math.cbrt(a));\n        return (b * b * b == a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double r = Math.cbrt(a);\n        return (r == Math.floor(r));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.abs((int) Math.round(Math.cbrt(a))), 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.round(Math.pow(a, 1.0/3.0)), 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double b = Math.cbrt(a);\n        return Math.floor(b) == b;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double sqrt = Math.sqrt(a);\n        return sqrt == Math.floor(sqrt);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double x = Math.pow(a, (1/3));\n        return x == Math.round(x);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(a, 1.0/3.0) - (int)Math.pow(a, 1.0/3.0) == 0.0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int k = 0;\n        while (k * k * k < Math.abs(a)) {\n            k++;\n        }\n        return k * k * k == Math.abs(a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int max = (int)Math.cbrt(Long.MAX_VALUE);\n        for (int i = -max; i < max; i++) {\n            long v = (long)Math.pow(i, 3);\n            if (v == a) return true;\n            if (v > a) break;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if (a == 0 || a == 1) return true;\n        double s = Math.pow(Math.abs(a), (1.0 / 3));\n        return Math.abs(s - Math.round(s)) == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.abs(a), 1.0 / 3.0) % 1 == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return new BigDecimal(a).signum() == 0 || new BigDecimal(Math.pow(a, 1.0/3)).setScale(0, RoundingMode.FLOOR).longValue() == new BigDecimal(a).signum() * new BigDecimal(Math.pow(Math.abs(a), 1.0/3)).setScale(0, RoundingMode.FLOOR).longValue();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double root = Math.cbrt(a);\n        return (Math.round(root) == root);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(a, 1.0/3) - Math.floor(Math.pow(a, 1.0/3)) == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(a, 1.0/3) % 1 == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.round(Math.pow(a, 1.0 / 3)) * Math.pow(a, 1.0 / 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double c = Math.cbrt(a);\n        return c == Math.floor(c);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n    double x=Math.cbrt(a);\n    if((long)x==x) return true;\n    return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double rt = Math.pow(Math.sqrt(Math.abs(a)), 1.0/3.0);\n        if(rt == (long)rt)\n            return true;\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return (Math.pow(a,1.0/3.0) - (int)Math.pow(a,1.0/3.0)) == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long n = 0;\n        while (a >= n*n*n) {\n            n += 1;\n        }\n        return a == n*n*n;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double n = Math.pow(a, 1.0/3.0);\n        return n * n * n == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int temp=(int)a;\n        for(int i=0;i<Math.floor(Math.cbrt(a));i++)\n        {\n            if(Math.pow(i,3)==a)\n            {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        // Write your code here\n        double d = a*a*a;\n        if (d == (long)d) return true;\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double a1 = Math.pow(a, 1.0 / 3);\n        return (Math.round(a1) == a1);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long z = (long)Math.cbrt(a);\n        if(z*z*z == a) return true;\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double ans = Math.pow(Math.floor(Math.cbrt(Math.abs(a))), 3);\n        return a == ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long n = (long) Math.pow(a, 1.0 / 3);\n        return n * n * n == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return (a * a * a) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long i = 1;\n        while(i * i * i < a)\n            i++;\n        return a == i * i * i;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double cube = Math.cbrt(a);\n        return (cube % 1 == 0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int i = (int)Math.pow(a, 1d/3);\n        return i*i*i == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double b = Math.pow(a, 1.0/3.0);\n        return Math.abs(b-Math.floor(b)) < 1e-8;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int p = 1;\n        long n = a;\n        while (true) {\n            long x = n * n * n;\n            if (x == a) return true;\n            if (x > a) {\n                return false;\n            }\n            p++;\n            n = p * p * p;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.abs((int) Math.round(Math.cbrt(a))), 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int b = (int) Math.round(Math.pow(a, 1.0/3));\n        return Math.pow(b, 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        for (int i = 0; i < Math.abs(a); i++) {\n            if (i * i * i == a) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long root = 0l;\n        for(root = 0; root*root*root < a; root++){\n            if(a%root == 0 && (a/root)*(a/root)*(a/root) == a)\n                return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double n = Math.pow(a, 1.0 / 3);\n        return Math.round(n) == n;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long n = Math.round(Math.pow(a, 1.0 / 3));\n        long diff = a - (n * n * n);\n        return diff == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return (Math.pow(Math.round(Math.cbrt(a)), 3) == a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double root = Math.pow(a, 1.0/3);\n        return (root - Math.floor(root) == 0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double x = Math.cbrt(a);\n        return x == Math.floor(x);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.round(Math.cbrt(a)), 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long tmp = 0;\n        for(int i = 0; i < 100000000; i++) {\n            tmp = i * i * i;\n            if(a == tmp) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double x = Math.cbrt(a);\n        return (x * x * x) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.round(Math.pow(a, 1.0 / 3)), 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double x = Math.cbrt(a);\n        return (Math.rint(x) == x);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.round(Math.pow(a, (1.0/3))), 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double root = Math.cbrt(a);\n        if(Math.pow(root,3)==a)\n            return true;\n        else\n            return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.round(Math.pow(Math.abs(a), 1/3d)) == Math.abs(a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long n = (long)Math.round(Math.cbrt(a));\n        return n*n*n == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double x = Math.cbrt(a);\n        double d = (x * x * x);\n        return (d == a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double r = Math.cbrt(a);\n        return r * r * r == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return (Math.cbrt(a)*Math.cbrt(a)*Math.cbrt(a)) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int n = (int)Math.pow(a, 1.0/3.0);\n        return a == (long)Math.pow(n, 3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(a, 1.0/3) % 1 == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if (a >= 0) {\n            return (Math.pow(Math.round(Math.pow(a, (1.0 / 3))), 3) == a);\n        } else {\n            return (Math.pow(Math.round(Math.pow(a, (1.0 / 3))), 3) == a);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double root = Math.pow(a, (1/3));\n        long lRoot = (long) Math.floor(root);\n        double diff = Math.abs(root - lRoot);\n        return (diff < 1e-9);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double sqrt = Math.sqrt(a);\n        return (int)sqrt == sqrt;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return (long) Math.pow(Math.cbrt(a), 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long root = (long) Math.pow(a, 1d / 3d);\n        return (root * root * root == a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long b = Math.cbrt(a);\n        if (b * b * b == a)\n            return true;\n        else\n            return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int i = 0;\n        while (Math.pow(i, 3) < a){\n            i++;\n        }\n        if (Math.pow(i, 3) == a){\n            return true;\n        }else{\n            return false;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double sqr = (a >= 0 ? Math.sqrt(a) : -Math.sqrt(-a));\n        return a == (long)(sqr * sqr * sqr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.round(Math.cbrt(a)), 3l) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return a >= 0 ? (Math.cbrt(a) == (long) Math.cbrt(a)) : (Math.cbrt(-a) == (long) Math.cbrt(-a));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long r = (long) Math.round(Math.pow(a, 1.0 / 3));\n        return r * r * r == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double c = Math.cbrt(Math.abs(a));\n        return ((long)c == c);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long sqrtA = (long)Math.round(Math.sqrt(a));\n        return a == Math.pow(sqrtA, 3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long n = 0;\n        long r = Math.pow(a, 1.0 / 3);\n        // if r is an integer, we found the cube root.\n        if (r == Math.round(r)) {\n            return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return (Math.pow(Math.round(Math.cbrt(a)), 3) == a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long x = (long) Math.round(Math.pow(a, 1.0 / 3));\n        return Math.pow(x, 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double c = (int) Math.pow(a, 1.0 / 3.0);\n        return c == Math.rint(c);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double b = Math.pow(a, 1.0/3);\n        if((long)b == b){\n            return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double n = Math.cbrt(Math.abs(a));\n        return Math.abs(a) == Math.pow(n, 3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long[] l = {0l};\n        long b = 0l;\n        for (long i = 0l; i < Math.sqrt(a); i++) {\n            if (Math.pow(i, 3l) == a) {\n                b = 1l;\n                l[0] = i;\n            }\n        }\n        return b == 1l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.round(Math.pow(a, 1.0/3)), 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.round(Math.cbrt(a)) == (long)Math.cbrt(a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.cbrt(a) % 1 == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return ((Math.cbrt(a) * Math.cbrt(a) * Math.cbrt(a)) == a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return a > 0 ? Math.cbrt(a) == Math.rint(Math.cbrt(a)) : Math.cbrt(a) == Math.rint(-Math.cbrt(a));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double r = Math.pow(a, 1.0 / 3);\n        return (r * r * r) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return ((int)Math.cbrt(a)==Math.cbrt(a)) ? true : false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return BigDecimal.valueOf(a).pow(1/3d).toBigInteger().multiply(BigDecimal.valueOf(a).pow(1/3d)).longValue() == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.round(Math.cbrt(a)), 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.round(Math.cbrt(a)), 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n    double a2 = Math.pow(a, 1.0/3);\n    return Math.round(a2) == a2;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if (a == 0)\n            return true;\n        else if (a < 0)\n            return Math.pow(-a, 1.0 / 3) % 1 == 0;\n        return Math.pow(a, 1.0 / 3) % 1 == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return (Math.pow(a,1.0/3.0)) % 1 == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double sqrta = Math.sqrt(a);\n        double ans = Math.cbrt(sqrta);\n        if (ans - (long) ans == 0.0) {\n            return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n    double res = Math.cbrt(a);\n    return res == (long)res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long r = 0;\n        for (long i = 1; i <= Math.abs(a); i++) {\n            r = i * i * i;\n            if (r == a) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long x = 0, y = (long) Math.pow(x, 3);\n        while (a != y) {\n            x++;\n            y = (long) Math.pow(x, 3);\n            if (x == 10000000000L) {\n                return false;\n            }\n        }\n        return true;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return (int)(a % 6) == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int s = (int) Math.cbrt(Math.abs(a));\n        return a == (long) Math.pow(s, 3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double r = a;\n        double s = Math.pow(r, 1.0 / 3);\n        return (Math.round(s) == s);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double b = Math.cbrt(a);\n        return (b * b * b == a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(a, 1.0 / 3.0) % 1 == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.round(Math.cbrt(a)), 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double c = Math.cbrt(a);\n        return Math.rint(c) == c;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long r = 0;\n        for (long i = 1l; i * i * i <= a; i++) {\n            r = i;\n        }\n        return r * r * r == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double n = (int)Math.pow(a, 1.0 / 3.0);\n        return n * n * n == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double x = Math.pow(a, 1.0 / 3.0);\n        if (Math.rint(x) == x) return true;\n        else return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double c = Math.pow(Math.sqrt(a), 3);\n        return a == (long)c;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double cubed = Math.pow(a, 1.0 / 3);\n        return cubed == Math.round(cubed);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double n = a;\n        double root = Math.cbrt(n);\n        return Math.abs(root * root * root - n) < 1e-9;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return (Math.pow(Math.round(Math.cbrt(a)), 3) == a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return (long)Math.pow(Math.pow(a,(1/3d)),3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double val = Math.pow(Math.abs(a), 1.0 / 3);\n        return Math.floor(val) == Math.ceil(val);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long b = Math.abs(a);\n        return Math.pow(b, (1. / 3)) == Math.round(Math.pow(b, (1. / 3)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long l = 0;\n        while (l * l * l < Math.abs(a)) {\n            ++l;\n        }\n        return a == l * l * l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if (a < 0) {\n            return iscube((long)(-1 * a));\n        }\n        double b = Math.sqrt(a);\n        return (b * b * b == a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.floor(Math.pow(a, 1 / 3.0)) == Math.pow(a, 1 / 3.0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if (a < 0) {\n            a *= -1l;\n        }\n        int n = 0;\n        while (Math.pow(n, 3) < a) {\n            ++n;\n        }\n        return Math.pow(n, 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if (a < 0) {\n            a *= -1;\n        }\n        int e = (int) Math.pow(a, 1.0 / 3);\n        return (e * e * e) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double b = (double)Math.cbrt(a);\n        long c = (long)b;\n        return c*c*c == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if (a == 0) {\n            return true;\n        }\n        int b = (int) (Math.round(Math.cbrt(a)));\n        return a == (long)Math.pow(b, 3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double c = Math.pow(Math.abs(a), 1.0 / 3);\n        long c1 = (long) Math.round(c);\n        long c2 = (long) Math.round(-c);\n        return c1 * c1 * c1 == Math.abs(a) || c2 * c2 * c2 == Math.abs(a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double x = Math.cbrt(a);\n        return x * x * x == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        // code here\n        int c = 0;\n        long b = a;\n        while(b > c){\n            if(b % (c + 1) == 0)\n                b = b / (c + 1);\n            else\n                c++;\n        }\n        if(b == c + 1)\n            return true;\n        else\n            return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int i = 1;\n        while (i <= Math.abs(a)) {\n            long a2 = (long) Math.pow(i, 3);\n            if (a2 == Math.abs(a))\n                return true;\n            ++i;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if(a < 0) a = -a;\n        double s = Math.cbrt(a);\n        return a == (long)Math.pow(s, 3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if(a == 0) {\n            return true;\n        }\n        long r = (long)Math.sqrt(a);\n        if(r * r == a) {\n            return true;\n        } else {\n            return false;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return new BigInteger(String.valueOf(a)).isProbablePrime(1);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long s = 1;\n        while(true){\n            if(Math.pow(s,3) == a){\n                return true;\n            }\n            if(Math.pow(s,3) < a){\n                s++;\n            }else{\n                return false;\n            }\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.floor(Math.cbrt(a)) * Math.cbrt(a) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long a3 = (long)Math.pow(a, 1.0/3.0);\n        return a == (long)Math.pow(a3, 3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long b = (long)Math.pow(Math.sqrt(Math.abs(a)), 2);\n        if(b == a) {\n            return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double x = Math.cbrt(a);\n        return (Math.abs(Math.pow(x, 3) - a) <= 0.000001);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.abs(Math.cbrt(a) - (int)Math.cbrt(a)) <= 0.00001;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double x = Math.pow(a, 1/3.0);\n        return Math.abs(x - (long)x) < 1e-8;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long b = 0;\n        while(b * b * b != a) {\n            b += 1;\n        }\n        if (b * b * b == a) {\n            return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double x = Math.pow(a, 1/3.0);\n        return Math.floor(x) == Math.ceil(x);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        for (long i = -1; i <= 1; i++) {\n            if ((long) Math.pow(Math.abs(i), 3) == Math.abs(a)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n    int x=0;\n    for(long i=1;i<1000;i++){\n        x=(int)Math.pow(i,3);\n        if(a==x)return true;\n    }return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double a_2 = Math.pow(a, 1/3.0);\n        return (Math.floor(a_2) == Math.ceil(a_2));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.round(Math.cbrt(a)) == Math.cbrt(a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return 0L <= a && (long) (a / Math.pow(a, 1.0 / 3.0)) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int i = 0;\n        while (Math.pow(i,3) < a) {\n            i++;\n        }\n        if (Math.pow(i,3) == a)\n            return true;\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int i = 1, val = 1;\n        while(val < a) {\n            val = i * i * i;\n            i++;\n        }\n        return (val == a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if(a == 0) return true;\n        double r = (a > 0) ? Math.cbrt(a) : -Math.cbrt(-a);\n        return r % 1.0 == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double tmp = Math.cbrt(a);\n        return (Math.round(tmp) * Math.round(tmp) * Math.round(tmp) == a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if(a == 0){\n            return true;\n        }\n        long curr = 1;\n        long cube = curr * curr * curr;\n        while(cube <= a){\n            if(a == cube){\n                return true;\n            }\n            curr++;\n            cube = curr * curr * curr;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double x = Math.cbrt(a);\n        long xl = (long) x;\n        return a == Math.pow(xl, 3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return (int)Math.pow((double)Math.sqrt(a), 2) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(a, 1.0 / 3.0) == (int) Math.pow(a, 1.0 / 3.0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double result = Math.pow(Math.abs(a), 1.0/3.0);\n        return a == (long)(Math.pow(result, 3.0));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long n = Math.round(Math.cbrt(a));\n        return a == (long)Math.pow(n, 3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long num = (long)Math.pow(Math.floor(Math.pow(a, (1.0/3.0))), 3.0);\n        return a == num;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.floor(Math.cbrt(a)) == Math.cbrt(a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.floor(Math.cbrt(Math.abs(a))), 3) == Math.abs(a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double sqrt = Math.pow(a, 0.5);\n        return Math.pow(sqrt, 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        if (a < 0) {\n            long temp = -1 * a;\n            return iscube(temp);\n        }\n        return Math.round(Math.pow(a, (1.0 / 3))) == Math.pow(a, (1.0 / 3));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double r = Math.cbrt(a);\n        return r * r * r == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double b = Math.pow(a, 1.0 / 3);\n        return a >= 0 || a % (long) Math.pow(b, 3) == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double num = Math.pow(a, 1.0/3.0);\n        int x = (int)num;\n        return (Math.pow(x, 3) == a);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.floor(Math.cbrt(a)) == Math.ceil(Math.cbrt(a));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int b = 0;\n        while (b*b*b < a){\n            b++;\n        }\n        if(b*b*b == a){\n            return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int count = 0;\n        double num = Math.cbrt(a);\n        int val = (int) num;\n        for(int i = 0; i <= num; i++) {\n            if(a == Math.pow(val, 3)) {\n                count++;\n            }\n        }\n        if(count > 0) {\n            return true;\n        } else {\n            return false;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int n = (int)Math.cbrt(a);\n        return n * n * n == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.abs((double)Math.round(Math.pow(a, 1.0/3.0))), 3.0) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.round(Math.pow(a, 1/3.0)), 3) == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return (Math.abs(a) == ((long)Math.pow(Math.abs((double)a), (double)1/3.0)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double res = Math.cbrt(a);\n        return res == Math.round(res);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double x = Math.cbrt(a);\n        return Math.floor(x) == Math.ceil(x);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.floor(Math.pow(Math.abs((double)a), 1.0/3.0)) == Math.pow(Math.abs((double)a), 1.0/3.0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long x = 0;\n        while (x * x * x < a)\n            x++;\n        return x * x * x == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(a, 1.0 / 3.0) % 1.0 == 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double sqrt = Math.sqrt(a);\n        if (Math.round(sqrt) == sqrt) {\n            if (Math.pow(Math.round(sqrt), 3) == a) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double cubeRoot = Math.cbrt(a);\n        long r = (long) cubeRoot;\n        return r * r * r == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        double root = Math.pow(a, 1.0 / 3.0);\n        return (Math.abs(root - Math.round(root)) < 0.00000001);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int i = 0;\n        while (i * i * i <= a)\n            i++;\n        return i * i * i == a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long r = (long)Math.pow(Math.abs(a), 1.0 / 3);\n        return a == (long)Math.pow(r, 3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        int n = (int) Math.round(Math.pow(a, 1.0 / 3));\n        return a == Math.pow(n, 3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        long num = a;\n        long pow = 1;\n        while (num >= pow) pow *= pow;\n        return a == pow;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return (Math.cbrt(a) == (long) Math.cbrt(a));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n        return Math.pow(Math.round(Math.pow(a, 1.0 / 3)), 3) == a;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = message.toLowerCase();\n        for (int i = 0; i < result.length(); i++) {\n            char ch = result.charAt(i);\n            int vowel = 0;\n            if (ch == 'a') {\n                vowel = 2;\n            } else if (ch == 'e') {\n                vowel = 4;\n            } else if (ch == 'i') {\n                vowel = 6;\n            } else if (ch == 'o') {\n                vowel = 8;\n            } else if (ch == 'u') {\n                vowel = 10;\n            }\n            if (vowel != 0) {\n                result = result.substring(0, i) + (char)(vowel + 64) + result.substring(i + 1);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().mapToObj(ch -> {\n            char c = (char)ch;\n            if(Character.isLetter(c)) {\n                if(Character.isUpperCase(c)) {\n                    c = (char)(c+2);\n                    if(c > 'Z') c = (char)(c - 26);\n                }\n                if(Character.isLowerCase(c)) {\n                    c = (char)(c+2);\n                    if(c > 'z') c = (char)(c - 26);\n                }\n                if(\"aeiouAEIOU\".indexOf(c) != -1) {\n                    c = \"AEIOUaeiou\".charAt(Character.isUpperCase(c)? \"aeiouAEIOU\".indexOf(c): \"aeiou\".indexOf(c));\n                }\n                return Character.isUpperCase(ch) ? Character.toUpperCase(c): Character.toLowerCase(c);\n            }\n            return Character.toString(c);\n        }).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder builder = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char next = (char)((c + 2 - 'a') % 26 + 'a');\n                builder.append(Character.isUpperCase(c) ? Character.toUpperCase(next) : next);\n            } else {\n                builder.append(c);\n            }\n        }\n        return builder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    String newMessage = \"\";\n    char[] letters = message.toCharArray();\n    char[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n    for(int i = 0; i < letters.length; i++) {\n      if(letters[i] >= 'A' && letters[i] <= 'Z') {\n        letters[i] += 32;\n      }\n      if(letters[i] == 'a' || letters[i] == 'e' || letters[i] == 'i' || letters[i] == 'o' || letters[i] == 'u') {\n        letters[i] = alphabet[(alphabet.length + 2 + (alphabet.length - (letters[i] - 'a'))) % alphabet.length];\n      }\n      newMessage += letters[i];", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    char[] messageCharArray = message.toCharArray();\n    char[] result = new char[messageCharArray.length];\n\n    for(int i=0; i<messageCharArray.length; i++){\n        result[i] = messageCharArray[i];\n        if(messageCharArray[i] == 'a'){\n            result[i] = 'c';\n        }\n        if(messageCharArray[i] == 'e'){\n            result[i] = 'g';\n        }\n        if(messageCharArray[i] == 'i'){\n            result[i] = 'k';\n        }\n        if(messageCharArray[i] == 'o'){\n            result[i] = 'q';\n        }\n        if(messageCharArray[i] == 'u'){\n            result[i] = 'w';\n        }\n        if(messageCharArray[i] == 'A'){\n            result[i] = 'C';\n        }\n        if(messageCharArray[i] == 'E'){\n            result[i] = 'G';\n        }\n        if(messageCharArray[i] == 'I'){\n            result[i] = 'K';\n        }\n        if(messageCharArray[i] == 'O'){\n            result[i] = 'Q';\n        }\n        if(messageCharArray[i] == 'U'){\n            result[i] = 'W';\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        for(int i = 0; i < message.length(); i++){\n            if(message.charAt(i) >= 'a' && message.charAt(i) <= 'z'){\n                char temp = (char)(message.charAt(i) - 'a' + 2);\n                if(temp > 'z'){\n                    temp = (char)(temp - 26);\n                }\n                result += (char)(temp + 'a');\n            }\n            else if(message.charAt(i) >= 'A' && message.charAt(i) <= 'Z'){\n                char temp = (char)(message.charAt(i) - 'A' + 2);\n                if(temp > 'Z'){\n                    temp = (char)(temp - 26);\n                }\n                result += (char)(temp + 'A');\n            }\n            else{\n                result += message.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        // Write your code here\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c)) {\n                result += Character.toUpperCase(c);\n            }\n        }\n        char[] arr = result.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            char c = arr[i];\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                c = (char) (c + 2);\n                arr[i] = c;\n            }\n        }\n        return new String(arr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    String newMessage = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char currentChar = message.charAt(i);\n        char newChar = 0;\n        // In the case that the character is a vowel, replace it with the character 2 places ahead in the alphabet.\n        if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n            if (currentChar == 'a') newChar = 'c';\n            else if (currentChar == 'e') newChar = 'g';\n            else if (currentChar == 'i') newChar = 'k';\n            else if (currentChar == 'o') newChar = 's';\n            else if (currentChar == 'u') newChar = 'w';\n        }\n        // Otherwise, replace the character with the opposite case.\n        else {\n            if (Character.isUpperCase(currentChar)) newChar = Character.toLowerCase(currentChar);\n            else if (Character.isLowerCase(currentChar)) newChar = Character.toUpperCase(currentChar);\n        }\n        newMessage += Character.toString(newChar);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder s = new StringBuilder();\n        for(char c : message.toCharArray()) {\n            if(Character.isLetter(c)) {\n                c = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n                if(\"aeiou\".contains(String.valueOf(c))) {\n                    c = (char)((c - 'a' + 2) % 26 + 'a');\n                }\n            }\n            s.append(c);\n        }\n        return s.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        // Write your code here\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        String vowels = \"AEIOUaeiou\";\n        for (int i = 0; i < message.length(); i++) {\n            if (vowels.indexOf(message.charAt(i)) >= 0) {\n                result += vowels.charAt(vowels.indexOf(message.charAt(i)) + 2);\n            }\n            else if (Character.isUpperCase(message.charAt(i))) {\n                result += Character.toUpperCase(vowels.charAt(vowels.indexOf(message.charAt(i)) + 2));\n            }\n            else {\n                result += message.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars()\n            .mapToObj(c -> Character.isLetter(c) ? \"\" : (char) c)\n            .collect(Collectors.joining())\n            .chars()\n            .mapToObj(c -> (char) (Character.isUpperCase(c) ? \n                Math.floorMod(c - 'A' + 2, 26) + 'A' : \n                Math.floorMod(c - 'a' + 2, 26) + 'a'))\n            .map(c -> (Character.isLetter(c) ? c : Character.toString((char) c)))\n            .collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        message = message.toLowerCase();\n        StringBuffer sb = new StringBuffer(message);\n        for(int i = 0; i < sb.length(); i++) {\n            char c = sb.charAt(i);\n            if(c == 'a') sb.setCharAt(i, 'C');\n            else if(c == 'e') sb.setCharAt(i, 'G');\n            else if(c == 'i') sb.setCharAt(i, 'K');\n            else if(c == 'o') sb.setCharAt(i, 'O');\n            else if(c == 'u') sb.setCharAt(i, 'S');\n            else if(c == 'c') sb.setCharAt(i, 'E');\n            else if(c == 'g') sb.setCharAt(i, 'I');\n            else if(c == 'k') sb.setCharAt(i, 'M');\n            else if(c == 'o') sb.setCharAt(i, 'U');\n            else if(c == 's') sb.setCharAt(i, 'A');\n        }\n        return sb.toString().toUpperCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        for (char ch : message.toCharArray()) {\n            char newCh = ch;\n            if (Character.isUpperCase(ch)) {\n                newCh = (char)(ch + 2);\n                if (newCh > 'Z')\n                    newCh -= 26;\n            } else if (Character.isLowerCase(ch)) {\n                newCh = (char)(ch + 2);\n                if (newCh > 'z')\n                    newCh -= 26;\n            }\n            if (\"aeiou\".indexOf(ch) != -1 || \"AEIOU\".indexOf(ch) != -1) {\n                newCh = Character.toLowerCase(ch);\n            }\n            result += Character.toString(newCh);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                c ^= 32;\n            }\n            switch (c) {\n            case 'A':\n            case 'a':\n                c = 'C';\n                break;\n            case 'E':\n            case 'e':\n                c = 'G';\n                break;\n            case 'I':\n            case 'i':\n                c = 'K';\n                break;\n            case 'O':\n            case 'o':\n                c = 'S';\n                break;\n            case 'U':\n            case 'u':\n                c = 'X';\n                break;\n            }\n            result += c;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiou\";\n        String encoded = \"\";\n        for (char c : message.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                char nextVowel = vowels.charAt((vowels.indexOf(c) + 2) % vowels.length());\n                encoded += nextVowel;\n            } else {\n                encoded += Character.toUpperCase(c);\n            }\n        }\n        return encoded;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String encode = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLowerCase(c)) {\n                c = (char)(c + 2);\n            }\n            if (Character.isUpperCase(c)) {\n                c = (char)(c - 2);\n            }\n            if (c == 'a') {\n                c = 'c';\n            }\n            if (c == 'e') {\n                c = 'g';\n            }\n            if (c == 'i') {\n                c = 'i';\n            }\n            if (c == 'o') {\n                c = 'k';\n            }\n            if (c == 'u') {\n                c = 'm';\n            }\n            encode = encode + c;\n        }\n        return encode;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        char[] text = message.toCharArray();\n        for(int i = 0; i < text.length; i++) {\n            char c = text[i];\n            if(vowels.indexOf(c) >= 0) {\n                c += 2;\n                if(c > 'u') {\n                    c -= 26;\n                }\n                text[i] = c;\n            }\n        }\n        for(int i = 0; i < text.length; i++) {\n            char c = text[i];\n            if(Character.isLetter(c)) {\n                text[i] = Character.toUpperCase(text[i]);\n            }\n        }\n        return new String(text);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            if (message.charAt(i) == 'a' || message.charAt(i) == 'e' || message.charAt(i) == 'i' || message.charAt(i) == 'o' || message.charAt(i) == 'u') {\n                if (message.charAt(i) == 'a') {\n                    result += \"C\";\n                } else if (message.charAt(i) == 'e') {\n                    result += \"H\";\n                } else if (message.charAt(i) == 'i') {\n                    result += \"M\";\n                } else if (message.charAt(i) == 'o') {\n                    result += \"S\";\n                } else if (message.charAt(i) == 'u') {\n                    result += \"T\";\n                }\n            } else if (message.charAt(i) == 'A') {\n                result += \"g\";\n            } else if (message.charAt(i) == 'E') {\n                result += \"K\";\n            } else if (message.charAt(i) == 'I') {\n                result += \"O\";\n            } else if (message.charAt(i) == 'O') {\n                result += \"U\";\n            } else if (message.charAt(i) == 'U') {\n                result += \"A\";\n            } else {\n                result += message.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiou\";\n        StringBuilder encoded = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (vowels.contains(String.valueOf(c).toLowerCase())) {\n                int index = vowels.indexOf(c);\n                c = vowels.charAt((index + 2) % vowels.length());\n            }\n            encoded.append(Character.isUpperCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n        }\n        return encoded.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().mapToObj(\n            c -> (char)(\n                ((c >= 65 && c <= 90) ? 65 : 97) + (c + 2) % 26\n            )\n        ).collect(\n            StringBuilder::new,\n            StringBuilder::append,\n            StringBuilder::append\n        ).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"AEIOUaeiou\";\n        String encrypted = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char letter = message.charAt(i);\n            if (vowels.contains(letter + \"\")) {\n                int index = vowels.indexOf(letter) + 2;\n                if (index > 12) index -= 12;\n                encrypted += vowels.charAt(index);\n            } else {\n                if (Character.isUpperCase(letter)) {\n                    encrypted += Character.toLowerCase(letter);\n                } else if (Character.isLowerCase(letter)) {\n                    encrypted += Character.toUpperCase(letter);\n                } else {\n                    encrypted += letter;\n                }\n            }\n        }\n        return encrypted;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder encoded = new StringBuilder();\n        for(char c : message.toCharArray()){\n            if(Character.isUpperCase(c))\n                encoded.append((char)('A' + ((c - 'A') + 2) % 26));\n            else if(Character.isLowerCase(c))\n                encoded.append((char)('a' + ((c - 'a') + 2) % 26));\n            else\n                encoded.append(c);\n        }\n        return encoded.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        // Create map of vowels and letters 2 places ahead of them \n        // for lookup later \n        HashMap<Character, Character> vowelMap = new HashMap<>();\n        vowelMap.put('a', 'c');\n        vowelMap.put('e', 'g');\n        vowelMap.put('i', 'i');\n        vowelMap.put('o', 'k');\n        vowelMap.put('u', 'm');\n\n        // Loop through message and swap case of all characters \n        // using StringBuilder \n        StringBuilder encoded = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                encoded.append(Character.toUpperCase(c));\n            } else {\n                encoded.append(Character.toLowerCase(c));\n            }\n        }\n\n        // Loop through message again and swap out all vowels in\n        // the map created earlier \n        int currIndex = 0;\n        while (currIndex < encoded.length()) {\n            if (vowelMap.containsKey(encoded.charAt(currIndex))) {\n                encoded.setCharAt(currIndex, vowelMap.get(encoded.charAt(currIndex)));\n            }\n            currIndex++;\n        }\n\n        return encoded.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] a = message.toCharArray();\n        String temp = \"\";\n        for(int i = 0; i < a.length; i++) {\n            if(Character.isLetter(a[i])) {\n                if(Character.isUpperCase(a[i])) {\n                    temp += (char)(((int)a[i] + 2) % 26 + 'A');\n                } else {\n                    temp += (char)(((int)a[i] + 2) % 26 + 'a');\n                }\n            } else {\n                temp += a[i];\n            }\n        }\n        return temp;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        String ret = \"\";\n        for(int i = 0; i < message.length(); i++){\n            char c = message.charAt(i);\n            if(c == ' ')\n                continue;\n            if(vowels.contains(String.valueOf(c))){\n                int index = vowels.indexOf(c);\n                char retc = vowels.charAt(index + 2);\n                if(retc == 'u')\n                    retc = 'a';\n                ret += retc;\n            }else if(Character.isUpperCase(c)){\n                ret += Character.toLowerCase(c);\n            }else{\n                ret += Character.toUpperCase(c);\n            }\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sb.append(getSecondAheadUpperCase(c));\n            } else {\n                sb.append(getSecondAheadLowerCase(c));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder result = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char newChar = 'a';\n            switch (c) {\n                case 'a':\n                    newChar = 'c';\n                    break;\n                case 'e':\n                    newChar = 'g';\n                    break;\n                case 'i':\n                    newChar = 'i';\n                    break;\n                case 'o':\n                    newChar = 'k';\n                    break;\n                case 'u':\n                    newChar = 'm';\n                    break;\n                case 'A':\n                    newChar = 'C';\n                    break;\n                case 'E':\n                    newChar = 'G';\n                    break;\n                case 'I':\n                    newChar = 'I';\n                    break;\n                case 'O':\n                    newChar = 'K';\n                    break;\n                case 'U':\n                    newChar = 'M';\n                    break;\n                default:\n                    newChar = Character.toUpperCase(c);\n            }\n            result.append(newChar);\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String[] vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"};\n        StringBuilder encoded = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    c = Character.toUpperCase(c);\n                } else {\n                    c = Character.toLowerCase(c);\n                }\n                if (Arrays.asList(vowels).contains(String.valueOf(c))) {\n                    int index = (vowels.length + vowels.length - 1) - vowels.length + Arrays.asList(vowels).indexOf(String.valueOf(c));\n                    c = vowels[index];\n                }\n            }\n            encoded.append(c);\n        }\n        return encoded.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        int a = 65, z = 90;\n        int e = 101, o = 111;\n        int u = 117, i = 105;\n        StringBuilder encoded = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char out = c;\n            if (c >= a && c <= z) {\n                out = (char)(z - (c - a));\n            }\n            else if (c >= e && c <= o) {\n                out = (char)(e - 2);\n            }\n            else if (c >= u && c <= i) {\n                out = (char)(u + 2);\n            }\n            encoded.append(out);\n        }\n        return encoded.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                result += swapCase(c);\n            } else {\n                result += c;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] arr = message.toCharArray();\n        StringBuilder strBuilder = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            char ch = arr[i];\n            if (Character.isUpperCase(ch)) {\n                strBuilder.append(getLowerCaseVowel(ch));\n            } else {\n                strBuilder.append(getUpperCaseVowel(ch));\n            }\n        }\n        return strBuilder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiou\";\n        String upperVowels = \"AEIOU\";\n        StringBuilder encodedMessage = new StringBuilder();\n        char[] charArray = message.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            char currentChar = charArray[i];\n            char encodedChar;\n            if (Character.isUpperCase(currentChar)) {\n                encodedChar = charArray[i] - 2;\n            } else {\n                encodedChar = charArray[i] + 2;\n            }\n            if (vowels.indexOf(Character.toLowerCase(encodedChar)) != -1) {\n                encodedChar = upperVowels.charAt(vowels.indexOf(Character.toLowerCase(encodedChar)));\n            }\n            if (Character.isUpperCase(currentChar) && vowels.indexOf(Character.toLowerCase(currentChar)) != -1) {\n                encodedChar = upperVowels.charAt(vowels.indexOf(Character.toLowerCase(currentChar)));\n            }\n            encodedMessage.append(encodedChar);\n        }\n        return encodedMessage.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        for(int i = 0; i < message.length(); i++){\n            char cur = message.charAt(i);\n            if(Character.isLetter(cur)){\n                if(Character.isUpperCase(cur))\n                    cur = (char)('A' + ((cur - 'A' + 2) % 26));\n                else\n                    cur = (char)('a' + ((cur - 'a' + 2) % 26));\n            }\n            result += cur;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] arr = message.toCharArray();\n        for(int i = 0; i < arr.length; i++){\n            if(Character.isAlphabetic(arr[i])){\n                if(Character.isUpperCase(arr[i])){\n                    arr[i] = (char)(((int)arr[i] - 65 + 2) % 26 + 65);\n                } else {\n                    arr[i] = (char)(((int)arr[i] - 97 + 2) % 26 + 97);\n                }\n            }\n        }\n        return new String(arr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] arr = message.toCharArray();\n        for(int i = 0; i < arr.length; i++){\n            char ch = arr[i];\n            int ord = (int) ch;\n            if(ord >= 97 && ord <= 122) {\n                ch = (char) (ord - 32);\n                arr[i] = ch;\n            }\n            if(ord >= 65 && ord <= 90) {\n                ch = (char) (ord + 32);\n                arr[i] = ch;\n            }\n            if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U'){\n                int newOrd = ord;\n                if(ord >= 97) {\n                    newOrd = ord + 2;\n                    if(newOrd > 122) {\n                        newOrd -= 26;\n                    }\n                }\n                if(ord >= 65) {\n                    newOrd = ord + 2;\n                    if(newOrd > 90) {\n                        newOrd -= 26;\n                    }\n                }\n                arr[i] = (char) newOrd;\n            }\n        }\n        return new String(arr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] alpha = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n        String vowels = \"aeiou\";\n        char[] vow = vowels.toCharArray();\n        char[] msg = message.toLowerCase().toCharArray();\n        String encoded = \"\";\n        for (char i: msg) {\n            if (vow.toString().contains(String.valueOf(i))){\n                int idx = (Arrays.binarySearch(vow, i)) + 2;\n                if (idx > 24) idx = idx - 25;\n                encoded += alpha[idx];\n            }\n            else if (Character.isUpperCase(i)) encoded += Character.toUpperCase(i);\n            else encoded += i;\n        }\n        return encoded;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            int charIndex = (int)messageArray[i];\n            if (charIndex >= 65 && charIndex <= 90) {\n                charIndex = 90 - charIndex + 65;\n                messageArray[i] = (char)charIndex;\n            } else if (charIndex >= 97 && charIndex <= 122) {\n                charIndex = 122 - charIndex + 97;\n                messageArray[i] = (char)charIndex;\n            }\n\n            charIndex = (int)messageArray[i];\n            if (charIndex == 65 || charIndex == 69 || charIndex == 73 || charIndex == 79 || charIndex == 85) {\n                charIndex += 2;\n                messageArray[i] = (char)charIndex;\n            }\n\n            if (charIndex == 101 || charIndex == 105 || charIndex == 111 || charIndex == 117 || charIndex == 123) {\n                charIndex -= 2;\n                messageArray[i] = (char)charIndex;\n            }\n        }\n        String returnMessage = String.valueOf(messageArray);\n        return returnMessage;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        message = message.toLowerCase();\n        String alph = \"abcdefghijklmnopqrstuvwxyz\";\n        String alphCased = alph.toUpperCase();\n        for(int i = 0; i < message.length(); i++) {\n            for(int j = 0; j < alph.length(); j++) {\n                if(alph.charAt(j) == message.charAt(i)) {\n                    message = message.substring(0, i) + alphCased.charAt((j + 2) % alphCased.length()) + message.substring(i + 1);\n                }\n            }\n        }\n        return message;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        message = message.toLowerCase();\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char n = (char) (c + 2);\n            if (n > 'z')\n                n = (char) (c - 26 + 2);\n            if (n != 'a' && n != 'e' && n != 'i' && n != 'o' && n != 'u') {\n                sb.append(n);\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString().toUpperCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().mapToObj(c -> {\n            if (Character.isLetter(c)) {\n                c = 'A' + (c - 'a') * (Character.isLowerCase(c) ? 2 : 1);\n                if (c > 'Z') {\n                    c = c - 26;\n                }\n                if (Character.isLowerCase(c)) {\n                    c = c + 2;\n                }\n            }\n            return (char)c;\n        }).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String newString = \"\";\n        int i = 0;\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                newString += Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c);\n            } else {\n                newString += c;\n            }\n        }\n        for (int j = 0; j < newString.length(); j++) {\n            char temp = newString.charAt(j);\n            if (temp == 'a' || temp == 'e' || temp == 'i' || temp == 'o' || temp == 'u') {\n                newString = newString.substring(0, j) + (char)(temp + 2) + newString.substring(j + 1);\n            }\n        }\n        return newString;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        // Complete the function\n        return message.chars().mapToObj(i -> (char)i).map(c -> {\n            c = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n            if (Character.isLetter(c)) {\n                int index = \"aeiou\".indexOf(c);\n                if (index != -1)\n                    c = (char) ('a' + (index + 2) % 5);\n            }\n            return c;\n        }).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        final List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\");\n        final List<String> vowelsReplacement = Arrays.asList(\"C\", \"G\", \"K\", \"M\", \"O\", \"S\", \"C\", \"G\", \"K\", \"M\", \"O\", \"S\", \"C\");\n        final Map<String, String> mapping = new HashMap<>();\n        for (int i = 0; i < vowels.size(); ++i) {\n            mapping.put(vowels.get(i), vowelsReplacement.get(i));\n        }\n        return message.chars().mapToObj(c -> {\n            final String ch = String.valueOf((char) c);\n            if (mapping.containsKey(ch)) {\n                return mapping.get(ch);\n            }\n            final boolean isUpper = ch.equals(ch.toUpperCase());\n            return isUpper ? ch.toLowerCase() : ch.toUpperCase();\n        }).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        //Fill this in.\n        String vowels = \"aeiou\";\n        String upperCaseVowels = \"AEIOU\";\n        String encodedMessage = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char currentChar = message.charAt(i);\n            if (Character.isUpperCase(currentChar)) {\n                for (int j = 0; j < vowels.length(); j++) {\n                    if (currentChar == vowels.charAt(j)) {\n                        encodedMessage += upperCaseVowels.charAt((j + 2) % 5);\n                    } else {\n                        encodedMessage += (char) (currentChar - 32);\n                    }\n                }\n            } else {\n                for (int j = 0; j < vowels.length(); j++) {\n                    if (currentChar == vowels.charAt(j)) {\n                        encodedMessage += vowels.charAt((j + 2) % 5);\n                    } else {\n                        encodedMessage += currentChar;\n                    }\n                }\n            }\n        }\n        return encodedMessage;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        message = message.toLowerCase();\n        for (char c: message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                int pos = (\"abcdefghijklmnopqrstuvwxyz\".indexOf(c) + 2) % 26;\n                result += \"abcdefghijklmnopqrstuvwxyz\".charAt(pos);\n            } else {\n                result += c;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] arr = message.toCharArray();\n        int[] vowels = {65, 97};\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 'a' || arr[i] == 'A' || arr[i] == 'e' || arr[i] == 'E' || arr[i] == 'i' || arr[i] == 'I' || arr[i] == 'o' || arr[i] == 'O' || arr[i] == 'u' || arr[i] == 'U') {\n                arr[i] = (char) (arr[i] + 2);\n                if(arr[i] == 123 || arr[i] == 93) {\n                    arr[i] = (char) (arr[i] - 26);\n                }\n            }\n            arr[i] = (char) ((int) arr[i] + (int) arr[i] % 2 * (-1));\n        }\n        return String.valueOf(arr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.toLowerCase().chars()\n                     .mapToObj(c -> (char)c)\n                     .map(c -> \"aeiou\".indexOf(c) != -1 ? (char)((c - 'a' + 2) % 5 + 'a') : c)\n                     .collect(StringBuilder::new, (sb, c) -> sb.append(Character.isUpperCase(c) ? Character.toUpperCase(c) : c), StringBuilder::toString);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String s = \"\";\n        for(int i = 0; i < message.length(); i++) {\n            s += Character.isUpperCase(message.charAt(i)) ? \n                (char)(message.charAt(i) - 64 + 2) : \n                (char)(message.charAt(i) + 64 + 2);\n        }\n        return s;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] toReturn = new char[message.length()];\n        for (int i = 0; i < message.length(); i++) {\n            char current = message.charAt(i);\n            if (Character.isLowerCase(current)) {\n                current = (char)(current + 'a' - 'A');\n            }\n            int pos = (\"aeiou\".indexOf(current) + 2) % 5;\n            char next = \"aeiou\".charAt(pos);\n            if (next == current) {\n                next = (char)(next + 1);\n            }\n            toReturn[i] = next;\n        }\n        return new String(toReturn);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String ret = \"\";\n        String vowels = \"aeiou\";\n        for (int i = 0; i < message.length(); i++) {\n            String c = \"\" + message.charAt(i);\n            if (Character.isUpperCase(c.charAt(0))) {\n                if (vowels.indexOf(c.toLowerCase()) != -1) {\n                    c = \"\" + ((vowels.indexOf(c.toLowerCase()) + 2) % vowels.length() + 'a');\n                    c = c.toUpperCase();\n                } else {\n                    c = c.toLowerCase();\n                }\n            } else {\n                if (vowels.indexOf(c.toLowerCase()) != -1) {\n                    c = \"\" + ((vowels.indexOf(c.toLowerCase()) + 2) % vowels.length() + 'a');\n                }\n            }\n            ret += c;\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] result = new char[message.length()];\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result[i] = (char) (c + 2);\n            } else if (Character.isUpperCase(c)) {\n                result[i] = (char) (c - 2);\n            } else {\n                result[i] = c;\n            }\n        }\n        return new String(result);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n        char[] array = message.toLowerCase().toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (char c : array) {\n            if (c == ' ') {\n                sb.append(c);\n                continue;\n            }\n            for (int i = 0; i < vowels.length; i++) {\n                if (c == vowels[i]) {\n                    int index = vowels.length + i + 2;\n                    if (index >= 26) index -= 26;\n                    c = (char) (vowels[index]);\n                    break;\n                }\n            }\n            c = Character.toUpperCase(c);\n            sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.replaceAll(\"[aeiou]\", \"X\")\n                      .toUpperCase()\n                      .replaceAll(\"[AEIOU]\", \"aeiou\")\n                      .replaceAll(\"X\", \"aeiou\")\n                      .toLowerCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder encoded = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                char rep = getReplacement(ch);\n                ch = Character.toUpperCase(rep);\n            }\n            else {\n                char rep = getReplacement(ch);\n                ch = rep;\n            }\n            encoded.append(ch);\n        }\n        return encoded.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return new StringBuffer(message).chars().mapToObj(c->(char)(c+2)).map(c->(c>122?96:c)).map(c->(c<97?c:c+2*(c>96&&c<123))).map(c->(char)(c)).filter(c->(c>96&&c<123)?0:c).map(c->(char)((c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='A'||c=='E'||c=='I'||c=='O'||c=='U')?0:c)).map(c->(char)(c==32?c:c+2*(c>96&&c<123))).map(c->(char)(c)).map(c->(char)(c>=97?32:c)).map(c->(char)(c>=65?32:c)).map(c->(char)((c==32||c==48||c==49||c==50||c==51||c==52||c==53||c==54||c==55||c==56||c==57)?c:c+2*(c>96&&c<123))).map(c->(char)(c==32||c==48||c==49||c==50||c==51||c==52||c==53||c==54||c==55||c==56||c==57?c:c+2*(c>96&&c<123))).map(c->(char)(c>=97?32:c)).map(c->(char)(c>=65?32:c)).map(c->(char)(c>=97?32:c)).map(c->(char)(c>=65?32:c)).map(c->(char)((c==32||c==48||c==49||c==50||c==51||c==52||c==53||c==54||c==55||c==56||c==57)?c:c+2*(c>96&&c<123))).map(c->(char)(c==32||c==48||c==49||c==50||c==51||c==52||c==53||c==54||c==55||c==56||c==57?c:c+2*(c>96&&c<123))).map(c->(char)(c>=97?32:c)).map(c->(char)(c>=65?32:c)).map(c->(char)(c>=97?32:c)).map(c->(char)(c>=65?32:c)).map(c->(char)(c>=97?32:c)).map(c->(char)(c>=65?32:c)).map(c->(char)(c>=97?32:c)).map(c->(char)(c>=65?32:c)).map(c->(char)(c>=97?32:c)).map(c->(char)(c>=65?32:c)).map(c->(char)(c>=97?32:c)).map(c->(char)(c>=65?32", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder messageBuilder = new StringBuilder(message);\n        List<Character> vowels = new ArrayList<Character>();\n        for (char c : message.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n                c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                vowels.add(c);\n            }\n        }\n        for (int i = 0; i < vowels.size(); i++) {\n            char vowel = vowels.get(i);\n            if (Character.isUpperCase(vowel)) {\n                messageBuilder.setCharAt(messageBuilder.indexOf(vowel), (char) ('A' + (messageBuilder.indexOf(vowel) + 2) % 26));\n            } else {\n                messageBuilder.setCharAt(messageBuilder.indexOf(vowel), (char) ('a' + (messageBuilder.indexOf(vowel) + 2) % 26));\n            }\n        }\n        messageBuilder.reverse();\n        return messageBuilder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] arr = message.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            int val = (int)arr[i];\n            if (val >= 65 && val <= 90) {\n                val += 32;\n            }\n            else if (val >= 97 && val <= 122) {\n                val -= 32;\n            }\n            arr[i] = (char)val;\n        }\n        for (int i = 0; i < arr.length; i++) {\n            int val = (int)arr[i];\n            if (val == 65 || val == 69 || val == 73 || val == 79 || val == 85 || val == 97 || val == 101 || val == 105 || val == 111 || val == 117) {\n                val += 2;\n                arr[i] = (char)val;\n            }\n        }\n        return new String(arr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        for(int i = 0; i < message.length(); i++){\n            char current = message.charAt(i);\n            if(Character.isUpperCase(current)){\n                int index = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".indexOf(current);\n                index += 2;\n                if(index > 25)\n                    index -= 26;\n                result += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".charAt(index);\n            }\n            else if(Character.isLowerCase(current)){\n                int index = \"abcdefghijklmnopqrstuvwxyz\".indexOf(current);\n                index += 2;\n                if(index > 25)\n                    index -= 26;\n                result += \"abcdefghijklmnopqrstuvwxyz\".charAt(index);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String lowerMessage = message.toLowerCase();\n        StringBuilder builder = new StringBuilder();\n        for(int i = 0; i < lowerMessage.length(); i++){\n            char current = lowerMessage.charAt(i);\n            if(Character.isLetter(current)){\n                if(current == 'a'){\n                    builder.append('c');\n                }\n                else if(current == 'e'){\n                    builder.append('g');\n                }\n                else if(current == 'i'){\n                    builder.append('k');\n                }\n                else if(current == 'o'){\n                    builder.append('n');\n                }\n                else if(current == 'u'){\n                    builder.append('q');\n                }\n                else{\n                    builder.append((char) (current + 2));\n                }\n            }\n            else{\n                builder.append(current);\n            }\n        }\n        return builder.toString().toUpperCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] chs = message.toLowerCase().toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < chs.length; i++) {\n            char ch = chs[i];\n            if (isVowel(ch)) {\n                sb.append(get2Ahead(ch));\n            } else {\n                sb.append(Character.toUpperCase(ch));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isUpperCase(c)) {\n                result += (char)(c + 2);\n            } else if (Character.isLowerCase(c)) {\n                result += (char)(c - 2);\n            } else {\n                result += c;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String upperAlphabet = alphabet.toUpperCase();\n        char[] arr = message.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            int index = -1;\n            if (alphabet.contains(arr[i] + \"\")) {\n                index = alphabet.indexOf(arr[i]);\n                arr[i] = upperAlphabet.charAt(index + 2);\n            }\n            if (upperAlphabet.contains(arr[i] + \"\")) {\n                index = upperAlphabet.indexOf(arr[i]);\n                arr[i] = alphabet.charAt(index + 2);\n            }\n        }\n        return String.valueOf(arr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] chars = message.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                chars[i] = swapCase(chars[i]);\n                if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u' || chars[i] == 'A' || chars[i] == 'E' || chars[i] == 'I' || chars[i] == 'O' || chars[i] == 'U') {\n                    chars[i] = getNextVowel(chars[i]);\n                }\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] ch = message.toCharArray();\n        int len = ch.length;\n        StringBuffer sb = new StringBuffer();\n        for(int i=0; i<len; i++) {\n            if(Character.isLetter(ch[i])) {\n                if(Character.isUpperCase(ch[i])) {\n                    sb.append(Character.toLowerCase(ch[i]));\n                } else {\n                    sb.append(Character.toUpperCase(ch[i]));\n                }\n            } else {\n                sb.append(ch[i]);\n            }\n        }\n        ch = sb.toString().toCharArray();\n        for(int i=0; i<ch.length; i++) {\n            if(Character.isLetter(ch[i])) {\n                if(ch[i] == 'a' || ch[i] == 'e' || ch[i] == 'i' || ch[i] == 'o' || ch[i] == 'u') {\n                    ch[i] += 2;\n                } else {\n                    if(ch[i] == 'A') {\n                        ch[i] = 'C';\n                    } else if(ch[i] == 'E') {\n                        ch[i] = 'G';\n                    } else if(ch[i] == 'I') {\n                        ch[i] = 'K';\n                    } else if(ch[i] == 'O') {\n                        ch[i] = 'S';\n                    } else if(ch[i] == 'U') {\n                        ch[i] = 'X';\n                    } else if(ch[i] == 'C') {\n                        ch[i] = 'E';\n                    } else if(ch[i] == 'G') {\n                        ch[i] = 'I';\n                    } else if(ch[i] == 'K') {\n                        ch[i] = 'O';\n                    } else if(ch[i] == 'S') {\n                        ch[i] = 'U';\n                    } else if(ch[i] == 'X') {\n                        ch[i] = 'A';\n                    }\n                }\n            }\n        }\n        return new String(ch);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        char[] a = \"a e i o u\".toCharArray();\n        char[] b = \"c f h k m n q s t w y\".toCharArray();\n        char[] c = message.toCharArray();\n        int count = 0;\n        for(char x : c){\n            for(int i = 0; i < a.length; i++){\n                if(a[i] == x){\n                    result += b[count];\n                    count += 2;\n                    break;\n                }\n            }\n            if(x < 'a' || x > 'z'){\n                result += x;\n                continue;\n            }\n            if(x >= 'a' && x <= 'z'){\n                count = 0;\n                result += (char)(x - 32);\n            }\n            count = 0;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        message = new StringBuffer(message.replaceAll(\"[aeiouAEIOU]\", \" \")).toString();\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    encoded += Character.toLowerCase(c);\n                } else {\n                    encoded += Character.toUpperCase(c);\n                }\n            } else {\n                encoded += c;\n            }\n        }\n        return encoded;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String upper = \"AEIOU\";\n        String lower = \"aeiou\";\n        String out = \"\";\n        for (int i = 0; i < message.length(); i++){\n            char c = message.charAt(i);\n            if (upper.contains(c + \"\")){\n                out += (char) (c + 2);\n            } else if (lower.contains(c + \"\")){\n                out += (char) (c + 2 - 97);\n            } else {\n                out += c;\n            }\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String output = \"\";\n        for(char c : message.toCharArray()) {\n            if(Character.isLetter(c)) {\n                c = c == 'a' ? 'c' :\n                    c == 'e' ? 'g' :\n                    c == 'i' ? 'k' :\n                    c == 'o' ? 'n' :\n                    c == 'u' ? 'q' :\n                    c == 'A' ? 'C' :\n                    c == 'E' ? 'G' :\n                    c == 'I' ? 'K' :\n                    c == 'O' ? 'N' :\n                    c == 'U' ? 'Q' : c;\n            }\n            c = Character.toLowerCase(c);\n            output += c;\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] c = message.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            c[i] = (char)(c[i] + 2);\n            if (c[i] > 'z') {\n                c[i] = (char)(c[i] - 26);\n            }\n            if (c[i] == 'a' || c[i] == 'e' || c[i] == 'i' || c[i] == 'o' || c[i] == 'u') {\n                c[i] = (char)(c[i] + 2);\n                if (c[i] > 'z') {\n                    c[i] = (char)(c[i] - 26);\n                }\n            }\n            if (c[i] >= 'A' && c[i] <= 'Z') {\n                c[i] = (char)(c[i] - 2);\n                if (c[i] < 'A') {\n                    c[i] = (char)(c[i] + 26);\n                }\n            }\n            if (c[i] == 'A' || c[i] == 'E' || c[i] == 'I' || c[i] == 'O' || c[i] == 'U') {\n                c[i] = (char)(c[i] - 2);\n                if (c[i] < 'A') {\n                    c[i] = (char)(c[i] + 26);\n                }\n            }\n        }\n        return new String(c);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    return \"\";\n  }\n}\n", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String res = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n            if (Character.isLetter(ch)) {\n                if (Character.isUpperCase(ch)) {\n                    ch = (char) (ch + 2);\n                    ch = Character.toLowerCase(ch);\n                } else {\n                    ch = (char) (ch - 2);\n                    ch = Character.toUpperCase(ch);\n                }\n            }\n            if (ch == 'a') {\n                ch = 'c';\n            } else if (ch == 'e') {\n                ch = 'g';\n            } else if (ch == 'i') {\n                ch = 'i';\n            } else if (ch == 'o') {\n                ch = 'k';\n            } else if (ch == 'u') {\n                ch = 'm';\n            }\n            res += ch;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiou\";\n        String ret = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (vowels.indexOf(c) != -1) {\n                c = (char) (c + 2);\n                if (c > 'u') c -= 26;\n            }\n            ret += Character.isUpperCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c);\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        // Write your code here\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String output = \"\";\n        String alphabet = \"a\u00e4bcdefghijklmno\u00f6pqrstuvwxyz\";\n        for (char c : message.toLowerCase().toCharArray()) {\n            output += alphabet.substring(alphabet.indexOf(c) + 2, alphabet.indexOf(c) + 3);\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder s = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n            if (Character.isLetter(ch)) {\n                if (Character.isUpperCase(ch)) {\n                    ch = (char)(ch + 2);\n                    if (ch > 'Z') {\n                        ch = (char)(ch - 26);\n                    }\n                    s.append(Character.toUpperCase(ch));\n                } else {\n                    ch = (char)(ch + 2);\n                    if (ch > 'z') {\n                        ch = (char)(ch - 26);\n                    }\n                    s.append(Character.toLowerCase(ch));\n                }\n            } else {\n                s.append(ch);\n            }\n        }\n        return s.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder(message);\n        char[] vowels = {'A', 'E', 'I', 'O', 'U'};\n        for(int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if(Character.isLetter(c)) {\n                if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    for(int j = 0; j < vowels.length; j++) {\n                        if(c == vowels[j]) {\n                            c = (char)(vowels[j] + 2);\n                            encodedMessage.setCharAt(i, c);\n                        }\n                    }\n                }\n            }\n        }\n        return encodedMessage.toString().toUpperCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().mapToObj(x -> {\n            char c = (char)x;\n            return Character.isLetter(c) ? c + 2 < 'z' ? \n                \"aeiou\".indexOf(c) > -1 ? \n                    \"AEIOU\".charAt((\"aeiou\".indexOf(c) + 2) % 5) : \n                    c : c + 2 > 'z' ? \n                    'a' + (c + 2 - 'z') : c \n                : c;\n        }).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiou\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            if (Character.isLetter(message.charAt(i))) {\n                if (vowels.contains(message.substring(i, i + 1))) {\n                    if (message.substring(i, i + 1).toLowerCase().equals(message.substring(i, i + 1))) {\n                        sb.append(Character.toLowerCase(message.charAt(i) + 2));\n                    } else {\n                        sb.append(Character.toUpperCase(message.charAt(i) + 2));\n                    }\n                } else {\n                    if (message.substring(i, i + 1).toLowerCase().equals(message.substring(i, i + 1))) {\n                        sb.append(Character.toLowerCase(message.charAt(i)));\n                    } else {\n                        sb.append(Character.toUpperCase(message.charAt(i)));\n                    }\n                }\n            } else {\n                sb.append(message.substring(i, i + 1));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] newChar = new char[message.length()];\n        for(int i = 0; i < message.length(); i++) {\n            if(message.charAt(i) == 'A' || message.charAt(i) == 'E' || message.charAt(i) == 'I' || message.charAt(i) == 'O' || message.charAt(i) == 'U' || message.charAt(i) == 'a' || message.charAt(i) == 'e' || message.charAt(i) == 'i' || message.charAt(i) == 'o' || message.charAt(i) == 'u') {\n                char vowel;\n                vowel = Character.toUpperCase(message.charAt(i));\n                switch(vowel) {\n                    case 'A':\n                        newChar[i] = 'C';\n                        break;\n                    case 'E':\n                        newChar[i] = 'G';\n                        break;\n                    case 'I':\n                        newChar[i] = 'K';\n                        break;\n                    case 'O':\n                        newChar[i] = 'S';\n                        break;\n                    case 'U':\n                        newChar[i] = 'W';\n                        break;\n                    default:\n                        break;\n                }\n            }\n            else if (Character.isUpperCase(message.charAt(i))) {\n                newChar[i] = Character.toLowerCase(message.charAt(i));\n            }\n            else {\n                newChar[i] = Character.toUpperCase(message.charAt(i));\n            }\n        }\n        String newMessage = String.valueOf(newChar);\n        return newMessage;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiou\";\n        char[] messageArray = message.toLowerCase().toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (vowels.indexOf(currentChar) != -1) {\n                messageArray[i] = (char) (messageArray[i] + 2);\n            } else {\n                messageArray[i] = Character.toUpperCase(messageArray[i]);\n            }\n        }\n        return new String(messageArray);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] array = message.toCharArray();\n        int i = 0;\n        while(i < array.length) {\n            if(Character.isLetter(array[i])) {\n                if(Character.isUpperCase(array[i])) {\n                    array[i] = Character.toLowerCase(array[i]);\n                    array[i] = (char)((array[i] + 2) % 26 + 65);\n                } else {\n                    array[i] = Character.toUpperCase(array[i]);\n                    array[i] = (char)((array[i] + 2) % 26 + 97);\n                }\n            }\n            i++;\n        }\n        return String.valueOf(array);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String output = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char currentChar = message.charAt(i);\n            int index = (int)currentChar;\n            if (Character.isUpperCase(currentChar)) {\n                index += 32;\n                if (index == 91) {\n                    index = 65;\n                }\n                if (index > 90) {\n                    index -= 90;\n                }\n                if (isVowel(index)) {\n                    index += 2;\n                    if (index > 122) {\n                        index -= 26;\n                    }\n                }\n                index -= 32;\n            } else if (Character.isLowerCase(currentChar)) {\n                if (isVowel(index)) {\n                    index += 2;\n                    if (index > 122) {\n                        index -= 26;\n                    }\n                }\n            }\n            output += (char)index;\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        String vowels = \"AEIOU\";\n        for (int i = 0; i < message.length(); i++) {\n            if (vowels.indexOf(Character.toUpperCase(message.charAt(i))) != -1) {\n                result += (char)(message.charAt(i) + 2);\n            }\n            else if (Character.isLowerCase(message.charAt(i))) {\n                result += Character.toUpperCase(message.charAt(i));\n            }\n            else if (Character.isUpperCase(message.charAt(i))) {\n                result += Character.toLowerCase(message.charAt(i));\n            }\n            else {\n                result += message.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        // return the encoded message\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c: message.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                sb.append(vowels.charAt((vowels.indexOf(c) + 2) % vowels.length()));\n            } else if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        message = message.toLowerCase();\n        String vowels = \"aeiou\";\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            if (vowels.indexOf(message.charAt(i)) != -1) {\n                encoded += String.valueOf(vowels.charAt((vowels.indexOf(message.charAt(i)) + 2) % 5));\n            }\n            else {\n                encoded += String.valueOf(Character.toUpperCase(message.charAt(i)));\n            }\n        }\n        return encoded;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] arr = message.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] >= 'A' && arr[i] <= 'Z') {\n                arr[i] = (char) (arr[i] - 2);\n            } else if (arr[i] >= 'a' && arr[i] <= 'z') {\n                arr[i] = (char) (arr[i] + 2);\n            } else if (arr[i] == 'e' || arr[i] == 'E' || arr[i] == 'a' || arr[i] == 'A' || arr[i] == 'i' || arr[i] == 'I' || arr[i] == 'o' || arr[i] == 'O' || arr[i] == 'u' || arr[i] == 'U') {\n                arr[i] = (char) (arr[i] + 2);\n            }\n        }\n        return new String(arr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String finalResult = \"\";\n        for(int i = 0; i < message.length(); i++){\n            char letter = message.charAt(i);\n            if(Character.isLetter(letter)){\n                if(Character.isUpperCase(letter)){\n                    finalResult += Character.toLowerCase(letter) + 2;\n                } else {\n                    finalResult += Character.toUpperCase(letter) + 2;\n                }\n            } else {\n                finalResult += letter;\n            }\n        }\n        return finalResult;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        // Write your code here\n        StringBuffer encoded = new StringBuffer();\n        for(int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n            if(Character.isLetter(ch)) {\n                encoded.append(swapCase(ch));\n            } else {\n                encoded.append(ch);\n            }\n        }\n        return encoded.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        // Your code here\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        StringBuilder str = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            if (Character.isLetter(message.charAt(i))) {\n                str.append(Character.toLowerCase(message.charAt(i)));\n            }\n            else {\n                str.append(message.charAt(i));\n            }\n        }\n        char[] temp = str.toString().toCharArray();\n        for (int i = 0; i < temp.length; i++) {\n            for (int j = 0; j < vowels.length; j++) {\n                if (vowels[j].equals(Character.toLowerCase(temp[i]))) {\n                    temp[i] = (char)(vowels[j].charAt(0) + 2);\n                    break;\n                }\n            }\n        }\n        return str.toString().toUpperCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        // 'a' is the first index and 'z' is the last\n        int a = 'a';\n        int z = 'z';\n        for(int i = 0; i < messageArray.length; i++) {\n            char c = messageArray[i];\n            // If the letter is a vowel swap its case\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                c = Character.toUpperCase(c);\n            }\n            // otherwise use the offset and add it to the lowercase letter\n            else {\n                c = (char) (a + (c - a + 2) % (z - a + 1));\n            }\n            messageArray[i] = c;\n        }\n        return new String(messageArray);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        int[] vowels = new int[] { 97, 101, 105, 111, 117 };\n        int[] vowels2 = new int[] { 115, 121, 99, 114, 104 };\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            int j = (int) message.charAt(i);\n            if (vowels.length > j && j >= 97 && j <= 122) {\n                sb.append((char) (vowels2[j - 97]));\n            } else {\n                if (j >= 65 && j <= 90) {\n                    sb.append((char) (vowels[j - 65]));\n                } else {\n                    sb.append((char) j);\n                }\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] messageCharArray = message.toCharArray();\n        char[] encodedMessageCharArray = new char[message.length()];\n        for (int i = 0; i < message.length(); i++) {\n            if (Character.isLowerCase(messageCharArray[i])) {\n                encodedMessageCharArray[i] = (char)(messageCharArray[i] - 32);\n            }\n            else {\n                encodedMessageCharArray[i] = messageCharArray[i];\n            }\n        }\n        for (int i = 0; i < message.length(); i++) {\n            if (Character.isLetter(encodedMessageCharArray[i]) && (\"aeiou\".indexOf(encodedMessageCharArray[i]) != -1)) {\n                encodedMessageCharArray[i] = (char)(encodedMessageCharArray[i] + 2);\n                if (encodedMessageCharArray[i] > 122) {\n                    encodedMessageCharArray[i] = (char)(encodedMessageCharArray[i] - 26);\n                }\n            }\n        }\n        return new String(encodedMessageCharArray);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder encoded = new StringBuilder();\n        String[] vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"};\n        for(int i = 0; i < message.length(); i++) {\n            char curr = message.charAt(i);\n            if(Character.isLowerCase(curr)) {\n                curr = Character.toUpperCase(curr);\n            }\n            else {\n                curr = Character.toLowerCase(curr);\n            }\n            if(Arrays.asList(vowels).contains(curr)) {\n                int index = Arrays.asList(vowels).indexOf(curr);\n                curr = vowels[(index + 2) % 5];\n            }\n            encoded.append(curr);\n        }\n        return encoded.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        message = message.toLowerCase();\n        StringBuffer encoded = new StringBuffer();\n        for (char c : message.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                c = (char)(c + 2);\n                if (c == 'i') c = 'j';\n                if (c == 'u') c = 'v';\n                if (c > 'z') c = (char)(c - 26);\n            }\n            encoded.append(Character.toUpperCase(c));\n        }\n        return encoded.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().mapToObj(c -> {\n            char ch = (char)c;\n            if (Character.isLetter(ch)) {\n                ch = ch == Character.toUpperCase(ch) ? Character.toLowerCase(ch) : Character.toUpperCase(ch);\n            }\n            if (ch == 'a') {\n                ch = 'c';\n            } else if (ch == 'e') {\n                ch = 'g';\n            } else if (ch == 'i') {\n                ch = 'i';\n            } else if (ch == 'o') {\n                ch = 'k';\n            } else if (ch == 'u') {\n                ch = 'm';\n            }\n            return ch;\n        }).collect(StringBuilder::new, (sb, ch) -> sb.append(ch), StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String newMessage = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char letter = message.charAt(i);\n            if (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u') {\n                switch(letter) {\n                    case 'a': letter = 'c'; break;\n                    case 'e': letter = 'g'; break;\n                    case 'i': letter = 'k'; break;\n                    case 'o': letter = 'o'; break;\n                    case 'u': letter = 'q'; break;\n                }\n            }\n            newMessage += Character.toUpperCase(letter);\n        }\n        return newMessage;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String encoded = \"\";\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                c += Character.isUpperCase(c) ? 2 : -2;\n                if (c > 'z') {\n                    c -= 26;\n                } else if (c < 'a') {\n                    c += 26;\n                }\n            }\n            encoded += Character.toString(c);\n        }\n        return encoded;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        // write here\n        char[] c = message.toCharArray();\n        char[] r = message.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            if (Character.isLetter(c[i])) {\n                if (c[i] >= 'a' && c[i] <= 'z') {\n                    r[i] = (char) (c[i] - 'a' + 2);\n                    if (r[i] > 'z') {\n                        r[i] -= 26;\n                    }\n                }\n                if (c[i] >= 'A' && c[i] <= 'Z') {\n                    r[i] = (char) (c[i] - 'A' + 2);\n                    if (r[i] > 'Z') {\n                        r[i] -= 26;\n                    }\n                }\n            }\n            if (Character.isLetter(c[i]) == false) {\n                r[i] = c[i];\n            }\n            if ((c[i] == 'a' || c[i] == 'e' || c[i] == 'i' || c[i] == 'o' || c[i] == 'u' || c[i] == 'A' || c[i] == 'E' || c[i] == 'I' || c[i] == 'O' || c[i] == 'U')) {\n                r[i] = c[i];\n            }\n        }\n        String res = String.valueOf(r);\n        return res.toUpperCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                c ^= Character.isUpperCase(c) ? 'A' : 'a';\n                c = \"aeiou\".indexOf(c) < 0 ? c : (char) ((c - 'a' + 2) % 5 + 'a');\n            }\n            sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    String newMessage = message.toLowerCase();\n    for (int i = 0; i < message.length(); i++) {\n      if (message.charAt(i) == 'a' || message.charAt(i) == 'e' || message.charAt(i) == 'i' || message.charAt(i) == 'o' || message.charAt(i) == 'u') {\n        int nextIndex = (message.charAt(i) + 2) - 'a';\n        newMessage = newMessage.replace(\"\" + message.charAt(i), \"\" + ((char) (nextIndex + 'a')));\n      }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String upper = message.toUpperCase();\n        String lower = message.toLowerCase();\n        String vowels = \"aeiou\";\n        StringBuilder newMsg = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            int index = vowels.indexOf(Character.toLowerCase(c));\n            if (index == -1) {\n                newMsg.append(c);\n            } else {\n                newMsg.append(vowels.charAt(index + 2));\n            }\n        }\n        return newMsg.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    String upper=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    String lower=\"abcdefghijklmnopqrstuvwxyz\";\n    String vowel=\"AEIOU\";\n    String result=\"\";\n    for(char c : message.toCharArray()){\n      if(upper.indexOf(c)!=-1||lower.indexOf(c)!=-1){\n        if(upper.indexOf(c)!=-1){\n          result+=upper.substring(upper.indexOf(c)+2,upper.indexOf(c)+3);\n        }else if(lower.indexOf(c)!=-1){\n          result+=lower.substring(lower.indexOf(c)+2,lower.indexOf(c)+3);\n        }\n      }else{\n        result+=c;\n      }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String encoded = \"\";\n        for(char c : message.toCharArray()){\n            if(Character.isLowerCase(c)){\n                encoded += Character.toUpperCase(c);\n            }else{\n                encoded += Character.toLowerCase(c);\n            }\n        }\n        String vowels = \"aeiou\";\n        for(int i = 0; i < encoded.length(); i++){\n            for(int j = 0; j < vowels.length(); j++){\n                if(encoded.charAt(i) == vowels.charAt(j)){\n                    if(j == vowels.length() - 1){\n                        encoded = encoded.substring(0, i) + \"a\" + encoded.substring(i + 1);\n                    }else{\n                        encoded = encoded.substring(0, i) + vowels.charAt(j + 2) + encoded.substring(i + 1);\n                    }\n                }\n            }\n        }\n        return encoded;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        // write here", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] charArray = message.toLowerCase().toCharArray();\n        StringBuffer result = new StringBuffer();\n        int current;\n        for (int i = 0; i < charArray.length; i++) {\n            current = (int) charArray[i];\n            // Check if it's a vowel\n            if (current == 101 || current == 105 || current == 111 || current == 117 || current == 121) {\n                // Get the index of the next vowel (note that % is the modulo operator)\n                int nextVowelIndex = (current + 2) % 26;\n                charArray[i] = (char) nextVowelIndex;\n            }\n            // Write the character to the buffer\n            result.append((char) current);\n        }\n        return result.toString().toUpperCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n            if(Character.isUpperCase(ch)) {\n                ch += 2;\n                if(ch > 'Z') ch -= 26;\n                sb.append(Character.toLowerCase(ch));\n            } else if(Character.isLowerCase(ch)) {\n                ch += 2;\n                if(ch > 'z') ch -= 26;\n                sb.append(Character.toUpperCase(ch));\n            } else {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            // Swap case\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        for (int i = 0; i < sb.length(); i++) {\n            char ch = sb.charAt(i);\n            char vowel;\n            // Substitute vowels\n            switch (ch) {\n                case 'a': vowel = 'c'; break;\n                case 'e': vowel = 'g'; break;\n                case 'i': vowel = 'k'; break;\n                case 'o': vowel = 'n'; break;\n                case 'u': vowel = 'q'; break;\n                default: vowel = ch;\n            }\n            int vowelIdx = 0;\n            // Find index of vowel\n            if (Character.isLowerCase(ch)) {\n                for (vowelIdx = sb.indexOf(ch); vowelIdx >= 0; vowelIdx = sb.indexOf(ch, vowelIdx + 1)) {\n                }\n            } else {\n                for (vowelIdx = sb.indexOf(ch); vowelIdx >= 0; vowelIdx = sb.indexOf(ch, vowelIdx + 1)) {\n                }\n            }\n            // Vowel not in string\n            if (vowelIdx == -1) {\n                continue;\n            }\n            // Replace vowel with shifted character\n            sb.setCharAt(vowelIdx, vowel);\n            // Replace other characters with same character\n            for (int j = 1; j < sb.length(); j++) {\n                if (sb.charAt(j) == ch) {\n                    sb.setCharAt(j, vowel);\n                }\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] vowels = new char[] {'A','E','I','O','U'};\n        char[] encVowels = new char[] {'B','F','L','P','V'};\n        char[] chars = message.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c)) {\n                c = Character.toUpperCase(c);\n                for (int j = 0; j < vowels.length; j++) {\n                    if (c == vowels[j]) {\n                        chars[i] = encVowels[j];\n                        break;\n                    }\n                }\n            }\n        }\n        String encodedMessage = new String(chars);\n        encodedMessage = encodedMessage.toLowerCase();\n        return encodedMessage;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        for(int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n            if(Character.isLetter(ch)) {\n                result += isVowel(ch) ? (char)(ch + 2) : Character.toLowerCase(ch);\n            } else {\n                result += ch;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiou\";\n        char[] chars = message.toLowerCase().toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (vowels.indexOf(chars[i]) != -1) {\n                chars[i] += 2;\n            }\n        }\n        return new String(chars).toUpperCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder result = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            result.append(c >= 'a' && c <= 'z' ? (char) ('a' + (c - 'a' + 2) % 26) : c >= 'A' && c <= 'Z' ? (char) ('A' + (c - 'A' + 2) % 26) : c);\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] letters = message.toCharArray();\n        for (int i = 0; i < letters.length; i++) {\n            letters[i] = (char)(letters[i] + 2);\n            letters[i] = (letters[i] > 'z') ? (char)(letters[i] - 26) : letters[i];\n        }\n        String vowels = \"aeiou\";\n        for (int i = 0; i < letters.length; i++) {\n            if (vowels.indexOf(letters[i]) != -1) {\n                letters[i] = (char)(letters[i] + 2);\n                letters[i] = (letters[i] > 'z') ? (char)(letters[i] - 26) : letters[i];\n            }\n        }\n        return new String(letters);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        char[] encodedMessage = message.toCharArray();\n        for (int i = 0; i < encodedMessage.length; i++) {\n            if (vowels.indexOf(encodedMessage[i]) >= 0) {\n                encodedMessage[i] = (char) (vowels.indexOf(encodedMessage[i]) + 2);\n            }\n        }\n        return message.toUpperCase().equals(message) ?\n        new String(encodedMessage).toLowerCase() : new String(encodedMessage);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String s = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c))\n                    c = (char) (c + 2 - 'A');\n                else\n                    c = (char) (c + 2 - 'a');\n                if (c > 'z')\n                    c -= 26;\n            }\n            s += c;\n        }\n        return s;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder result = new StringBuilder();\n        String vowels = \"aeiou\";\n        int[] arr = {2, 2, 5, 5, 9, 9, 14, 14, 13, 18, 18, 23, 23};\n        char[] chars = message.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(Character.isLetter(chars[i])) {\n                if(Character.isUpperCase(chars[i])) {\n                    result.append(Character.toLowerCase(chars[i]));\n                } else if(Character.isLowerCase(chars[i])) {\n                    result.append(Character.toUpperCase(chars[i]));\n                }\n            } else {\n                result.append(chars[i]);\n            }\n        }\n        return result.toString().replaceAll(\"[aeiouAEIOU]\", v -> new Character(vowels.charAt(arr[vowels.indexOf(v)] - 1)).toString());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().map(x -> {\n            if (Character.isLetter(x)) {\n                x = (x + 2) % 26;\n                if (Character.isLowerCase(x)) {\n                    return (char)x;\n                } else {\n                    return (char)(x - 26);\n                }\n            } else {\n                return (char)x;\n            }\n        }).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    String a=\"\";\n    for(int i=0;i<message.length();i++)\n    {\n      if(message.charAt(i)>=65&&message.charAt(i)<=90)\n        a=a+(char)(message.charAt(i)+2);\n      else if(message.charAt(i)>=97&&message.charAt(i)<=122)\n        a=a+(char)(message.charAt(i)-2);\n      else\n      a=a+message.charAt(i);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiou\";\n        char[] chars = message.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if(Character.isLetter(c)) {\n                c = Character.toUpperCase(c);\n                if(vowels.indexOf(c) != -1) {\n                    c = (char) (c + 2);\n                    if(c > 'U') {\n                        c = 'A';\n                    }\n                }\n                chars[i] = c;\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.toLowerCase().chars().mapToObj(i -> (char) (i + 2)).map(c -> Character.isLetter(c) && Character.isLowerCase(c) ? \"aeiou\".indexOf(c) != -1 ? \"aeiou\".substring(2, 3).charAt(0) + Character.toUpperCase(c) : Character.toUpperCase(c) : \"\").collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars()\n            .mapToObj(c -> {\n                char ch = (char) c;\n                if (Character.isLetter(ch)) {\n                    if (Character.isUpperCase(ch)) {\n                        ch = (char) ('A' + ((ch - 'A' + 2) % 26));\n                    } else {\n                        ch = (char) ('a' + ((ch - 'a' + 2) % 26));\n                    }\n                    if (\"aeiou\".indexOf(ch) >= 0) ch = ch == 'a' ? 'e' : 'a';\n                }\n                return ch;\n            })\n            .collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().mapToObj(c -> {\n            char ch = (char) c;\n            if (ch < 97 || ch > 122) return Character.toString(ch);\n            return String.valueOf(\n                (char) (((ch - 97 + 2) % 26) + 97)\n            );\n        }).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.replaceAll(\"[aeiou]\", \"\").toUpperCase().replaceAll(\".\", (x) -> {\n            int i = ((((x.charAt(0) - 'A') + 2) % 26) + 'A');\n            return x.charAt(0) >= 'a' ? String.valueOf((char)(i + 'a' - 'A')) : String.valueOf((char)(i + 'A' - 'A'));\n        });", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char tmp = c;\n            char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n            for (int i = 0; i < vowels.length; ++i) {\n                if (c == vowels[i]) {\n                    tmp = (char)(c + 2);\n                    break;\n                }\n            }\n            tmp = (char)(tmp - 'a' + 'A');\n            sb.append(tmp);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n        char lowercase[] = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        char uppercase[] = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'};\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                c = lowercase[Arrays.binarySearch(lowercase, c)];\n                encoded += String.valueOf((char) (c + 2));\n            }\n            else if (c >= 'A' && c <= 'Z') {\n                c = uppercase[Arrays.binarySearch(uppercase, c)];\n                encoded += String.valueOf((char) (c + 2));\n            }\n            else {\n                encoded += c;\n            }\n        }\n        return encoded;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] messageChars = message.toCharArray();\n        for (int i = 0; i < messageChars.length; i++) {\n            if (messageChars[i] >= 'a' && messageChars[i] <= 'z') {\n                messageChars[i] = (char) ('A' + (messageChars[i] - 'a' + 2) % 26);\n            } else if (messageChars[i] >= 'A' && messageChars[i] <= 'Z') {\n                messageChars[i] = (char) ('a' + (messageChars[i] - 'A' + 2) % 26);\n            }\n        }\n        return new String(messageChars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String newMessage = message.toLowerCase();\n        char[] letters = newMessage.toCharArray();\n        int[] vowels = {97, 101, 105, 111, 117};\n        for (int i = 0; i < letters.length; i++) {\n            if (Arrays.asList(vowels).contains(letters[i])) {\n                int a = letters[i] - 96;\n                letters[i] = (char)(a + 2);\n                if (letters[i] > 122) {\n                    letters[i] = (char)(letters[i] - 122 + 96);\n                }\n            }\n        }\n        return new String(letters).toUpperCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        // Your code here\n        String vowels = \"aeiouAEIOU\";\n        char[] str = message.toCharArray();\n        char[] newStr = new char[str.length];\n        int count = 0;\n        for(int i = 0; i < str.length; i++){\n            if(vowels.indexOf(str[i]) != -1){\n                int temp = str[i] + 2;\n                if(temp > 122){\n                    temp -= 26;\n                }\n                newStr[i] = (char) temp;\n            }else if(Character.isUpperCase(str[i])){\n                newStr[i] = Character.toLowerCase(str[i]);\n                count++;\n            }else if(Character.isLowerCase(str[i])){\n                newStr[i] = Character.toUpperCase(str[i]);\n                count++;\n            }else{\n                newStr[i] = str[i];\n            }\n        }\n        if(count == str.length){\n            return new String(newStr).toUpperCase();\n        }else{\n            return new String(newStr).toLowerCase();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"AEIOUaeiou\";\n        char[] arr = message.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            char currChar = arr[i];\n            // Swap case\n            if (Character.isUpperCase(currChar)) {\n                currChar = Character.toLowerCase(currChar);\n            } else if (Character.isLowerCase(currChar)) {\n                currChar = Character.toUpperCase(currChar);\n            }\n            // Replace all vowels with the letter that appears two \n            // places ahead\n            if (vowels.indexOf(currChar) > -1) {\n                currChar = (char) (currChar + 2);\n                // If the new letter is a vowel, increase by 1\n                if (vowels.indexOf(currChar) > -1) {\n                    currChar = (char) (currChar + 1);\n                }\n            }\n            arr[i] = currChar;\n        }\n        return new String(arr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String encodedMessage = \"\";\n        String vowels = \"aeiou\";\n        for(int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n            if(ch >= 'a' && ch <= 'z') {\n                ch = (char) (ch - 32);\n            } else if(ch >= 'A' && ch <= 'Z') {\n                ch = (char) (ch + 32);\n            }\n            if(vowels.indexOf(ch) != -1) {\n                ch = (char) (ch + 2);\n                if(ch > 'z') {\n                    ch = (char) (ch - 26);\n                } else if(ch > 'Z') {\n                    ch = (char) (ch - 26);\n                }\n            }\n            encodedMessage += ch;\n        }\n        return encodedMessage;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    return message.replaceAll(\"[aeiouAEIOU]\", \"\").toLowerCase().replaceAll(\"[aeiou]\", \"\").concat(message.toLowerCase().replaceAll(\"[aeiou]\", \"\").concat(message.replaceAll(\"[aeiou]\", \"\").replaceAll(\"[aeiouAEIOU]\", \"\"))).replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().mapToObj(c -> {\n            char vowel = c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ? (char) (c + 2) : (char) Character.toUpperCase(c);\n            return c >= 'a' && c <= 'z' ? (char) Character.toUpperCase(vowel) : Character.toLowerCase(vowel);\n        }).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = (char) (c - 1 + 'A');\n                if (c < 'A') {\n                    c += 26;\n                }\n                c = (char) (c + 1 + 'a');\n                if (c > 'z') {\n                    c -= 26;\n                }\n            } else {\n                c = (char) (c - 1 + 'a');\n                if (c < 'a') {\n                    c += 26;\n                }\n                c = (char) (c + 1 + 'A');\n                if (c > 'Z') {\n                    c -= 26;\n                }\n            }\n            if (\"aeiou\".indexOf(c) >= 0) {\n                c = (char) (c + 2);\n                if (c > 'z') {\n                    c -= 26;\n                }\n            }\n            sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.toUpperCase().chars().mapToObj(c -> {\n            char ch = (char) c;\n            if (Character.isLetter(ch)) {\n                if (Character.isUpperCase(ch)) {\n                    ch = (char) ('A' + (ch - 'A' + 2) % 26);\n                } else {\n                    ch = (char) ('a' + (ch - 'a' + 2) % 26);\n                }\n            }\n            return ch;\n        }).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String encoded = \"\";\n        for(int i = 0; i < message.length(); i++) {\n            char currChar = message.charAt(i);\n            if(Character.isLetter(currChar)) {\n                if(Character.isUpperCase(currChar)) {\n                    encoded += Character.toLowerCase(currChar);\n                }\n                else if(Character.isLowerCase(currChar)) {\n                    encoded += Character.toUpperCase(currChar);\n                }\n            }\n            else {\n                encoded += currChar;\n            }\n        }\n        String finalString = \"\";\n        for(int i = 0; i < encoded.length(); i++) {\n            char currChar = encoded.charAt(i);\n            if(currChar == 'a' || currChar == 'e' || currChar == 'i' || currChar == 'o' || currChar == 'u') {\n                finalString += Character.toString(currChar);\n                finalString += (char)((currChar - 'a' + 2) % 26 + 'a');\n            }\n            else {\n                finalString += currChar;\n            }\n        }\n        return finalString;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().mapToObj(i -> {\n            if (Character.isLetter(i)) {\n                char c = (char) i;\n                if (Character.isUpperCase(i)) {\n                    c = Character.toLowerCase(c);\n                } else {\n                    c = Character.toUpperCase(c);\n                }\n                char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n                if (Arrays.asList(vowels).contains(c)) {\n                    int index = (Arrays.asList(vowels).indexOf(c) + 2) % 5;\n                    return vowels[index];\n                } else {\n                    return c;\n                }\n            } else {\n                return (char) i;\n            }\n        }).map(Object::toString).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiou\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (vowels.indexOf(c) != -1)\n                c += 2;\n            if (c > 'z')\n                c -= 26;\n            c = Character.toLowerCase(c);\n            sb.append(c);\n        }\n        return sb.toString().toUpperCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder(message);\n        String vowels = \"aeiou\";\n        for (int i = 0; i < message.length(); i++) {\n            char curr = sb.charAt(i);\n            if (vowels.indexOf(curr) != -1) {\n                int pos = vowels.indexOf(curr);\n                pos = (pos + 2) % 5;\n                sb.setCharAt(i, vowels.charAt(pos));\n            }\n        }\n        return sb.toString().toUpperCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for(char c : message.toCharArray()) {\n            if(Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase((char)(c + 2)));\n            } else if(Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase((char)(c + 2)));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().mapToObj(c -> {\n            char ch = (char) c;\n            if (Character.isLetter(ch)) {\n                ch = Character.toLowerCase(ch);\n                int pos = \"aeiou\".indexOf(ch);\n                if (pos != -1) {\n                    ch = \"aeiou\".charAt((pos + 2) % \"aeiou\".length());\n                }\n                ch = Character.isUpperCase(c) ? Character.toUpperCase(ch) : ch;\n            }\n            return ch;\n        }).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] messageChars = message.toCharArray();\n        for(int i = 0; i < message.length(); i++){\n            if(Character.isUpperCase(messageChars[i])){\n                messageChars[i] = (char)('A' + (messageChars[i] - 'A' + 2) % 26);\n            }\n            else{\n                messageChars[i] = (char)('a' + (messageChars[i] - 'a' + 2) % 26);\n            }\n            if(Arrays.asList('a', 'e', 'i', 'o', 'u').contains(messageChars[i])){\n                messageChars[i] = (char)(messageChars[i] + 2);\n            }\n        }\n        return new String(messageChars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] charArray = message.toCharArray();\n        int i = 0;\n        for (char letter : charArray) {\n            charArray[i] = letter != ' ' ? letter + 2 : letter;\n            charArray[i] = (charArray[i] > 'z' ? charArray[i] - 26 : charArray[i]);\n            charArray[i] = (char)(charArray[i] % 32 + 65);\n            charArray[i] = (charArray[i] > 'z' ? charArray[i] - 26 : charArray[i]);\n            charArray[i] = (char)(charArray[i] % 32 + 97);\n            charArray[i] = charArray[i] == 'i' || charArray[i] == 'I' ? (char) 9 : charArray[i];\n            charArray[i] = charArray[i] == 'e' || charArray[i] == 'E' ? (char) 14 : charArray[i];\n            charArray[i] = charArray[i] == 'a' || charArray[i] == 'A' ? (char) 21 : charArray[i];\n            charArray[i] = charArray[i] == 'o' || charArray[i] == 'O' ? (char) 26 : charArray[i];\n            charArray[i] = charArray[i] == 'u' || charArray[i] == 'U' ? (char) 3 : charArray[i];\n            charArray[i] = charArray[i] == 'y' || charArray[i] == 'Y' ? (char) 16 : charArray[i];\n            charArray[i] = charArray[i] == 'o' || charArray[i] == 'O' ? (char) 20 : charArray[i];\n            charArray[i] = charArray[i] == 'i' || charArray[i] == 'I' ? (char) 16 : charArray[i];\n            charArray[i] = charArray[i] == 'o' || charArray[i] == 'O' ? (char) 11 : charArray[i];\n            charArray[i] = charArray[i] == 'e' || charArray[i] == 'E' ? (char) 11 : charArray[i];\n            charArray[i] = charArray[i] == 'o' || charArray[i] == 'O' ? (char) 16 : charArray[i];\n            charArray[i] = charArray[i] == 'o' || charArray[i] == 'O' ? (char) 24 : charArray[i];\n            charArray[i] = charArray[i] == 'o' || charArray[i] == 'O' ? (char) 11 : charArray[i];\n            charArray[i] = charArray[i] == 'o' || charArray[i] == 'O' ? (char) 21 : charArray[i];\n            charArray[i] = charArray[i] == 'o' || charArray[i] == 'O' ? (char) 9 : charArray[i];\n            charArray[i] = charArray[i] == 'a' || charArray[i] == 'A' ? (char) 9 : charArray[i];\n            charArray[i] = charArray[i] == 'i' || charArray[i] == 'I' ?", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char newChar = c;\n            if (Character.isLetter(c)) {\n                newChar = Character.toUpperCase(c);\n            }\n            if (\"aeiou\".indexOf(c) > -1) {\n                newChar = (char)(\"aeiou\".indexOf(c) + 2 + 'a');\n            }\n            sb.append(newChar);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String output = \"\";\n        char[] c = message.toCharArray();\n        for (int i = 0; i < message.length(); i++) {\n            char x = c[i];\n            if (Character.isUpperCase(x)) {\n                output += (char)(x + 2);\n            } else {\n                output += (char)(x - 2);\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String retStr = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    c = (char) (c - 'A' + 2);\n                    if (c > 'Z') {\n                        c = (char) (c - 'Z' + 'A' - 1);\n                    }\n                    c = Character.toUpperCase(c);\n                } else {\n                    c = (char) (c - 'a' + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 'z' + 'a' - 1);\n                    }\n                    c = Character.toLowerCase(c);\n                }\n            }\n            retStr += c;\n        }\n        return retStr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] chars = message.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            char ch = chars[i];\n            if (Character.isLowerCase(ch)) {\n                chars[i] = (char) ('a' + (ch - 'a' + 2) % 26);\n            } else if (Character.isUpperCase(ch)) {\n                chars[i] = (char) ('A' + (ch - 'A' + 2) % 26);\n            }\n            if (\"aeiouAEIOU\".indexOf(chars[i]) != -1) {\n                chars[i] = (char) ('a' + (chars[i] - 'a' + 2) % 26);\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiou\";\n        message = message.toLowerCase();\n        StringBuilder s = new StringBuilder(message);\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (vowels.indexOf(ch) >= 0) {\n                s.setCharAt(i, (char)(ch + 2));\n            }\n        }\n        return s.toString().replaceAll(\"[aeiou]\", \"x\").toUpperCase().replaceAll(\"[X]\", vowels);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars()\n            .mapToObj(c -> ((char) (c ^ 0x20)))\n            .map(c -> c >= 'a' && c <= 'z' ? (char) (c + 2) : (char) (c - 2))\n            .map(c -> c > 'z' ? (char) (c - 26) : c)\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().mapToObj(c -> c < 'a' || (c > 'z' && c < 'A') || (c > 'Z') ? (char)c : (char)((c + 2 - (c >= 'a' ? 'a' : 'A')) % 26 + (c >= 'a' ? 'a' : 'A'))).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    return message\n    .replaceAll(\"[aeiou]\",(s)->Character.toString(s.toLowerCase().charAt(0)+2))\n    .replaceAll(\"[AEIOU]\",(s)->Character.toString(s.toLowerCase().charAt(0)+2));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder newString = new StringBuilder();\n        char[] charMessage = message.toCharArray();\n        for(int i = 0; i < message.length(); i++){\n            if(Character.isLetter(charMessage[i])){\n                if(Character.isUpperCase(charMessage[i])){\n                    charMessage[i] = (char) (charMessage[i] - 'A' + 2);\n                    charMessage[i] = (char) ('A' + charMessage[i] % 26);\n                    newString.append(charMessage[i]);\n                }else{\n                    charMessage[i] = (char) (charMessage[i] - 'a' + 2);\n                    charMessage[i] = (char) ('a' + charMessage[i] % 26);\n                    newString.append(charMessage[i]);\n                }\n            }else{\n                newString.append(charMessage[i]);\n            }\n        }\n        return newString.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    // Your code here\n    StringBuilder sb = new StringBuilder();\n    for(char c : message.toCharArray()){\n      if(Character.isLetter(c)){\n        char replace = (char)('a' + (c - 'a' + 2) % 26);\n        sb.append(replace);\n      }else{\n        sb.append(c);\n      }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String result = \"\";\n        for(char c : message.toCharArray()) {\n            if(Character.isUpperCase(c))\n                result += (char)(c + 2 - 'A');\n            else if(Character.isLowerCase(c))\n                result += (char)(c + 2 - 'a');\n            else\n                result += c;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        String newMessage = \"\";\n        for (char c : message.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                c = (char) (c + 2);\n            }\n            if (Character.isUpperCase(c)) {\n                newMessage += Character.toUpperCase(c);\n            }\n            else {\n                newMessage += Character.toLowerCase(c);\n            }\n        }\n        return newMessage;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String newMessage = \"\";\n        char[] messageCharArray = message.toCharArray();\n        for(int i = 0; i < messageCharArray.length; i++){\n            if(messageCharArray[i] != ' '){\n                if(messageCharArray[i] == 'a' || messageCharArray[i] == 'A' || messageCharArray[i] == 'e' || messageCharArray[i] == 'E' || messageCharArray[i] == 'i' || messageCharArray[i] == 'I' || messageCharArray[i] == 'o' || messageCharArray[i] == 'O' || messageCharArray[i] == 'u' || messageCharArray[i] == 'U'){\n                    if(Character.isUpperCase(messageCharArray[i])){\n                        newMessage += (char)(messageCharArray[i] + 2);\n                    }\n                    else{\n                        newMessage += (char)(messageCharArray[i] - 2);\n                    }\n                }\n                else{\n                    if(Character.isUpperCase(messageCharArray[i])){\n                        newMessage += Character.toLowerCase(messageCharArray[i]);\n                    }\n                    else{\n                        newMessage += Character.toUpperCase(messageCharArray[i]);\n                    }\n                }\n            }\n            else{\n                newMessage += \" \";\n            }\n        }\n        return newMessage;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder output = new StringBuilder();\n        String vowels = \"aeiou\";\n        for (int i = 0; i < message.length(); i++) {\n            char letter = message.charAt(i);\n            if (Character.isLetter(letter)) {\n                letter = Character.isUpperCase(letter) ? \n                    Character.toLowerCase(letter) : \n                    Character.toUpperCase(letter);\n            }\n            char replacement = vowels.indexOf(letter) > -1 ? (char)(letter + 2) : letter;\n            output.append(replacement);\n        }\n        return output.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        String swappedMessage = \"\";\n        char[] charArray = message.toCharArray();\n        for(int i = 0; i < charArray.length; i++) {\n            char letter = charArray[i];\n            if(vowels.indexOf(letter) != -1) {\n                swappedMessage += vowels.substring(vowels.indexOf(letter) + 2, vowels.indexOf(letter) + 3);\n            } else if(Character.isUpperCase(letter)) {\n                swappedMessage += Character.toLowerCase(letter);\n            } else {\n                swappedMessage += Character.toUpperCase(letter);\n            }\n        }\n        return swappedMessage;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder encoded = new StringBuilder();\n        for (char ch : message.toCharArray()) {\n            if (Character.isUpperCase(ch)) {\n                encoded.append(getVowel(ch - 'A' + 2));\n            } else if (Character.isLowerCase(ch)) {\n                encoded.append(getVowel(ch - 'a' + 2));\n            } else {\n                encoded.append(ch);\n            }\n        }\n        return encoded.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return new StringBuilder(message).reverse().toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] res = new char[message.length()];\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    c += 2;\n                    if (c > 'Z') {\n                        c -= 26;\n                    }\n                } else {\n                    c += 2;\n                    if (c > 'z') {\n                        c -= 26;\n                    }\n                }\n            }\n            res[i] = c;\n        }\n        return new String(res);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] c = message.toCharArray();\n        for(int i = 0; i < c.length; i++) {\n            char curr = c[i];\n            if(Character.isLetter(curr)) {\n                curr = Character.toLowerCase(curr);\n                if(curr == 'a' || curr == 'e' || curr == 'i' || curr == 'o' || curr == 'u') {\n                    curr += 2;\n                } else {\n                    curr = Character.toUpperCase(curr);\n                }\n                c[i] = curr;\n            }\n        }\n        return new String(c);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] result = message.toCharArray();\n        for (int i = 0; i < result.length; i++) {\n            if (Character.isAlphabetic(result[i])) {\n                if (Character.isUpperCase(result[i])) {\n                    result[i] = (char) (((result[i] - 'A' + 2) % 26) + 'A');\n                } else {\n                    result[i] = (char) (((result[i] - 'a' + 2) % 26) + 'a');\n                }\n            }\n        }\n        String r = new String(result);\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    message = message.toLowerCase();\n    String newMessage = \"\";\n    char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n    char[] vowelsUpper = {'A', 'E', 'I', 'O', 'U'};\n    char[] vowelsEncoded = {'c', 'g', 'k', 'o', 's'};\n    char[] vowelsEncodedUpper = {'C', 'G', 'K', 'O', 'S'};\n    for(int i = 0; i < message.length(); i++){\n        char c = message.charAt(i);\n        if(Arrays.asList(vowels).contains(c)){\n            int vowelIndex = Arrays.asList(vowels).indexOf(c);\n            if(c >= 97 && c <= 122)\n            newMessage += vowelsEncoded[vowelIndex];\n            else\n            newMessage += vowelsEncodedUpper[vowelIndex];\n        }else{\n            if(c >= 97 && c <= 122)\n            newMessage += (char)(c - 32);\n            else\n            newMessage += c;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] c = message.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            if (Character.isLowerCase(c[i])) {\n                c[i] = (char) (c[i] - 32);\n            }\n            switch (c[i]) {\n                case 'a': c[i] = 'c'; break;\n                case 'e': c[i] = 'g'; break;\n                case 'i': c[i] = 'k'; break;\n                case 'o': c[i] = 'n'; break;\n                case 'u': c[i] = 'q'; break;\n                default: break;\n            }\n            if (Character.isUpperCase(c[i])) {\n                c[i] = (char) (c[i] + 32);\n            }\n        }\n        return new String(c);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuffer encoded = new StringBuffer();\n        for (char c: message.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                c = (char)(c - 'a' + 2);\n                if (c > 'z') c -= 26;\n                encoded.append((char)(c + 'a'));\n            } else if (Character.isUpperCase(c)) {\n                c = (char)(c - 'A' + 2);\n                if (c > 'Z') c -= 26;\n                encoded.append((char)(c + 'A'));\n            } else {\n                encoded.append(c);\n            }\n        }\n        return encoded.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.replaceAll(\"[aeiouAEIOU]\", \"\").toLowerCase().chars().mapToObj(i -> {\n            char ch = (char)i;\n            return (ch >= 'a' && ch <= 'z') ? ((ch + 2) >= 'a' ? ((ch + 2) > 'z' ? 'a' : ((char)(ch + 2))) : 'z') : ch;\n        }).map(String::valueOf).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    StringBuffer stringBuffer = new StringBuffer(message);\n    for(int i = 0; i < message.length(); i++) {\n        char c = message.charAt(i);\n        if(Character.isUpperCase(c)) {\n            stringBuffer.setCharAt(i, Character.toLowerCase(c));\n        } else if(Character.isLowerCase(c)) {\n            stringBuffer.setCharAt(i, Character.toUpperCase(c));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] message_chars = message.toCharArray();\n        int i = 0;\n        String result = \"\";\n        while (i < message_chars.length) {\n            if (message_chars[i] >= 'a' && message_chars[i] <= 'z') {\n                char c = (char)(((int)message_chars[i] - 97 + 2) % 26 + 97);\n                result += Character.toString(c);\n            } else if (message_chars[i] >= 'A' && message_chars[i] <= 'Z') {\n                char c = (char)(((int)message_chars[i] - 65 + 2) % 26 + 65);\n                result += Character.toString(c);\n            } else {\n                result += Character.toString(message_chars[i]);\n            }\n            i++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder encoded = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (vowels.contains(\"\"+c)) {\n                int index = vowels.indexOf(c);\n                index += 2;\n                if (index >= vowels.length()) {\n                    index = index - vowels.length();\n                }\n                encoded.append(vowels.charAt(index));\n            }\n            else {\n                if (Character.isUpperCase(c)) {\n                    encoded.append(Character.toLowerCase(c));\n                }\n                else {\n                    encoded.append(Character.toUpperCase(c));\n                }\n            }\n        }\n        return encoded.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().mapToObj(c -> {\n            if (Character.isUpperCase(c)) {\n                c += 2;\n                if (c > 90) c -= 26;\n            }\n            if (Character.isLowerCase(c)) {\n                c += 2;\n                if (c > 122) c -= 26;\n            }\n            if (Character.isLetter(c)) {\n                switch (c) {\n                case 65:\n                case 97:\n                    c = 'E';\n                    break;\n                case 69:\n                case 101:\n                    c = 'I';\n                    break;\n                case 73:\n                case 105:\n                    c = 'O';\n                    break;\n                case 79:\n                case 111:\n                    c = 'U';\n                    break;\n                case 85:\n                case 117:\n                    c = 'Y';\n                    break;\n                case 80:\n                case 112:\n                    c = 'A';\n                    break;\n                case 86:\n                case 118:\n                    c = 'B';\n                    break;\n                case 88:\n                case 120:\n                    c = 'D';\n                    break;\n                case 90:\n                case 122:\n                    c = 'Z';\n                    break;\n                }\n            }\n            return Character.toString(c);\n        }).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isUpperCase(c)) {\n                message = message.replace(Character.toString(c), (Character.toString(c)).toLowerCase());\n            }\n            if (Arrays.binarySearch(vowels, c) >= 0) {\n                int index = Arrays.binarySearch(vowels, c);\n                message = message.replace(Character.toString(c), (Character.toString(vowels[(index + 2) % 5])).toUpperCase());\n            }\n        }\n        return message;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String vowels = \"aeiou\";\n        StringBuilder newString = new StringBuilder();\n        for (char i : message.toCharArray()) {\n            if (vowels.indexOf(i) != -1) {\n                i = (char) (i + 2);\n            }\n            if (Character.isUpperCase(i)) {\n                i = Character.toLowerCase(i);\n            } else {\n                i = Character.toUpperCase(i);\n            }\n            newString.append(i);\n        }\n        return newString.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        // Write code here", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    char[] newMessage = new char[message.length()];\n        for (int i = 0; i < message.length(); i++) {\n            if (Character.isUpperCase(message.charAt(i))) {\n                newMessage[i] = (char) (message.charAt(i) + 2 - 'A');\n            } else if (Character.isLowerCase(message.charAt(i))) {\n                newMessage[i] = (char) (message.charAt(i) + 2 - 'a');\n            } else {\n                newMessage[i] = message.charAt(i);\n            }\n            if (newMessage[i] > 'z') {\n                newMessage[i] = (char) (newMessage[i] - 26);\n            }\n        }\n        return String.valueOf(newMessage);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    return message.chars().mapToObj(c -> {\n        char result = (char)c;\n        result = Character.isUpperCase(result) ?\n            (char)('A' + ('Z' - result) % 26) :\n            (char)('a' + ('z' - result) % 26);\n        return Character.isUpperCase(c) ||\n            \"aeiouy\".indexOf(result) != -1 ?\n            Character.toUpperCase(result) : result;\n    }).collect(Collectors.joining(\"\"));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] arr = message.toCharArray();\n        char[] encoded = new char[arr.length];\n        for(int i = 0; i < arr.length; i++){\n            if(Character.isLowerCase(arr[i])){\n                encoded[i] = (char) (arr[i] - 2);\n            } else if (Character.isUpperCase(arr[i])){\n                encoded[i] = (char) (arr[i] + 2);\n            } else {\n                encoded[i] = arr[i];\n            }\n        }\n        return new String(encoded);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] toReturn = message.toCharArray();\n        for (int i = 0; i < message.length(); i++) {\n            char letter = toReturn[i];\n            if (letter != ' ' && letter != '\\n' && letter != '\\r') {\n                letter = Character.isUpperCase(letter) ?\n                    swapCase(letter) :\n                    Character.toUpperCase(swapCase(Character.toLowerCase(letter)));\n            }\n            switch (letter) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    toReturn[i] = (char) (letter + 2);\n                    break;\n                default:\n                    toReturn[i] = letter;\n            }\n        }\n        return new String(toReturn);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().mapToObj(x -> {\n            char c = (char) x;\n            if (c == 'a') {\n                return 'c';\n            } else if (c == 'e') {\n                return 'g';\n            } else if (c == 'i') {\n                return 'j';\n            } else if (c == 'o') {\n                return 'q';\n            } else if (c == 'u') {\n                return 'x';\n            } else if (Character.isUpperCase(c)) {\n                return Character.toLowerCase(c);\n            } else {\n                return Character.toUpperCase(c);\n            }\n        }).collect(Collectors.joining(\"\"));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        message = message.toLowerCase();\n        char vowel[] = {'a', 'e', 'i', 'o', 'u'};\n        char swappedVowel[] = {'c', 'e', 'i', 'o', 'g'};\n        StringBuilder encodedString = new StringBuilder();\n        for(int i = 0; i < message.length(); i++) {\n            if(message.charAt(i) == ' ') {\n                encodedString.append(\" \");\n            }\n            else {\n                char ch = message.charAt(i);\n                if(ch >= 97 && ch <= 122) {\n                    ch = (char)(ch ^ 32);\n                    encodedString.append(ch);\n                }\n                else {\n                    for(int j = 0; j < vowel.length; j++) {\n                        if(ch == vowel[j]) {\n                            ch = swappedVowel[j];\n                            break;\n                        }\n                    }\n                    encodedString.append(ch);\n                }\n            }\n        }\n        return encodedString.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return message.chars().mapToObj(c -> (char) c).map(c ->\n            c == ' ' ? ' ' :\n            c >= 'A' && c <= 'Z' ? (char) ('Z' - c + 'A') :\n            c >= 'a' && c <= 'z' ? (char) ('z' - c + 'a') :\n            (char) (c - 2)).map(c ->\n            c == ' ' ? ' ' :\n            c >= 'A' && c <= 'Z' ? (char) ('Z' - c + 'A') :\n            c >= 'a' && c <= 'z' ? (char) ('z' - c + 'a') :\n            (char) (c + 2)).map(c -> c == ' ' ? ' ' : (c >= 'a' && c <= 'u' || c >= 'U' && c <= 'U' ? (char) (c - 2) : c)).map(c -> c == ' ' ? ' ' : (c >= 'a' && c <= 'u' || c >= 'U' && c <= 'U' ? (char) (c + 2) : c)).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        char[] arr = message.toLowerCase().toCharArray();\n        String result = \"\";\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                arr[i] = (char) ((arr[i] + 2 - 97) % 26 + 97);\n            }\n        }\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] >= 65 && arr[i] <= 90) {\n                arr[i] += 32;\n            }\n        }\n        return result += new String(arr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return new StringBuffer(message.length())\n            .append(message.chars()\n                .mapToObj(c -> c >= 'a' && c <= 'z' ? (char) (c + 2) : c)\n                .mapToObj(c -> c >= 'A' && c <= 'Z' ? (char) (c - 2) : c)\n                .map(c -> \"aeiou\".indexOf(c) < 0 ? c : \"AEIOU\".charAt(new String(new char[] { c }).toLowerCase().codePointAt(0) - 97))\n                .map(c -> \"AEIOU\".indexOf(c) < 0 ? c : \"aeiou\".charAt(new String(new char[] { c }).toUpperCase().codePointAt(0) - 97))\n                .map(c -> (char) (c >= 'a' && c <= 'z' ? c - 'a' : c >= 'A' && c <= 'Z' ? c - 'A' : c))\n                .map(c -> (char) (c + 'a'))\n                .map(c -> \"aeiou\".indexOf(c) < 0 ? c : \"AEIOU\".charAt(new String(new char[] { c }).toUpperCase().codePointAt(0) - 97))\n                .map(c -> \"AEIOU\".indexOf(c) < 0 ? c : \"aeiou\".charAt(new String(new char[] { c }).toLowerCase().codePointAt(0) - 97))\n                .map(c -> (char) (c >= 'a' && c <= 'z' ? c - 'a' : c >= 'A' && c <= 'Z' ? c - 'A' : c))\n                .map(c -> (char) (c + 'A'))\n                .collect(Collectors.joining()));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        String newMessage = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            if (Character.isLowerCase(message.charAt(i))) {\n                newMessage += Character.toUpperCase(message.charAt(i));\n            } else if (Character.isUpperCase(message.charAt(i))) {\n                newMessage += Character.toLowerCase(message.charAt(i));\n            } else {\n                newMessage += message.charAt(i);\n            }\n        }\n        for (int i = 0; i < newMessage.length(); i++) {\n            if (newMessage.charAt(i) == 'a' || newMessage.charAt(i) == 'e' || newMessage.charAt(i) == 'i' || newMessage.charAt(i) == 'o' || newMessage.charAt(i) == 'u') {\n                newMessage = newMessage.substring(0, i) + (char) (newMessage.charAt(i) + 2) + newMessage.substring(i + 1);\n            }\n        }\n        return newMessage;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n            char newCh = ch;\n            if (Character.isLetter(ch)) {\n                newCh = Character.toLowerCase(ch);\n                if (\"aeiouy\".indexOf(newCh) >= 0) {\n                    newCh = (char) ('a' + (newCh - 'a' + 2) % 26);\n                }\n                newCh = Character.toUpperCase(newCh);\n            }\n            sb.append(newCh);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n    //     String vowels = \"aeiou\";\n    //     char[] str = message.toCharArray();\n    //     for (int i = 0; i < str.length; i++) {\n    //         int index = vowels.indexOf(str[i]);\n    //         if (index != -1) {\n    //             str[i] = vowels.charAt((index + 2) % 5);\n    //         }\n    //     }\n    //     return String.valueOf(str);\n    String vowels = \"aeiou\";\n    String uppercaseVowels = \"AEIOU\";\n    char[] str = message.toCharArray();\n    for (int i = 0; i < str.length; i++) {\n        int index = vowels.indexOf(str[i]);\n        if (index != -1) {\n            str[i] = vowels.charAt((index + 2) % 5);\n        } else {\n            index = uppercaseVowels.indexOf(str[i]);\n            if (index != -1) {\n                str[i] = uppercaseVowels.charAt((index + 2) % 5);\n            }\n        }"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return S.split(\"\\\\.|\\\\?|!\").length - S.replaceAll(\"I\", \"\").split(\"\\\\.|\\\\?|!\").length;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|\\\\!\");\n        int boredoms = 0;\n        for(String sentence : sentences) {\n            if(sentence.trim().startsWith(\"I\")) {\n                boredoms++;\n            }\n        }\n        return (long) boredoms;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] array = S.split(\"[.?!]\");\n        int count = 0;\n        for(String x: array){\n            if(x.toLowerCase().startsWith(\"i\")) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Stream.of(S.split(\"\\\\.|\\\\?|!\")).filter(x -> x.startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        S = S.replaceAll(\"[.!?]\", \" \");\n        List<String> array = new ArrayList<>(Arrays.asList(S.split(\" \")));\n        array.add(\".\");\n        int i = 0;\n        long c = 0;\n        while(i < array.size()) {\n            if(array.get(i).equals(\"I\")) c += 1;\n            if(array.get(i).equals(\".\")) i += 2;\n            else i += 1;\n        }\n        return c;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // This is a template function for you to solve the problem;\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        char[] arr = S.toCharArray();\n        int count = 0;\n        boolean flag = false;\n        boolean prevFlag = false;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 'I') {\n                flag = true;\n            } else if (arr[i] == '.' || arr[i] == '?' || arr[i] == '!') {\n                flag = false;\n                prevFlag = true;\n            }\n            if (prevFlag && flag) {\n                count++;\n                prevFlag = false;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        S=S.trim();\n        if(S.charAt(S.length()-1)!='.'){\n            S+='.';\n        }\n        S=S.replace(\".\", \".\");\n        S=S.replace(\"?\", \".\");\n        S=S.replace(\"!\", \".\");\n        String[] st=S.split(\"\\\\.\");\n        int c=0;\n        for(int i=0;i<st.length;i++){\n            String sti=st[i];\n            if(sti.length()==0) continue;\n            if(sti.startsWith(\"I\")) c++;\n        }\n        return c;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"[.!?]\");\n        return Arrays.stream(sentences).filter(s -> s.startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        String[] sentences = S.split(\"\\\\.|\\\\?|\\\\!\");\n        for (int i = 0; i < sentences.length; i++) {\n            if (sentences[i].trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"[.!?]\");\n        long count = 0;\n        for (String sentence : sentences) {\n            String[] words = sentence.split(\" \");\n            for (String word : words) {\n                if (word.equals(\"I\")) {\n                    count++;\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        for(String s : S.split(\"[!\\\\.\\\\?]\")) {\n            if(s.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        String[] array = S.split(\"[\\\\.\\\\?\\\\!]\");\n        for (int i = 0; i < array.length; i++) {\n            String[] words = array[i].split(\" \");\n            if (words.length > 0) {\n                if (words[0].equals(\"I\")) {\n                    count++;\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n    int count = 0;\n    String[] tokens = S.split(\"[.!?]\");\n    for(int i = 0; i < tokens.length; i++) {\n        String [] words = tokens[i].split(\" \");\n        if(words[0].equals(\"I\")) count++;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] words = S.split(\"[.!?]\");\n        int count = 0;\n        for (String word : words) {\n            word = word.trim();\n            if (word.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] arr = S.split(\"[\\\\.!]\");\n        int boredom = 0;\n        for (String s : arr) {\n            s = s.trim();\n            if (s.length() > 0) {\n                String[] words = s.split(\" \");\n                if (words[0].equals(\"I\"))\n                    boredom++;\n            }\n        }\n        return (long) boredom;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n    return S.length() > 1 ? \n    Stream.of(S.split(\"[?!.]+\")).filter(s -> s.trim().startsWith(\"I\")).count() : 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return S.split(\"\\\\.|\\\\?|\\\\!\")\n        .stream()\n        .filter(x -> x.contains(\"I\"))\n        .count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int boredom = 0;\n        String[] sentences = S.split(\"[.!?]\");\n        for(String sentence: sentences) {\n            String[] words = sentence.split(\" \");\n            for(String word: words) {\n                if(word.equals(\"I\")) {\n                    boredom++;\n                }\n            }\n        }\n        return boredom;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // Write your code here\n        return S.chars().filter(c -> c == 'I').count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int i = 0, count = 0;\n        while(i < S.length()) {\n            if(S.charAt(i) == 'I') {\n                if(i == 0 || (S.charAt(i-1) == '.' || S.charAt(i-1) == '?' || S.charAt(i-1) == '!')) count++;\n            }\n            if(S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i) == '!') i++;\n            i++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long res=0;\n        String[] words=S.split(\"[.!?]\");\n        for(String w:words){\n            if(w.startsWith(\"I\"))\n                res++;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Stream.of(S.split(\"\\\\.|\\\\?|\\\\!\"))\n            .filter(s -> s.startsWith(\"I\"))\n            .count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] s = S.split(\"[.!?]\");\n        long count = 0;\n        for(int i = 0; i < s.length; i++) {\n            if(s[i].split(\" \")[0].equals(\"I\")) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        String[] split = S.split(\"[.?!]\");\n        for (String s : split) {\n            if (s.length() != 0) {\n                String[] words = s.split(\" \");\n                if (words[0].equals(\"I\")) {\n                    count += 1;\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                String end = S.substring(i);\n                if (end.indexOf(\"!\") != -1) {\n                    if (end.indexOf(\".\") != -1) count++;\n                    if (end.indexOf(\"?\") != -1) count++;\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // Write your code here\n        long count = 0;\n        for(String word: S.split(\"[.!?]+\")){\n            if(word.trim().startsWith(\"I\")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Stream.of(S.split(\"[\\\\.\\\\?!]\")).filter(s -> s.trim().startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long numBored = 0l;\n        String[] Sarr = S.split(\"[.?!]\");\n        for (String sent : Sarr) {\n            if (sent.contains(\"I\")) numBored++;\n        }\n        return numBored;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        String[] list = S.split(\"\\\\.|\\\\?|\\\\!\");\n        for (int i = 0; i < list.length; i++) {\n            if (list[i].startsWith(\"I\"))\n                count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        String[] sentences = S.split(\"[.!?]\");\n        for(String sentence : sentences){\n            if(sentence.contains(\"I\")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // Complete this\n\t\tint counter = 0;\n\t\tfor (int i = 0; i < S.length(); i++) {\n\t\t\tif (S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i) == '!') {\n\t\t\t\tif (S.substring(i + 1).startsWith(\"I\")) counter++;\n\t\t\t}\n\t\t}\n\t\treturn counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        for (String word : S.split(\"[.!?]+\")) {\n            if (word.startsWith(\"I\")) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n    // Write your code here\n    String[] s = S.split(\"[\\\\.|\\\\?|\\\\!]\");\n    long count = 0;\n    for(int i=0;i<s.length;i++)\n    {\n        if(s[i].startsWith(\"I\"))\n        count++;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"[.?!]\");\n        long result = 0;\n        for(String s : sentences){\n            if(s.trim().startsWith(\"I\")){\n                result++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long num = 0;\n        for (String s : S.split(\"[.?!]\")) {\n            if (s.trim().startsWith(\"I\")) num++;\n        }\n        return num;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        String[] sentences = S.split(\"[\\\\.\\\\?!]\");\n        for (int i = 0; i < sentences.length; i++) {\n            String[] words = sentences[i].split(\" \");\n            if (words[0].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int boredomCounter = 0;\n        char[] chars = S.toCharArray();\n        String[] sentences = S.split(\"[.!?]\");\n        for (int i = 0; i < sentences.length; i++) {\n            String sentence = sentences[i];\n            String[] words = sentence.split(\" \");\n            if (words[0].equals(\"I\")) boredomCounter++;\n        }\n        return boredomCounter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i) == '!') {\n                String[] s = S.substring(0, i).split(\" \");\n                if (s[s.length - 1].equals(\"I\")) {\n                    count++;\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        S = S.replaceAll(\"[^\\\\.\\\\?!]*I\", \"\");\n        S = S.replaceAll(\"\\\\.\\\\s+\", \".\");\n        return (long) S.split(\"[\\\\.\\\\?!]\").length;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        String[] sentences = S.split(\"[.!?] \");\n        for (String sentence : sentences) {\n            String[] words = sentence.split(\" \");\n            if (words[0].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count=0;\n        String s[]=S.split(\"[.!?]+\");\n        for(int i=0;i<s.length;i++)\n        {\n            if(s[i].trim().equals(\"I\") || s[i].trim().startsWith(\"I \"))\n            count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        char[] ca = S.toCharArray();\n        int i = 0;\n        int n = ca.length;\n        long res = 0;\n        while (i < n) {\n            if (ca[i] == 'I') {\n                if (i < n - 1) {\n                    if (ca[i + 1] == ' ' || ca[i + 1] == '.' || ca[i + 1] == '?' || ca[i + 1] == '!')\n                        res++;\n                }\n            }\n            if (ca[i] == '.' || ca[i] == '?' || ca[i] == '!') {\n                while (i < n && ca[i] != ' ')\n                    i++;\n            } else\n                i++;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long boredomCount = 0;\n        boolean newSentence = false;\n        for (char c : S.toCharArray()) {\n            if (c == '.' || c == '!' || c == '?') {\n                newSentence = true;\n            } else if (c == ' ' && newSentence) {\n                String s = S.substring(S.lastIndexOf(' ')+1, S.indexOf(c));\n                if (s.equals(\"I\")) boredomCount++;\n                newSentence = false;\n            }\n        }\n        return boredomCount;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"[.!?]\");\n        long count = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\"))\n                count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0, i = 0;\n        String[] s = S.split(\"[.!?]\");\n        while (i < s.length)\n            if(s[i].startsWith(\"I\"))\n                count++;\n            i++;\n        return (long)count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] temp = S.split(\"[.?!]\");\n        int count = 0;\n        for(int i = 0; i < temp.length; i++){\n            if(temp[i].length() > 2 && temp[i].substring(0,2).equals(\"I \")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String [] words = S.split(\"[.!?]\");\n        long c = 0;\n        for (String w : words) {\n            String []ww = w.split(\" \");\n            if (ww.length > 0 && ww[0].equals(\"I\")) c++;\n        }\n        return c;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return S.split(\"[\\\\.!?]\")\n            .stream()\n            .filter(x -> x.trim().startsWith(\"I\"))\n            .count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] lines = S.split(\"[.!?]\");\n        long boredoms = 0;\n        for(String line : lines){\n            String[] words = line.split(\" \");\n            if(words[0].equals(\"I\")) boredoms++;\n        }\n        return boredoms;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long boredCount = 0;\n        String[] splitSentence = S.split(\"\\\\.|\\\\?|\\\\!\");\n        for (String sentence : splitSentence) {\n            if (sentence.trim().toLowerCase().startsWith(\"i\")) {\n                boredCount += 1;\n            }\n        }\n        return boredCount;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        boolean started = false;\n        for(String s: S.split(\"[.?!]\")){\n            if(s.isEmpty()) continue;\n            String firstWord = s.split(\" \")[0];\n            if(firstWord.equals(\"I\")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n    long count = 0;\n    String[] split = S.split(\"[\\\\.\\\\?\\\\!]\");\n    for(int i = 0; i < split.length; i++){\n      if(split[i].trim().startsWith(\"I\")){\n        count++;\n      }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long boredom = 0;\n        char[] chars = S.toCharArray();\n        int sentence = 1;\n        for(int i = 0; i < chars.length; i++){\n            if(chars[i] == '.'){\n                sentence++;\n            }\n        }\n        String[] sentences = S.split(\"\\\\.|\\\\?|\\\\!\");\n        for(int i = 0; i < sentences.length; i++){\n            String sentenceToSplit = sentences[i];\n            String[] words = sentenceToSplit.split(\"\\\\s+\");\n            for(int j = 0; j < words.length; j++){\n                if(words[j].equals(\"I\")){\n                    boredom++;\n                }\n            }\n        }\n        return sentence - boredom;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int boredomCount = 0;\n        for (String s : S.split(\"[.?!]\")) {\n            if (s.startsWith(\"I\"))\n                boredomCount++;\n        }\n        return boredomCount;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long answer = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        for(String sentence : sentences){\n            if(sentence.startsWith(\"I \")){\n                answer++;\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        char[] arr = S.toCharArray();\n        long count = 0;\n        int i = 0;\n        int s = 0;\n        while(i < arr.length){\n            if(arr[i] == 'I'){\n                if(i < arr.length - 1 && (arr[i + 1] == ' ' || arr[i + 1] == ',' || arr[i + 1] == '.' || arr[i + 1] == '?' || arr[i + 1] == '!' || arr[i + 1] == '\\\"' || arr[i + 1] == '\\'')){\n                    count++;\n                    s = 0;\n                    while(i < arr.length && arr[i] != ' ' && arr[i] != '.' && arr[i] != '?' && arr[i] != '!' && arr[i] != '\\\"' && arr[i] != '\\'' && arr[i] != ','){\n                        i++;\n                    }\n                }else if(i < arr.length - 1 && (arr[i + 1] == '\\'' || arr[i + 1] == '\\\"')){\n                    s++;\n                    i++;\n                    while(i < arr.length && arr[i] != '\\'' && arr[i] != '\\\"'){\n                        i++;\n                    }\n                }\n            }else if(arr[i] == '.' || arr[i] == '?' || arr[i] == '!'){\n                if(s == 0){\n                    count++;\n                }else{\n                    s = 0;\n                }\n            }\n            i++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        char[] chars = S.toCharArray();\n        int sentenceCount = 0;\n        int lastSentence = -1;\n        int i = 0;\n        while (i < chars.length) {\n            if (chars[i] == '!' || chars[i] == '?' || chars[i] == '.') {\n                if (lastSentence != -1 && chars[lastSentence + 1] == 'I') {\n                    sentenceCount += 1;\n                }\n                lastSentence = i;\n            }\n            i += 1;\n        }\n        return sentenceCount;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int bored = 0;\n        char[] chars = S.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'I' && (chars[i + 1] == ' ' || chars[i + 1] == '.' || chars[i + 1] == '?' || chars[i + 1] == '!' || chars[i + 1] == '\\0')) {\n                bored++;\n            }\n        }\n        return bored;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count=0;\n        String[] arr=S.split(\"[.!?]\");\n        for(int i=0;i<arr.length;i++){\n            if(arr[i].startsWith(\"I\")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        List<String> sentences = Arrays.asList(S.split(\"[\\\\.\\\\?!]\"));\n        long count = 0;\n        for (String sentence: sentences) {\n            if (sentence.startsWith(\"I \")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Arrays.stream(S.split(\"[.!?]\")).mapToInt(line -> line.startsWith(\"I\") ? 1 : 0).sum();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n    long count = 0;\n    for (String i : S.split(\"\\\\.|\\\\?|\\\\!\")) {\n        if (i.startsWith(\"I\")) {\n            count++;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        String[] sentences = S.split(\"[.!?]\");\n        for (String s : sentences) {\n            if (s.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return (long)count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\"[\\\\.\\\\?!]\");\n        for(int i = 0; i < words.length; i++){\n            if(words[i].charAt(0) == 'I'){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // Write your code here\n        String[] arr = S.split(\"[.?!]\");\n        long boredom = 0;\n        for (String sent : arr) {\n            String[] words = sent.split(\"\\\\s\");\n            for (String word : words) {\n                if (word.equals(\"I\")) {\n                    boredom++;\n                    break;\n                }\n            }\n        }\n        return boredom;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        if (S == null || S.length() == 0) {\n            return 0;\n        }\n        long count = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        String[] sentences = S.split(\"[.!?]\");\n        for (String s: sentences) {\n            if (s.split(\" \")[0].equals(\"I\")) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // write your code here\n        return (long) Arrays.stream(S.split(\"[.?!]\")).filter(s -> s.startsWith(\" I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        List<String> s_list = Arrays.asList(S.split(\"[.!?]\"));\n        s_list.stream().forEach(e -> {\n            String[] e_words = e.split(\" \");\n            if(e_words.length != 0 && e_words[0].equals(\"I\")) {\n                count++;\n            }\n        });\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return (long) Arrays.stream(S.split(\"[\\\\?\\\\!]\")).filter(s -> s.startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count=0;\n        String [] sentence=S.split(\"[\\\\.\\\\?\\\\!]\");\n        for(int i=0;i<sentence.length;i++){\n            if(sentence[i].startsWith(\"I \")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        S = S.toLowerCase();\n        String[] sentences = S.split(\"\\\\.|\\\\?|\\\\!\");\n        for (String sentence: sentences) {\n            sentence = sentence.trim();\n            if (!sentence.equals(\"\") && sentence.charAt(0) == 'i') count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // return the number of boredoms.", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Stream.of(S.split(\"\\\\.|\\\\?|!\")).filter(s -> s.startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count=0;\n        char[] c=S.toCharArray();\n        int i=0;\n        while(i<c.length){\n            if(c[i]=='.'||c[i]=='?'||c[i]=='!')\n            {\n                if(i+1<c.length)\n                {\n                    if(c[i+1]=='I')\n                    {\n                        count++;\n                    }\n                }\n            }\n            i++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n    String[] split = S.split(\"[.?!]\");\n    long counter = 0;\n    for(int i = 0; i < split.length; i++){\n      if(split[i].startsWith(\"I\")){\n        counter++;\n      }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        char[] arr = S.toCharArray();\n        String[] str = S.split(\"[.!?]\");\n        for(int i = 0; i < str.length; i++) {\n            if(str[i].charAt(0) == 'I')\n                count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            int index = 0;\n            while (S.charAt(i) != '.') {\n                if (S.charAt(i) == ' ' && S.charAt(i + 1) == 'I') {\n                    count++;\n                }\n                i++;\n            }\n            i++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] lines = S.split(\"[\\\\.\\\\?!]\");\n        return Arrays.stream(lines).filter(line -> line.trim().startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // Write your code here\n        int boredom = 0;\n        for (String str : S.split(\"[.!?]+\")) {\n            String[] split = str.split(\" \");\n            if (split.length >= 2 && split[1].equals(\"I\")) {\n                boredom++;\n            }\n        }\n        return boredom;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        char[] array = S.toCharArray();\n        for(int i = 0; i<array.length; i++){\n            if(array[i] == ' ' && array[i+1] == 'I'){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long n=0;\n        String[] arr=S.split(\"[.|!|?]\");\n        for(String i:arr){\n            if(i.trim().startsWith(\"I\")){\n                n++;\n            }\n        }\n        return n;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        for(String word : S.split(\"[.!?]\")){\n            if(word.startsWith(\"I\")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Arrays.stream(S.split(\"[\\\\.\\\\?!]\")).filter(s -> s.trim().startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        char[] arr = S.toCharArray();\n        for(int i = 0; i < arr.length; i++){\n            if(arr[i] == 'I'){\n                if(arr[i+1] == ' '){\n                    if(arr[i+2] == 'a' || arr[i+2] == 'e' || arr[i+2] == 'i' || arr[i+2] == 'o' || arr[i+2] == 'u'){\n                        count++;\n                    }\n                    else if(arr[i+2] == 's'){\n                        if(arr[i+3] == ' '){\n                            count++;\n                        }\n                    }\n                    else if(arr[i+2] == 't'){\n                        if(arr[i+3] == ' '){\n                            if(arr[i+4] == 'h' || arr[i+4] == 'm'){\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long boredom = 0;\n        for (int i = 0; i < S.length(); i++) {\n            char c = S.charAt(i);\n            if (c == '.' || c == '?' || c == '!') {\n                char[] word = S.substring(i - 5, i).toCharArray();\n                if (word[0] == 'I') {\n                    boredom++;\n                }\n            }\n        }\n        return boredom;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        List<String> words = Arrays.stream(S.split(\"[\\\\.\\\\?\\\\!]\"))\n            .map(str -> str.trim())\n            .filter(str -> !str.isEmpty())\n            .collect(Collectors.toList());\n        return (long) words.stream().filter(s -> s.startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] split = S.split(\"(?<=[.?!])\\\\s*\");\n        long count = 0;\n        for (String s: split) {\n            String[] words = s.split(\"\\\\s+\");\n            if (words[0].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        for(String s : S.split(\"[.!?]\")) {\n            if(s.startsWith(\"I \")) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return S.replaceAll(\"[^.!?]\", \" \").trim().split(\" \").length - 1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n    String[] s = S.split(\"[\\\\.\\\\?!]\");\n    long count = 0;\n    for(String str:s){\n        if(str.contains(\"I\"))\n            count++;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Stream.of(S.split(\"[.!?]\")).filter(e -> e.trim().startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long boredomCount = 0;\n        char[] charArray = S.toCharArray();\n        int i = 0;\n        while (i < charArray.length) {\n            if (charArray[i] == '.') {\n                boredomCount++;\n                while (i < charArray.length && charArray[i] != ' ') {\n                    i++;\n                }\n            } else if (charArray[i] == '?' || charArray[i] == '!') {\n                if (i + 1 < charArray.length && charArray[i + 1] == 'I') {\n                    boredomCount++;\n                }\n                while (i < charArray.length && charArray[i] != ' ') {\n                    i++;\n                }\n            }\n            i++;\n        }\n        return boredomCount;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count=0;\n        String []list=S.split(\"[\\\\.\\\\?!]\");\n        for(String s:list){\n            if(s.trim().startsWith(\"I\")) count++;\n        }\n        return (long)count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        char[] chars = S.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'I') {\n                String str = new String(chars, i, S.length() - i);\n                if ((str.startsWith(\"I\") && str.contains(\".\")) || (str.startsWith(\"I\") && str.contains(\"!\")) || (str.startsWith(\"I\") && str.contains(\"?\"))) {\n                    count++;\n                    break;\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n    long count = 0;\n    String[] words = S.split(\"[.!?]\");\n    for (String s : words) {\n        String[] subwords = s.split(\" \");\n        if (subwords.length == 1 && subwords[0].equals(\"I\")) {\n            count++;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"[.?!]\");\n        return Stream.of(sentences)\n            .filter(s -> s.startsWith(\"I\"))\n            .count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Stream.of(S.split(\"[.!?]\")).filter(p -> p.startsWith(\"I \")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] words = S.split(\"[!?.]\");\n        long count = 0;\n        for (String s : words) {\n            s = s.trim();\n            if (s.startsWith(\"I\") && s.length() > 0) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // Write your code here\n        String[] array = S.split(\"[\\\\.\\\\?!]\");\n        long count = 0;\n        for (int i = 0; i < array.length; i++) {\n            if (array[i].contains(\" I \")) {\n                count += 1;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        S = S.replaceAll(\"[^.!?]+\\\\.\",\".\");\n        String[] sentence = S.split(\"\\\\.|\\\\?|!\");\n        for(String s : sentence){\n            if(s.trim().startsWith(\"I \")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int i = 0;\n        int counter = 0;\n        while (i != -1) {\n            i = S.indexOf(\"I\", i);\n            if (i != -1) {\n                i++;\n                counter++;\n            }\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n    S = S.replaceAll(\"[^\\\\.!?]\", \" \");\n    S = S.replaceAll(\"\\\\.+\", \".\")\n        .replaceAll(\"\\\\?+\", \"?\")\n        .replaceAll(\"!+\", \"!\");\n    long count = 0l;\n    for(String s : S.split(\"[\\\\.!?]\")) {\n        if(s.matches(\"\\\\s*I.*\")) {\n            count++;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        List<String> sentences = new LinkedList<String>();\n        StringTokenizer t = new StringTokenizer(S, \".,?!\");\n        while (t.hasMoreTokens()) sentences.add(t.nextToken());\n        long bored = 0;\n        for (String sentence : sentences) if (sentence.split(\" \")[0].equals(\"I\")) bored++;\n        return bored;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        if (S.length() == 0) {\n            return 0;\n        }\n        return Stream.of(S.split(\"[\\\\.\\\\?!]\")).mapToInt(s -> s.startsWith(\"I\") ? 1 : 0).sum();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        List<String> sentences = new ArrayList<String>();\n        boolean isOpen = true;\n        String subSentence = \"\";\n        for(char c : S.toCharArray()) {\n            if(c == '.' || c == '?' || c == '!') {\n                isOpen = false;\n                sentences.add(subSentence);\n                subSentence = \"\";\n            }\n            if(isOpen)\n                subSentence += c;\n        }\n        if(isOpen)\n            sentences.add(subSentence);\n        return (long)sentences.stream().filter(sentence -> sentence.startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] strs = S.split(\"\\\\.|\\\\?|\\\\!\");\n        for(String str: strs){\n            String[] words = str.split(\"\\\\s+\");\n            if(words.length > 0){\n                if(words[0].equals(\"I\")){\n                    return 1l;\n                }\n            }\n        }\n        return 0l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        int flag = 0;\n        int wordCounter = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if(S.charAt(i) == '.'){\n                flag = 0;\n                wordCounter = 0;\n            }\n            if(S.charAt(i) == '!' || S.charAt(i) == '?'){\n                flag = 0;\n                wordCounter = 0;\n            }\n            if(S.charAt(i) == ' '){\n                wordCounter++;\n            }\n            if(wordCounter == 2 && flag == 0){\n                count++;\n                flag = 1;\n                wordCounter = 0;\n            }\n            if(S.charAt(i) == 'I'){\n                wordCounter = 2;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Arrays.stream(S.split(\"[\\\\.\\\\?!]\")).filter(e -> e.contains(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        S = S.replace(\".\", \" \");\n        S = S.replace(\"?\", \" \");\n        S = S.replace(\"!\", \" \");\n        String[] parts = S.split(\" \");\n        int count = 0;\n        for (int i = 0; i < parts.length; i++) {\n            if (parts[i].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n    return 0l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        for (String s : S.split(\"[.!?]\")) {\n            if (s.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        int index = 0;\n        char ch;\n        for (int i = 0; i < S.length(); i++) {\n            ch = S.charAt(i);\n            if (ch == '.' || ch == '!' || ch == '?') {\n                index = i;\n                break;\n            }\n        }\n        S = S.substring(index);\n        for (int i = 0; i < S.length(); i++) {\n            ch = S.charAt(i);\n            if (ch == 'I') {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n    String [] splited = S.split(\"[\\\\.\\\\?!]\");\n    long count = 0;\n    for(String sentence : splited)\n    {\n      if(sentence.startsWith(\"I\"))\n        count++;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        S=S.replaceAll(\"\\\\.\",\" \").replaceAll(\"\\\\?\",\" \").replaceAll(\"\\\\!\",\" \");\n        String[] ss=S.split(\" \");\n        int count=0;\n        for(int i=0;i<ss.length;i++){\n            if(ss[i].equals(\"I\")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Arrays.stream(S.split(\"[.?!]\")).filter(s -> s.trim().startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        char[] punct = {'.', '!', '?', '\"', '\\'', '`', '\\n', '\\t', '\\b'};\n        String[] sentences = S.split(\"\\\\.|\\\\!|\\\\?\");\n        for (int i = 0; i < sentences.length; i++)\n            sentences[i] = sentences[i].trim();\n        int numBored = 0;\n        for (int i = 0; i < sentences.length; i++)\n            if (sentences[i].split(\" \")[0].equals(\"I\"))\n                numBored++;\n        return numBored;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] arr = S.split(\"\\\\.|\\\\?|\\\\!\");\n        long result = 0;\n        for(String s : arr){\n            if(s.trim().startsWith(\"I\")){\n                result++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] parts = S.split(\"[.?!]\");\n        int count = 0;\n        for(String part : parts){\n            if(part.trim().startsWith(\"I\")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] S1 = S.split(\"\\\\.|\\\\?|!\");\n        long count = 0;\n        for(String s : S1) {\n            if(s.trim().startsWith(\"I\")) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Arrays.stream(S.split(\"[.?!]\")).filter(x -> x.trim().startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] words = S.split(\"[.?!]\");\n        return Arrays.stream(words).filter(s->s.startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // Write your code here\n        long count=0;\n        char[] ar=S.toCharArray();\n        int n=S.length();\n        for(int i=0;i<n;i++)\n        {\n            if(ar[i]=='I')\n            {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        for(String sentence : sentences) {\n            sentence = sentence.trim();\n            if(sentence.startsWith(\"I\")) count += 1;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        List<String> list = Arrays.stream(S.split(\"[!?.]\"))\n                                  .filter(str -> !str.trim().isEmpty())\n                                  .collect(Collectors.toList());\n        long cnt = 0;\n        for (String s : list) {\n            if (s.trim().startsWith(\"I\")) {\n                cnt++;\n            }\n        }\n        return cnt;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n    String[] splitted = S.split(\"[\\\\.\\\\?!] \");\n    return Arrays.stream(splitted).filter(s -> s.startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return S.length() > 0 && (S.charAt(0) == 'I') ? 1 : 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n    String[] splitSentences = S.split(\"[.?!]\");\n    int boredCount = 0;\n    for (String sentence : splitSentences) {\n        if (sentence.startsWith(\"I\")) {\n            boredCount++;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // Write your code here\n        long count = 0;\n        for(int i = 0; i < S.length(); i++){\n            if(S.charAt(i) == 'I'){\n                if(S.charAt(i-1) == '.' || S.charAt(i-1) == '?' || S.charAt(i-1) == '!'){\n                    count++;\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"[\\\\.\\\\?\\\\!]\");\n        long count = 0;\n        for(String sentence : sentences) {\n            for(String word : sentence.split(\" \")) {\n                if(word.equals(\"I\")) {\n                    count++;\n                    break;\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Stream.of(S.split(\"[.?!]\")).filter(e -> e.startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentence = S.split(\"\\\\.|\\\\?|\\\\!\");\n        int counter = 0;\n        for (String s : sentence) {\n            if (s.startsWith(\"I\")) counter++;\n        }\n        return (long) counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return S.length()>3?S.replaceAll(\"[^.!?]\",\" \").replaceAll(\" +\",\" \").split(\"\\\\s+\").length:0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"[.?!]\");\n        long count = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count=0;\n        // To split the given string\n        String[] sub = S.split(\"[.?!]\");\n        // To iterate the splited string array\n        for(String x:sub){\n            // To extract the first word of each splited string\n            String[] sub2 = x.split(\" \");\n            // To compare the first word of each splited string to \"I\"\n            if(sub2[0].equals(\"I\"))\n                // To increase the count by 1\n                count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // Implement this function here\n        // After calling isBored(\"...\") on your implementation, you should get\n        // 1l, 2l, 2l, 0l, 1l, 0l, 1l, 3l, 0l, 1l, 0l, 0l, 1l.\n        long count = 0;\n        S = S.replaceAll(\"[^A-Za-z0-9,\\\\.]+\",\"\");\n        String[] words = S.split(\"[\\\\.]\");\n        for (String sentence : words)\n        {\n            String[] w = sentence.split(\" \");\n            if(w.length > 0 && w[0].equals(\"I\"))\n                count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Stream.of(S.split(\"[.?!]\")).filter(p -> p.startsWith(\"I \")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0, i;\n        for (i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n            if (S.charAt(i) == '.') {\n                break;\n            }\n            if (S.charAt(i) == '?') {\n                break;\n            }\n            if (S.charAt(i) == '!') {\n                break;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        String[] s = S.split(\"[.?!]\");\n        for (String w : s) {\n            String[] w2 = w.split(\" \");\n            if (w2.length == 1 && w2[0].equals(\"I\"))\n                count++;\n        }\n        return (long) count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // Complete this function\n        return S.split(\"\\\\.|\\\\?|!\").stream().filter(x -> x.startsWith(\"I \")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] words = S.split(\"[.?!]\");\n        long boredom = 0;\n        for(int i = 0; i < words.length; i++) {\n            if(words[i].split(\" \")[0].equals(\"I\")) {\n                boredom++;\n            }\n        }\n        return boredom;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // Write your code here\n        int count = 0;\n        char[] chars = S.toCharArray();\n        boolean bored = false;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'I') {\n                if (bored) {\n                    count++;\n                }\n                bored = true;\n            } else if (chars[i] == '.' || chars[i] == '?' || chars[i] == '!') {\n                bored = false;\n            }\n        }\n        return (long) count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        String[] tokens = S.split(\"[.!?]\");\n        for (int i = 0; i < tokens.length; i++) {\n            String sentence = tokens[i].trim();\n            String[] words = sentence.split(\" \");\n            if (words[0].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        char[] arr = S.toCharArray();\n        StringBuffer sb = new StringBuffer();\n        int count = 0;\n        for(int i=0;i<arr.length;i++) {\n            if(arr[i] != '.') {\n                sb.append(arr[i]);\n            }\n            else {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"[\\\\.\\\\?\\\\!]\");\n        long count = 0;\n        for (String sentence : sentences)\n            count += sentence.startsWith(\"I\") ? 1 : 0;\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        int i = 0;\n        while(i < S.length()){\n            if(S.charAt(i) == 'I'){\n                count++;\n            }\n            if(S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i) == '!'){\n                count = 0;\n            }\n            i++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        String[] split = S.split(\"[?!.]+\");\n        for (String s : split) {\n            if (s.split(\" \")[0].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Arrays.stream(S.split(\"[.?!]\")).filter(s -> s.startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return S.chars()\n            .filter(c -> c == '.' || c == '?' || c == '!')\n            .mapToObj(c -> S.substring(0, S.indexOf(c)))\n            .filter(s -> s.trim().startsWith(\"I\"))\n            .count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        for(String word: S.split(\"[\\\\.\\\\?!]\")){\n            if(word.length()>0)\n                if(word.split(\" \")[0].equals(\"I\"))\n                    count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long boredomCounter = 0;\n        String[] splitString = S.split(\"[\\\\.\\\\?\\\\!]\");\n        for (String x : splitString)\n            if (x.trim().startsWith(\"I\"))\n                boredomCounter++;\n        return boredomCounter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] words = S.split(\"[.?!]\");\n        List<String> lines = Arrays.asList(words);\n        long bored = 0;\n        for (String word: lines) {\n            if (word.startsWith(\"I\")) bored++;\n        }\n        return bored;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return S.replaceAll(\"[^\\\\.\\\\?!]\", \"\").length() - S.replaceAll(\"[^\\\\.]\", \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        String[] str = S.split(\"\\\\.|\\\\?|\\\\!\");\n        for(String x : str){\n            if(x.startsWith(\"I\")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long result = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        for(String sentence : sentences){\n            if(sentence.contains(\"I\")){\n                result++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|\\\\!\");\n        return Stream.of(sentences).filter(s -> s.startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return S.replaceAll(\"[^.!?]\", \" \").replaceAll(\"\\\\s+\", \" \").replaceAll(\"\\\\s.+\", \" \").length() - 1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|\\\\!\");\n        long count = 0;\n        for(String sentence : sentences) {\n            String[] words = sentence.split(\"\\\\s+\");\n            for(String word : words) {\n                if(word.equals(\"I\")) count += 1;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count=0;\n        String[] arr=S.split(\"[\\\\.\\\\?!]\");\n        for(String i:arr){\n            if(i.startsWith(\"I\")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] s = S.split(\"[?!]\");\n        return Stream.of(s).filter(x -> x.split(\" \")[0].equals(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        int len = S.length();\n        char[] c = S.toCharArray();\n        for(int i = 0; i < len; i++){\n            if(c[i] == 'I'){\n                boolean found = false;\n                for(int j = i; j < len; j++){\n                    if(c[j] == '.' || c[j] == '?' || c[j] == '!'){\n                        found = true;\n                        break;\n                    }\n                }\n                if(found)\n                    count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Stream.of(S.split(\"[.?!]\")).mapToLong(s -> s.startsWith(\"I\") ? 1 : 0).sum();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        char[] a = S.toCharArray();\n        int count=0,i=0;\n        while(i<a.length){\n            while(i<a.length && a[i]!='.' && a[i]!='?' && a[i]!='!'){\n                i++;\n            }\n            if(a[i]!='.'){\n                count++;\n            }\n            while(a[i]=='.' || a[i]=='?' || a[i]=='!'){\n                i++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        int boredom = 0;\n        char[] sentence = S.toCharArray();\n        for(int i = 0; i < sentence.length; i++){\n            if(sentence[i] == '.'){\n                count = 0;\n                continue;\n            }\n            if(sentence[i] == '!' || sentence[i] == '?'){\n                count = 0;\n            }\n            if(sentence[i] == 'I'){\n                count++;\n            }\n            else{\n                count = 0;\n            }\n            if(count == 1){\n                boredom++;\n            }\n        }\n        return boredom;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        List<String> sentences = Arrays.asList(S.split(\"[\\\\.|\\\\?|\\\\!]\"));\n        return sentences.stream().filter(sentence -> sentence.trim().startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count=0;\n        String[] str=S.split(\"[\\\\.!?]\");\n        for(String x:str){\n            if(x.startsWith(\"I\")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        List<String> sentences = Arrays.asList(S.split(\"[\\\\.!?]\"));\n        long count = 0;\n        for (String sentence : sentences) {\n            if (sentence.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        String[] str = S.split(\"\\\\.|\\\\?|\\\\!\");\n        for(int i = 0; i < str.length; i++) {\n            if(str[i].trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long ans = 0;\n        int i = 0;\n        while(i != -1){\n            i = S.indexOf(\"I \", i + 1);\n            if(i != -1) ans++;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"[\\\\.\\\\?!]\");\n        return (long) Arrays.stream(sentences).filter(sentence -> sentence.trim().startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        char[] ca = S.toCharArray();\n        int count = 0;\n        int wordIndex = 0;\n        for(int i = 0; i < ca.length; i++){\n            if(ca[i] == '.' || ca[i] == '!' || ca[i] == '?'){\n                if(wordIndex >= 3){\n                    if(ca[wordIndex-3] == 'I'){\n                        count++;\n                    }\n                }\n                wordIndex = 0;\n            }\n            else if(ca[i] != ' '){\n                wordIndex++;\n            }\n        }\n        return (long)count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Stream.of(S.split(\"[.?!]\")).filter(s -> s.contains(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        char[] ch = S.toCharArray();\n        int i = 0;\n        int n = ch.length;\n        while (i < n) {\n            while (i < n && ch[i] != '.' && ch[i] != '?' && ch[i] != '!') {\n                ++i;\n            }\n            if (i < n && ch[i] == '.') {\n                ++i;\n                if (i < n && ch[i] == 'I') {\n                    count++;\n                }\n            }\n            ++i;\n        }\n        return (long) count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long boredom = 0;\n        String[] sentences = S.split(\"[.?!] \");\n        for(String sentence : sentences){\n            sentence = sentence.trim();\n            if(sentence.startsWith(\"I\")){\n                boredom++;\n            }\n        }\n        return boredom;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // write here", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long c = 0;\n        for(String i : S.split(\"[.?!]\")){\n            String j = i.trim();\n            if(j.startsWith(\"I\")) c++;\n        }\n        return c;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        if (S.length() > 1){\n            for (int i = 0; i < S.length() - 1; i++) {\n                char c = S.charAt(i);\n                char d = S.charAt(i + 1);\n                if (c == 'I' && (d == '.' || d == '!' || d == '?')) count += 1;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        for (String s : S.split(\"[.?!]\")) {\n            if (s.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return (long) S.split(\"[.!?]\").length - S.split(\"[.!?] I \").length;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        char[] cs = S.toCharArray();\n        int count = 0;\n        for(int i = 0; i < cs.length; ++i) {\n            if(cs[i] == '.' || cs[i] == '?' || cs[i] == '!') {\n                if(i > 2 && cs[i - 2] == ' ' && cs[i - 1] == 'I') count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // Write your code here.\n        long count = 0;\n        char ender = ' ';\n        for(int i = 0; i < S.length(); i++){\n            char c = S.charAt(i);\n            if(c == '.'){\n                ender = '.';\n                count++;\n            }else if(c == '?'){\n                ender = '?';\n                count++;\n            }else if(c == '!'){\n                ender = '!';\n                count++;\n            }else if(c == 'I'){\n                if(S.charAt(i-1) == ' '){\n                    count++;\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        for(int i = 0; i < S.length(); i++) {\n            if(S.charAt(i) == 'I' && (S.charAt(i+1) == ' ' || S.charAt(i+1) == '.' || S.charAt(i+1) == '!' || S.charAt(i+1) == '?')) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"[.?!]\");\n        return Arrays.stream(sentences).filter(x -> x.startsWith(\"I\")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Arrays.stream(S.split(\"[\\\\.\\\\?!]\")).filter(s->s.startsWith(\"I \")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                String sentence = \"\";\n                int j = i;\n                while (S.charAt(j) != '.') {\n                    sentence = sentence + S.charAt(j);\n                    j++;\n                }\n                if (sentence.contains(\"love\") || sentence.contains(\"good\") || sentence.contains(\"happy\")) {\n                    count++;\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] words = S.split(\"[.?!]\");\n        long count = 0;\n        for (String word : words)\n        {\n            word = word.trim();\n            if (word.startsWith(\"I\"))\n            {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] sentences = S.split(\"[\\\\.\\\\?\\\\!]\");\n        long count = 0;\n        for (String sentence : sentences) {\n            if (sentence.length() == 0) {\n                continue;\n            }\n            if (sentence.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] words = S.split(\"[^\\\\w]+\");\n        int n = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"I\")) {\n                n++;\n            }\n        }\n        return n;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] split = S.split(\"\\\\.|\\\\?|!\");\n        long counter = 0;\n        for (String s : split) {\n            if (s.startsWith(\"I\"))\n                counter++;\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String[] splited = S.split(\"[.!?]\");\n        long count = 0;\n        for (String s : splited) {\n            if (s.contains(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        int count = 0;\n        int sentence_count = 1;\n        String[] sentence_array = S.split(\"[.!?]+\");\n        for (int i = 0; i < sentence_array.length; i++) {\n            String[] tokens = sentence_array[i].split(\" \");\n            if (tokens[0].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        // Write your code here\n        int count = 0;\n        String[] str = S.split(\"[.?!]\");\n        for(int i=0;i<str.length;i++)\n        {\n            String[] s = str[i].split(\" \");\n            if(s[0].equals(\"I\"))\n            {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        return Arrays.stream(S.split(\"[.?!]\")).filter(s -> s.trim().startsWith(\"I \")).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        S = S + \".\";\n        String[] sentences = S.split(\"\\\\.|\\\\?|\\\\!\");\n        long count = 0;\n        for(int i = 0; i < sentences.length; i++) {\n            if(sentences[i].contains(\"I\")) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        String [] s = S.split(\"\\\\.|\\\\?|!\");\n        long count = 0;\n        for(int i=0;i<s.length;i++){\n            if(s[i].trim().startsWith(\"I\")){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        for(String s : sentences)\n            if(s.startsWith(\"I\"))\n                count++;\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n        long count = 0;\n        boolean isI = false;\n        for(char c : S.toCharArray()) {\n            if(c == 'I') {\n                isI = true;\n            }\n            else if(c == '.' || c == '?' || c == '!' || c == '\\n') {\n                if(isI) count++;\n                isI = false;\n            }\n        }\n        return count;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Map<Long,Integer> sumToCount = new HashMap<Long,Integer>();\n        for(Long i: l){\n            long sum = 0l - i;\n            if(sumToCount.get(sum) != null){\n                return true;\n            }\n            sumToCount.put(i,1);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        Set<Long> s = new HashSet<Long>(l);\n        return s.size() < l.size();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> seen = new HashSet<Long>();\n        for (long n : l) {\n            if (seen.contains(n)) {\n                return true;\n            } else {\n                seen.add(-n);\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean out0 = false;\n        HashSet<Long> seen = new HashSet<Long>();\n        for (long element : l) {\n            if (seen.contains(new Long(0 - element))) {\n                return true;\n            }\n            seen.add(element);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // if the array is empty, return false.\n        if (l.size() == 0) {\n            return false;\n        }\n        // make a hashset.\n        HashSet<Long> seen = new HashSet<Long>();\n        // for each element in the array.\n        for (int i = 0; i < l.size(); i++) {\n            // if the element has not been seen before.\n            if (!seen.contains(l.get(i))) {\n                // get the value that completes the pair.\n                long val = -l.get(i);\n                // if the hashset contains the value.\n                if (seen.contains(val)) {\n                    // return true.\n                    return true;\n                }\n                // otherwise, add the element to the hashset.\n                else {\n                    seen.add(l.get(i));\n                }\n            }\n        }\n        // return false.\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<>();\n        for (Long i : l) {\n            set.add(i);\n        }\n        for (Long i : l) {\n            if (set.contains(-i)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        else if (l.size() == 2) {\n            return (l.get(0).intValue() + l.get(1).intValue() == 0);\n        }\n        else {\n            // for each element in the list\n            for (int i = 0; i < l.size(); i++) {\n                // for each element following the first element\n                for (int j = i + 1; j < l.size(); j++) {\n                    // if sum of elements is zero\n                    if (l.get(i).intValue() + l.get(j).intValue() == 0) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (long x : l) {\n            for (long y : l) {\n                if (x == y) continue;\n                if (x + y == 0) return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        //return true iff list has length greater than 1 and for some i, j l[i] + l[j] == 0\n        return l.size() > 1 && l.stream().anyMatch( x -> l.stream().anyMatch( y -> x + y == 0) && x != y);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return false;\n        }\n        HashSet<Long> set = new HashSet<>();\n        for (long element : l) {\n            if (set.contains(-element)) {\n                return true;\n            }\n            set.add(element);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // The idea is to create a map with the possible addends as keys\n        // and the number of times they occur as values. \n        // Then, for each element in the array list, check if its addend is in the\n        // map. If it is, return true. If not, add it to the map. \n        // If at the end, the map is empty, return false.\n        HashMap<Long, Long> occ = new HashMap<Long, Long>();\n        boolean found = false;\n        for (long i : l) {\n            long possible = -i;\n            if (occ.containsKey(possible)) {\n                return true;\n            } else {\n                occ.put(i, 1L);\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashMap<Long, Integer> map = new HashMap<>();\n        for (Long i : l) {\n            if (map.containsKey(i)) {\n                return true;\n            } else {\n                map.put(-i, 1);\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // We'll make an array of booleans, and use the values of the array\n        // to indicate whether or not a number has already appeared in the\n        // array list. The idea is to loop over the array list, checking for\n        // every value whether or not it has already appeared in the array\n        // list, and if not, whether or not its complement has. If either\n        // occur, return true.\n        boolean[] vals = new boolean[l.size()];\n        for (Long i : l) {\n            // If a number has already appeared in the array list, skip it.\n            if (vals[i]) continue;\n            // Otherwise, check if a number that's the complement of i appears in the list.\n            if (vals[(-1 * i)]) return true;\n            // If not, mark the value as appearing in the list.\n            vals[i] = true;\n        }\n        // If we reach here, then no two numbers in the array list sum to zero.\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() == 1) return false;\n        else if (l.size() == 2) return l.get(0) + l.get(1) == 0;\n        else {\n            ArrayList<Long> list = new ArrayList<Long>();\n            for (int i = 0; i < l.size() - 1; i++) {\n                for (int j = i + 1; j < l.size(); j++) {\n                    if (l.get(i) + l.get(j) == 0) {\n                        list.add(i);\n                        list.add(j);\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // PSEUDOCODE\n        // start with a hash set to hold values seen so far\n        HashSet<Long> seen = new HashSet<Long>();\n        // iterate over the array list\n        for (long i : l) {\n            // if the value is negative, and the negative value has been seen before, return true\n            if (seen.contains(-i)) {\n                return true;\n            }\n            // otherwise, add it to the set of seen values\n            else {\n                seen.add(i);\n            }\n        }\n        // if we've made it to the end of the array list without returning true,\n        // then we know that no two values sum to zero, so return false\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean hasPairSumToZero = false;\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = 0; j < l.size(); j++) {\n                if (i == j)\n                    continue;\n                if (l.get(i).equals(l.get(j)))\n                    continue;\n                if (l.get(i) + l.get(j) == 0) {\n                    hasPairSumToZero = true;\n                }\n            }\n        }\n        return hasPairSumToZero;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashMap<Long, Integer> h = new HashMap<>();\n        for (Long i: l)\n            h.put(i, h.getOrDefault(i, 0) + 1);\n        for (Long i: l) {\n            if (h.containsKey(i) && h.get(i) > 1 && h.containsKey(-i) && h.get(-i) > 1)\n                return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        HashSet<Long> st = new HashSet<Long>();\n        for (int i = 0; i < l.size(); i++) {\n            if (st.contains(l.get(i))) {\n                return true;\n            }\n            st.add(0l - l.get(i));\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if(l.size() == 1) {\n            return false;\n        }\n        HashMap<Long, Boolean> map = new HashMap<Long, Boolean>();\n        for(long n : l) {\n            if(map.get(n) == null) {\n                map.put(n, false);\n            }\n        }\n        for(long n : l) {\n            if(map.get(n) == null) {\n                map.put(n, false);\n            }\n            if(map.get(-1 * n) != null) {\n                map.put(n, true);\n            }\n        }\n        return map.values().contains(true);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        ArrayList<Pair<Long, Long>> pairs = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                pairs.add(new Pair<Long, Long>(l.get(i), l.get(j)));\n            }\n        }\n        boolean flag = false;\n        for (Pair<Long, Long> pair : pairs) {\n            if (pair.getValue0() + pair.getValue1() == 0) {\n                flag = true;\n                break;\n            }\n        }\n        return flag;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // write your code here\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> hash = new HashSet<>();\n        for (Long i : l) {\n            if (hash.contains(i * -1)) {\n                return true;\n            }\n            hash.add(i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() <= 1)\n            return false;\n        l.sort(null);\n        Long first = l.get(0);\n        Long second = l.get(1);\n        if (first + second == 0)\n            return true;\n        if (first + second < 0) {\n            for (int i = 1; i < l.size(); i++) {\n                first = l.get(i);\n                if (l.get(l.size() - 1) + first == 0)\n                    return true;\n            }\n            return false;\n        }\n        else {\n            for (int i = l.size() - 2; i >= 0; i--) {\n                second = l.get(i);\n                if (first + second == 0)\n                    return true;\n            }\n            return false;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<>();\n        for (Long i : l) {\n            set.add(i);\n        }\n        for (Long i : l) {\n            if (set.contains(new Long(0 - i))) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean found = false;\n        Set<Long> s = new HashSet<>();\n        for (long i : l) {\n            if (s.contains(-i)) {\n                found = true;\n            }\n            s.add(i);\n        }\n        return found;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        ArrayList<Long> copy = new ArrayList<Long>(l);\n        copy.removeIf(n -> n == 0);\n        if (copy.size() < 2) {\n            return false;\n        }\n        HashMap<Long, Boolean> h = new HashMap<Long, Boolean>();\n        for (Long n : copy) {\n            if (h.containsKey(n)) {\n                return true;\n            }\n            else {\n                h.put(n, true);\n            }\n        }\n        HashMap<Long, Boolean> h2 = new HashMap<Long, Boolean>();\n        for (Long n : copy) {\n            h2.put(-n, true);\n        }\n        for (Long n : copy) {\n            if (h2.containsKey(n)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<Long>();\n        for(Long x : l) {\n            if(set.contains(x)) {\n                return true;\n            }\n            set.add(0 - x);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<Long>();\n        for (Long a : l) {\n            if (s.contains(-a)) {\n                return true;\n            }\n            s.add(a);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<>();\n        for (long e : l) {\n            if (s.contains(-e)) {\n                return true;\n            } else {\n                s.add(e);\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        l.sort(null);\n        ArrayList<Long> negatives = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n            Long n = l.get(i);\n            if (n < 0) {\n                negatives.add(n);\n            }\n        }\n        for (int i = 0; i < negatives.size(); i++) {\n            Long negative = negatives.get(i);\n            long target = -negative;\n            int targetIndex = Collections.binarySearch(l, target);\n            if (targetIndex >= 0) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if(l.size() <= 1){return false;}\n        l.sort(Collections.reverseOrder());\n        int i = 0;\n        while(i < l.size() - 1){\n            int j = i + 1;\n            while(j < l.size() && (l.get(i) + l.get(j)) != 0){\n                j++;\n            }\n            if(j == l.size()){\n                i++;\n            }\n            else {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Map<Long,Long> mp = new HashMap<>();\n        for (Long i : l) {\n            if (mp.containsKey(i)) {\n                return true;\n            }\n            mp.put(i,i);\n        }\n        for (Long i : l) {\n            if (mp.containsKey(-i)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if(l.size() < 2) {\n            return false;\n        }\n        HashSet<Long> set = new HashSet<Long>();\n        for(Long elem : l) {\n            if(set.contains(-elem)) {\n                return true;\n            }\n            set.add(elem);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> numbers = new HashSet<>(l);\n        boolean found = false;\n        for (int i = 0; i < l.size(); i++) {\n            if (numbers.contains((long)l.get(i) * -1)) {\n                found = true;\n                break;\n            }\n        }\n        return found;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // If there are fewer than two elements in the list, return false.\n        if(l.size() < 2)\n            return false;\n        // Sort the list into ascending order.\n        Collections.sort(l);\n        // If the first element of the list is negative, set negative to true.\n        boolean negative = false;\n        if(l.get(0) < 0)\n            negative = true;\n        // Initialize two iterators, one for the front of the list, and one for\n        // the back.\n        int i = 0;\n        int j = l.size()-1;\n        // If there are only two elements in the list, check to see if the sum of\n        // these two elements is zero.\n        if(l.size() == 2)\n            return l.get(0) + l.get(1) == 0;\n        // If the first element of the list is positive and the last element is\n        // negative, return true.\n        if(!negative && l.get(l.size()-1) < 0)\n            return true;\n        // If the first element of the list is negative and the last element is\n        // positive, return true.\n        if(negative && l.get(l.size()-1) > 0)\n            return true;\n        // For each of the first and last elements of the list...\n        while(i < l.size() && j >= 0) {\n            // If the sum of the two elements is zero, return true.\n            if(l.get(i) + l.get(j) == 0)\n                return true;\n            // Otherwise, if the first element is less than zero, increment the\n            // first iterator.\n            if(l.get(i) < 0)\n                i++;\n            // Otherwise, if the first element is greater than zero, decrement the\n            // last iterator.\n            else\n                j--;\n        }\n        // If none of the elements in the list sum to zero, return false.\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // Write your code here\n        HashSet<Long> set = new HashSet<Long>(l);\n        for (long i : l) {\n            if (set.contains(-i)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<>(l);\n        if (set.size() < 2)\n            return false;\n        Iterator<Long> i = set.iterator();\n        Long first = i.next();\n        while (i.hasNext()) {\n            Long second = i.next();\n            if ((first + second) == 0)\n                return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        return new HashSet<Long>(l.stream().map(n -> -n).collect(Collectors.toList())).contains(new HashSet<Long>(l).stream().reduce(0l, (a, b) -> a + b));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> seen = new HashSet<Long>();\n        for (Long a : l) {\n            if (seen.contains(a)) {\n                return true;\n            }\n            seen.add(a);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<Long>(l);\n        for(Long a : l) {\n            for(Long b : l) {\n                if (set.contains(-a-b) && a != b) {\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // method 1: n**2 (worst case)\n        // for(int i = 0; i < l.size(); i++) {\n        //     for(int j = i+1; j < l.size(); j++) {\n        //         if(l.get(i) + l.get(j) == 0) {\n        //             return true;\n        //         }\n        //     }\n        // }\n        // return false;\n        // method 2: nlogn (average case)\n        // l.sort(new Comparator<Long>() {\n        //     @Override\n        //     public int compare(Long a, Long b) {\n        //         return a.compareTo(b);\n        //     }\n        // });\n        // for(int i = 0; i < l.size(); i++) {\n        //     for(int j = i+1; j < l.size(); j++) {\n        //         if(l.get(i) + l.get(j) == 0) {\n        //             return true;\n        //         }\n        //     }\n        // }\n        // return false;\n        // method 3: n (average case)\n        HashMap<Long, Long> hashMap = new HashMap<Long, Long>();\n        for(long i : l) {\n            if(hashMap.containsKey(-1 * i)) {\n                return true;\n            }\n            hashMap.put(i, i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<Long>(l);\n        set.remove(new Long(0));\n        for(long a: set) {\n            long b = -a;\n            if(set.contains(b)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if(l.size() < 2) return false;\n        HashSet<Long> hs = new HashSet<Long>(l);\n        boolean b = false;\n        for(Long i : l) {\n            if(hs.contains(-i)) {\n                b = true;\n                break;\n            }\n        }\n        return b;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // check for two pairs\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<>(l);\n        for (Long i : set) {\n            if (set.contains(i * -1l)) return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashMap<Long, Long> f = new HashMap<Long, Long>();\n        for (int i = 0; i < l.size(); i++) {\n            Long k = l.get(i);\n            if (f.containsKey(k)) {\n                return true;\n            }\n            f.put(k, i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<Long>(l);\n        ArrayList<Long> temp = new ArrayList<Long>();\n        ArrayList<Long> temp2 = new ArrayList<Long>();\n        for(int i = 0; i < set.size(); i++) {\n            temp.add((long)0l - set.get(i));\n        }\n        boolean flag = false;\n        for(int i = 0; i < l.size(); i++) {\n            if(temp.contains(l.get(i))) {\n                temp2.add(l.get(i));\n                flag = true;\n            }\n        }\n        return flag;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // search\n        boolean found_pair = false;\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i+1; j < l.size(); j++) {\n                if ((l.get(i) + l.get(j)) == 0) {\n                    found_pair = true;\n                }\n            }\n        }\n        return found_pair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        ArrayList<Long> copy = new ArrayList<>(l);\n        ArrayList<Long> uniqueElements = new ArrayList<>();\n        for (Long x : copy) {\n            if (uniqueElements.contains(x)) {\n                uniqueElements.remove(x);\n            } else {\n                uniqueElements.add(x);\n            }\n        }\n        ArrayList<Tuple<Long, Long>> sums = new ArrayList<>();\n        for (int i = 0; i < uniqueElements.size(); i++) {\n            for (int j = 0; j < uniqueElements.size(); j++) {\n                sums.add(new Tuple<>(uniqueElements.get(i), uniqueElements.get(j)));\n            }\n        }\n        for (Tuple<Long, Long> t : sums) {\n            if (t.getValue0().equals(t.getValue1())) {\n                if (sums.indexOf(t) == sums.lastIndexOf(t)) {\n                    sums.remove(t);\n                }\n            }\n        }\n        for (Tuple<Long, Long> t : sums) {\n            if (t.getValue0().equals(0l - t.getValue1())) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() < 2)\n            return false;\n        Map<Long, Long> sumToIndexMap = new HashMap<Long, Long>();\n        for (int i = 0; i < l.size(); i++) {\n            Long current = l.get(i);\n            if (sumToIndexMap.get(current) != null)\n                return true;\n            sumToIndexMap.put(-current, (long)i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i).equals(l.get(j)))\n                    continue;\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> l1 = new HashSet<>(l);\n        for (long e: l) {\n            long e1 = -1 * e;\n            if (l1.contains(e1)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // throw new UnsupportedOperationException();\n        Map<Long,Boolean> seen = new HashMap<Long,Boolean>();\n        for (int i=0; i<l.size(); i++) {\n            if (seen.containsKey(l.get(i))) return true;\n            seen.put(l.get(i), true);\n        }\n        for (int i=0; i<l.size(); i++) {\n            long a = l.get(i);\n            for (int j=0; j<l.size(); j++) {\n                long b = l.get(j);\n                if (a + b == 0 && i != j) {\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return false;\n        }\n        Set<Long> s = new HashSet<Long>(l);\n        for (Long item : s) {\n            if (s.contains(-item)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<Long>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i; j < l.size(); j++) {\n                if (l.get(i) != l.get(j) && l.get(i) + l.get(j) == 0) {\n                    set.add(l.get(i));\n                    set.add(l.get(j));\n                }\n            }\n        }\n        return set.size() == 2;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> has = new HashSet<Long>();\n        has.addAll(l);\n        for(int i=0; i < l.size(); i++){\n            Long a = l.get(i);\n            for(int j=i+1; j < l.size(); j++){\n                Long b = l.get(j);\n                if(a+b==0){\n                    has.remove(a);\n                    has.remove(b);\n                }\n            }\n        }\n        return has.size()!=l.size();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (long i : l) {\n            for (long j : l) {\n                if (j != i && i + j == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> s = new HashSet<Long>();\n        for (long n : l) {\n            if (s.contains(-n)) {\n                return true;\n            }\n            s.add(n);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // Initialise map\n        HashMap<Long, Long> map = new HashMap<Long, Long>();\n\n        // Iterate through list\n        for (long item: l) {\n            // If map contains item, return true.\n            if (map.containsKey(item)) {\n                return true;\n            }\n            else {\n                // Otherwise, store item - 0 as a key, item as the value in the map.\n                map.put(item - 0, item);\n            }\n        }\n\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n        for (Long num: l) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1);\n            }\n        }\n        for (Long num: l) {\n            if (map.containsKey(num)) {\n                if (map.get(num) > 1) {\n                    map.put(num, map.get(num) - 1);\n                    return true;\n                }\n            }\n            Long i = 0l - num;\n            if (map.containsKey(i)) {\n                if (map.get(i) > 0) {\n                    map.put(i, map.get(i) - 1);\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if(l.size() == 1) {\n            return false;\n        }\n        HashSet<Long> hs = new HashSet<>(l);\n        if(hs.size() == 1) {\n            return false;\n        }\n        long sum = 0;\n        for(long e : l) {\n            if(!hs.remove(sum - e)) {\n                continue;\n            }\n            return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // use a hash table to keep track of seen numbers\n        HashMap<Long, Boolean> hm = new HashMap<Long, Boolean>();\n        for (long i : l) {\n            if (hm.containsKey(i)) return true;\n            else hm.put(i, true);\n        }\n        for (long i : l) {\n            long j = -1 * i;\n            if (hm.containsKey(j)) return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (Long a : l) {\n            for (Long b : l) {\n                if (l.indexOf(b) != l.indexOf(a) && a + b == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return false;\n        }\n        HashSet<Long> numbers = new HashSet<Long>();\n        for (int i = 0; i < l.size(); i += 1) {\n            if (numbers.contains(-l.get(i))) {\n                return true;\n            }\n            numbers.add(l.get(i));\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<>();\n        for (Long el : l) {\n            if (set.contains(-el)) {\n                return true;\n            } else {\n                set.add(el);\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<Long>();\n        for (Long i : l) {\n            if (!s.add(i)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (Long a : l) {\n            for (Long b : l) {\n                if ((a + b) == 0 && a != b) {\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // no pairs\n        if (l.size() <= 1) return false;\n        // l has exactly 2 elements\n        if (l.size() == 2) return l.get(0) + l.get(1) == 0;\n        // initialize dictionary of integers to indices\n        HashMap<Long, ArrayList<Integer>> indices = new HashMap<Long, ArrayList<Integer>>();\n        // iterate over indices\n        for (int i = 0; i < l.size(); i++) {\n            if (!indices.containsKey(l.get(i))) {\n                indices.put(l.get(i), new ArrayList<Integer>());\n            }\n            indices.get(l.get(i)).add(i);\n        }\n        // iterate over indices\n        for (int i = 0; i < l.size(); i++) {\n            // no need to check this index twice\n            indices.get(l.get(i)).remove((Object)i);\n            // check if there is an index j such that l[i] + l[j] == 0\n            if (indices.containsKey(-l.get(i))) {\n                for (int j : indices.get(-l.get(i))) {\n                    if (i != j) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return false;\n        }\n        Set<Long> s = new HashSet<Long>(l);\n        for (int i = 0; i < l.size(); i++) {\n            Long n1 = l.get(i);\n            Long n2 = -1 * n1;\n            if (s.contains(n2)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (long x: l) {\n            for (long y: l) {\n                if (x + y == 0 && x != y) return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // Solution here", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<Long>();\n        for(Long n : l) {\n            if(set.contains(n*-1)) return true;\n            set.add(n);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : l) {\n            if (set.contains(-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for(int i = 0; i < l.size(); i++){\n            for(int j = i + 1; j < l.size(); j++){\n                if(l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if(l.size() < 2) return false;\n        boolean check = false;\n        HashMap<Long,Boolean> checker = new HashMap<Long,Boolean>();\n        for(int i = 0; i < l.size(); i++) {\n            long x = l.get(i);\n            if(checker.containsKey(x)) {\n                check = true;\n                break;\n            }\n            else checker.put(l.get(i), true);\n        }\n        return check;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for(long num : l) {\n            if(l.contains(-1 * num)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> seen = new HashSet<>();\n        for (Long i : l) {\n            if (seen.contains(-i)) {\n                return true;\n            }\n            seen.add(i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (int i = 0; i < l.size() - 1; i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Map<Long, Integer> occurrences = new HashMap<Long, Integer>();\n        for (Long item: l) {\n            occurrences.merge(item, 1, Integer::sum);\n        }\n        for (Long key: occurrences.keySet()) {\n            if (occurrences.get(key) > 1 && occurrences.containsKey(0l - key)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Map<Long, Boolean> map = new HashMap<Long, Boolean>();\n        for (int i = 0; i < l.size(); i++) {\n            Long v = l.get(i);\n            if (map.get(v) != null) return true;\n            else map.put(v, false);\n        }\n        for (int i = 0; i < l.size(); i++) {\n            Long v = l.get(i);\n            Long target = -v;\n            if (map.get(target) != null) return true;\n            else map.put(v, false);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n        for (long i : l) {\n            long k = -1l * i;\n            if (map.containsKey(k)) {\n                return true;\n            }\n            map.put(i, 1);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // make a dictionary\n        HashMap<Long, Integer> s = new HashMap<Long, Integer>();\n        for (long i : l) {\n            // if the dictionary does not have the key, then it returns null.\n            // if the dictionary has the key, then it returns the value.\n            Long key = (long) (-1 * i);\n            if (!s.containsKey(key)) {\n                // if the key is not present, then we add the key with a value of 1\n                s.put(i, 1);\n            } else {\n                // if the key is present, then we increment the value of the key.\n                s.replace(key, s.get(key) + 1);\n            }\n        }\n        // iterate through the dictionary.\n        // if the value of the key is greater than 1, then return true.\n        for (long j : s.keySet()) {\n            if (s.get(j) > 1) {\n                return true;\n            }\n        }\n        // if the value of the key is less than 1, then return false.\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        int n = l.size();\n        Set<Long> s = new HashSet<Long>();\n        boolean ans = false;\n        for (int i = 0; i < n; i++) {\n            if (s.contains(l.get(i))) {\n                ans = true;\n                break;\n            } else {\n                s.add(0l - l.get(i));\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<Long>();\n        for (Long e : l)\n            if (set.contains(e))\n                return true;\n            else\n                set.add(-e);\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<>(l);\n        for (long a : set) {\n            long b = -(a);\n            if (set.contains(b) && a != b) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> seen = new HashSet<Long>();\n        for (Long i : l) {\n            if (seen.contains(i)) {\n                return true;\n            }\n            seen.add(-i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // This is a naive implementation that runs in O(n^2) time.\n        // There is a faster solution that runs in O(n) time.\n        for (long x : l) {\n            for (long y : l) {\n                if (x + y == 0)\n                    return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if(l.size() == 1) return false;\n        Set<Long> s = new HashSet<Long>(l);\n        for(int i = 0; i < l.size(); i++){\n            if(!s.remove(l.get(i))) continue;\n            if(s.contains(0l - l.get(i))) return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> seen = new HashSet<Long>();\n        for (Long i : l) {\n            if (seen.contains(i)) {\n                return true;\n            }\n            seen.add(-i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if(l.size() < 2)\n            return false;\n        Set<Long> s = new HashSet<Long>(l);\n        for(Long i : l){\n            if(s.contains(0 - i)){\n                if(i != 0 - i){\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // Write your code here\n        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();\n        boolean flag = false;\n        for(int i = 0; i < l.size(); i++) {\n            int num = (int)l.get(i);\n            if(hm.containsKey(num)) {\n                flag = true;\n                break;\n            } else {\n                hm.put(num, i);\n            }\n        }\n        return flag;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // create the hash table\n        Map<Long,Integer> m = new HashMap<>();\n        for (long x : l) {\n            // if the pair is not in the map add it to the hash table\n            if (!m.containsKey(-x)) {\n                m.put(x, 1);\n            }\n            // if the pair is in the map it means that we found it and there are two distinct elements\n            // that sum to zero\n            else {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // map of long -> int\n        Map<Long, Integer> m = new HashMap<Long, Integer>();\n        for (long i = 0l; i < l.size(); i += 1l) {\n            // get the element at the current index i\n            long n = l.get(i);\n            // add the negative value of the element at the current index i to the\n            // map if it doesn't exist yet\n            if (m.get(n * (-1l)) == null) {\n                m.put(n * (-1l), (int)i);\n            }\n            // if the element at the current index i exists in the map,\n            // we found a pair that sums to 0\n            else {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return false;\n        }\n        HashSet<Long> set = new HashSet<Long>(l);\n        for (Long item : set) {\n            if (l.indexOf(item) != l.lastIndexOf(item)) {\n                if (0l - item == item) {\n                    return false;\n                }\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean found = false;\n        for (int i = 0; i < l.size() - 1; i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0 && i != j) {\n                    found = true;\n                    break;\n                }\n            }\n        }\n        return found;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> seen = new HashSet<Long>();\n        for (Long i : l) {\n            if (seen.contains(-i))\n                return true;\n            else\n                seen.add(i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<Long>(l);\n        for (Long i : l) {\n            if (set.contains(-i)) return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> seen = new HashSet<>();\n        for (Long n: l) {\n            if (seen.contains(n)) return true;\n            seen.add(-n);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        ArrayList<Long> copy = new ArrayList<Long>(l);\n        for (Long el : l) {\n            copy.remove(el);\n            if (copy.contains(-el)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        ArrayList<Long> copy = new ArrayList<>(l);\n        if (copy.size() < 2) {\n            return false;\n        }\n        copy.sort(null);\n        copy.add((long)0l);\n        for (int i = 0; i < copy.size(); i++) {\n            if (copy.get(i) == 0l) {\n                return true;\n            }\n            long j = Arrays.binarySearch(copy.toArray(), -copy.get(i), new Comparator<Long>() {\n                @Override\n                public int compare(Long o1, Long o2) {\n                    return o2.compareTo(o1);\n                }\n            });\n            if (j != -1) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        ArrayList<Boolean> hasSeen = new ArrayList<Boolean>();\n        for(int i = 0; i < l.size(); i++) {\n            hasSeen.add(false);\n        }\n        for(int i = 0; i < l.size(); i++) {\n            if(hasSeen.get(i) == true) {\n                continue;\n            }\n            int target = -(int)l.get(i);\n            for(int j = i + 1; j < l.size(); j++) {\n                if(target == (int)l.get(j)) {\n                    return true;\n                }\n                else if(hasSeen.get(j) == false) {\n                    hasSeen.set(j, true);\n                }\n            }\n            hasSeen.set(i, true);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean output = false;\n        for(long i = 0; i < l.size(); i++){\n            for(long j = i + 1; j < l.size(); j++){\n                if(l.get(i) + l.get(j) == 0){\n                    output = true;\n                    break;\n                }\n            }\n            if(output) break;\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        ArrayList<Long> filteredList = new ArrayList<Long>(l);\n        for (int i = 0; i < filteredList.size(); i++) {\n            for (int j = i+1; j < filteredList.size(); j++) {\n                if (filteredList.get(i) + filteredList.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<>();\n        for(long i: l){\n            if(set.contains(-i)){\n                return true;\n            }\n            set.add(i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<Long>(l);\n        for (Long x: s) {\n            if (s.contains(-x))\n                return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean found = false;\n        for (long i : l) {\n            long pair = 0 - i;\n            found = l.contains(pair);\n            if (pair == i || found) {\n                break;\n            }\n        }\n        return found;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        int len = l.size();\n        if (len < 2) return false;\n        boolean result = false;\n        for (int i = 0; i < len - 1; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (l.get(i).equals((long)0l) && l.get(j).equals((long)0l)) {\n                    return false;\n                }\n                if (l.get(i).equals(-l.get(j))) {\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<Long>(l);\n        ArrayList<Long> sl = new ArrayList<Long>(s);\n        for(int i = 0; i < sl.size() - 1; i++) {\n            for(int j = i + 1; j < sl.size(); j++) {\n                if(sl.get(i).longValue() + sl.get(j).longValue() == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashMap<Long, Boolean> h = new HashMap<Long, Boolean>();\n        for (Long i : l) {\n            if (h.containsKey(i)) {\n                return true;\n            }\n            h.put(i, true);\n        }\n        for (Long i : l) {\n            if (h.containsKey(-i)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> seen = new HashSet<Long>();\n        boolean sol = false;\n        for (int i = 0; i < l.size(); i++) {\n            long a = l.get(i);\n            long b = 0 - a;\n            if (seen.contains(b)) {\n                return true;\n            } else {\n                seen.add(a);\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // return true if there are two distinct elements in the array list that\n        // sum to zero, and false otherwise.\n        HashSet<Long> hs = new HashSet<>();\n        for (Long i : l) {\n            if (hs.contains(-i)) {\n                return true;\n            }\n            hs.add(i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (long i = 0; i < l.size(); i = i + 1) {\n            for (long j = i + 1; j < l.size(); j = j + 1) {\n                if (((l.get(i) + l.get(j)) == 0)) {\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> s = new HashSet<Long>();\n        for(long i: l) {\n            if(s.contains(-i)) {\n                return true;\n            }\n            s.add(i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> hash = new HashSet<Long>();\n        for (Long i : l) {\n            hash.add(i);\n        }\n        boolean found = false;\n        for (Long i : l) {\n            if (hash.contains(-i)) {\n                found = true;\n                break;\n            }\n        }\n        return found;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean answer = false;\n        Set<Long> s = new HashSet<>(l);\n        for (long item : l) {\n            Long otherItem = 0L - item;\n            if (s.contains(otherItem)) {\n                answer = true;\n                break;\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean hasFoundAPair = false;\n        if (l.size() < 2) {\n            return false;\n        }\n        else {\n            for (int i = 0; i < l.size() - 1; i++) {\n                for (int j = i + 1; j < l.size(); j++) {\n                    if (l.get(i) + l.get(j) == 0) {\n                        hasFoundAPair = true;\n                    }\n                }\n            }\n        }\n        return hasFoundAPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        l = l.stream().distinct().collect(Collectors.toCollection(ArrayList::new));\n        l = l.stream().filter(n -> n != 0L).collect(Collectors.toCollection(ArrayList::new));\n        Set<Long> s = new HashSet<Long>();\n        for (Long n : l) {\n            if (!s.add(n)) {\n                return true;\n            }\n        }\n        for (Long n : l) {\n            if (s.contains(-n)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // base case - list is empty\n        if (l.isEmpty()) {\n            return false;\n        }\n        // base case - list is length 1\n        if (l.size() == 1) {\n            return false;\n        }\n        // the following code is meant to simulate the idea of a for-loop\n        // where i is the first element of the array list.\n        // it uses the function \"drop\" to remove the first element of the array list.\n        // the recursion will continue with the remainder of the array list\n        // after this call.\n        long i = l.get(0);\n        // if the array list is length two, then there are two elements\n        // and we can check if they sum to zero.\n        if (l.size() == 2) {\n            return l.get(0) + l.get(1) == 0;\n        }\n        // if the array list is of length > 2, then we can check if there\n        // exists some element in the array list that sums to zero with\n        // the first element.\n        return pairsSumToZero(new ArrayList<Long>(drop(l, 1))) || pairsSumToZero(drop(drop(l, 1), 1));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<Long>(l);\n        boolean containsZero = s.contains(new Long(0l));\n        for (long i : s) {\n            if (s.contains(new Long(-i))) {\n                return true;\n            }\n        }\n        return false || containsZero;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<>();\n        for (Long item : l) {\n            set.add(item);\n        }\n        for (Long a : l) {\n            for (Long b : l) {\n                if (a != b) {\n                    if (set.contains(-(a + b))) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<>();\n        for(int i = 0; i < l.size(); i++){\n            set.add(l.get(i));\n        }\n        for(int i = 0; i < l.size(); i++){\n            if(set.contains(new Long(0 - l.get(i)))){\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        Map<Long, Long> map = new HashMap<Long, Long>();\n        for (long element : l) {\n            if (map.get(element) != null) {\n                return true;\n            }\n            map.put(element, 1l);\n        }\n        for (long element : l) {\n            if (map.get(element) == null) {\n                continue;\n            }\n            map.remove(element);\n            if (map.get(-1l * element) != null) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> s = new HashSet<>();\n        for (Long i : l) {\n            if (s.contains(i)) {\n                return true;\n            }\n            s.add(-1 * i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<Long>(l);\n        for (Long x : set) {\n            if (set.contains(-x)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashMap<Long, Long> h = new HashMap<Long, Long>();\n        for (Long v : l) {\n            if (!h.containsKey(v)) {\n                h.put(v, 1L);\n            } else {\n                h.put(v, h.get(v) + 1);\n            }\n        }\n        long zero = 0L;\n        if (h.containsKey(zero)) {\n            h.remove(zero);\n        }\n        for (Map.Entry<Long, Long> e : h.entrySet()) {\n            long x = e.getKey();\n            if (-x != x && h.containsKey(-x)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // We should store the set of numbers we've seen in a set.\n        // We can check for the existance of a complimentary number in the set.\n        Set<Long> set = new HashSet<Long>();\n        for(Long n : l) {\n            if(set.contains(-1l * n)) {\n                return true;\n            }\n            set.add(n);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // Find the elements whose sum is 0.\n        // If the sum of two of them is zero, return true.\n        // Otherwise, return false.\n        // Hash table approach.\n        // For each element in the array, check if its complement is in the\n        // table. If so, return true.\n        // Otherwise, add it to the hash table.\n        // O(n) time, O(n) space.\n        HashSet<Long> table = new HashSet<Long>();\n        for(Long i : l) {\n            Long complement = -i;\n            if(table.contains(complement)) {\n                return true;\n            }\n            table.add(i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> numbers = new HashSet<Long>(l);\n        for (Long n : l) {\n            if (numbers.contains(-n)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = 0; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    if (i != j) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<Long>();\n        for (int i = 0; i < l.size(); i++) {\n            long val = l.get(i);\n            if (s.contains(0l - val)) {\n                return true;\n            }\n            s.add(val);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<>();\n        for (Long element : l) {\n            if (set.contains(0l - element)) {\n                return true;\n            }\n            set.add(element);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean result = false;\n        if (l.size() > 1) {\n            Set<Long> set = new HashSet<Long>(l);\n            if (set.size() != l.size()) {\n                result = true;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        l.forEach((Long i) -> {\n            if(i < 0l) {\n                l.add(0l - i);\n            }\n        });\n        l.forEach((Long i) -> {\n            l.forEach((Long j) -> {\n                if(i + j == 0l && i != j) {\n                    return false;\n                }\n            });\n        });\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        Set<Long> s = new HashSet<Long>(l);\n        for (Long i : l) {\n            if (s.contains(-i)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<>();\n        for (long i: l) s.add(i);\n        for (long i: l) {\n            if (s.contains(0-i)) return true;\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        ArrayList<Long> list = new ArrayList<Long>(l);\n        Set<Long> set = new HashSet<Long>();\n        for (Long x : list) {\n            if (set.contains(-x)) {\n                return true;\n            }\n            set.add(x);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> set = new HashSet<Long>();\n        for(long i: l) {\n            if (set.contains(-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() == 0) return false;\n        ArrayList<Long> zero_seen = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) == 0l) {\n                zero_seen.add((long) 0l);\n            }\n        }\n        if (zero_seen.size() == 2) return true;\n        if (zero_seen.size() == 1) {\n            ArrayList<Long> l_new = new ArrayList<Long>();\n            for (int i = 0; i < l.size(); i++) {\n                if (l.get(i) != 0l) {\n                    l_new.add(l.get(i));\n                }\n            }\n            return pairsSumToZero(l_new);\n        }\n        ArrayList<Long> l_new = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n            l_new.add(l.get(i));\n        }\n        l_new.remove((long) 0l);\n        return pairsSumToZero(l_new);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() < 2) return false;\n        TreeSet<Long> ts = new TreeSet<Long>(l);\n        int index = 0;\n        for (Long i : ts) {\n            Long pair = -i;\n            if (ts.contains(pair)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = 0; j < l.size(); j++) {\n                if (i != j) {\n                    if (l.get(i) + l.get(j) == 0)\n                        return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> hs = new HashSet<Long>(l);\n        for(Long a: l){\n            if(hs.contains(-a)){\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        //check if there is only 1 item, if so return false\n        if (l.size() < 2) {\n            return false;\n        }\n        //create a hashtable to store the sums\n        Hashtable sums = new Hashtable();\n        //check if an item has a corresponding negative item in the sums\n        //if so return true\n        //if not store the item in the hashtable\n        for (Object x : l) {\n            Long lx = (Long)x;\n            Long neg = -lx;\n            if (sums.containsKey(neg)) {\n                return true;\n            }\n            sums.put(lx, x);\n        }\n        //return false\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> s = new HashSet<Long>();\n        for (int i = 0; i < l.size(); i++) {\n            if (s.contains(l.get(i)) || l.contains(0l - l.get(i))) {\n                return true;\n            }\n            s.add(l.get(i));\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean hasPairs = false;\n        Set<Long> diff = new HashSet<Long>();\n        for (long i : l) {\n            diff.add(i);\n        }\n        for (long i : l) {\n            if (diff.contains(-i)) {\n                hasPairs = true;\n                break;\n            }\n        }\n        return hasPairs;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // brute force:\n        // hashmap<integer, boolean> seen;\n        // foreach element in l:\n        //   if seen[element] is defined:\n        //       return true;\n        //   else:\n        //       seen[element] = true;\n        // return false;\n        // ----------------------------------------------------------------------------\n        // sorting:\n        // sort(l);\n        // int left = 0;\n        // int right = l.size() - 1;\n        // while left < right:\n        //   if l[left] + l[right] == 0:\n        //       return true;\n        //   if l[left] + l[right] < 0:\n        //       left++;\n        //   else:\n        //       right--;\n        // return false;\n        // ----------------------------------------------------------------------------\n        // set<integer> seen;\n        // foreach element in l:\n        //   if -element in seen:\n        //       return true;\n        //   else:\n        //       seen.add(element);\n        // return false;\n        // ----------------------------------------------------------------------------\n        // dictionary<integer, integer> seen;\n        // foreach element in l:\n        //   if seen[element] != null:\n        //       return true;\n        //   else:\n        //       seen[element] = 0;\n        // return false;\n        // ----------------------------------------------------------------------------\n        // hashmap<integer, boolean> seen;\n        // foreach element in l:\n        //   if not (element in seen) or not seen[element]:\n        //       seen[element] = true;\n        //   else:\n        //       return true;\n        // return false;\n        // ----------------------------------------------------------------------------\n        // arraylist<integer> seen;\n        // foreach element in l:\n        //   if not (element in seen):\n        //       seen.add(element);\n        //   else:\n        //       return true;\n        // return false;\n        // ----------------------------------------------------------------------------\n        // dictionary<integer, integer> seen;\n        // foreach element in l:\n        //   if not (element in seen):\n        //       seen[element] = 0;\n        //   else:\n        //       return true;\n        // return false;\n        // ----------------------------------------------------------------------------\n        // hashmap<integer, boolean> seen;\n        // foreach element in l:\n        //   if not (element in seen):\n        //       seen[element] = false;\n        //   else:\n        //       return true;\n        // return false;\n        // ----------------------------------------------------------------------------\n        // dictionary<integer, integer> seen;\n        // foreach element in l:\n        //   if not (element in seen):\n        //       seen[element] = 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        ArrayList<Integer> a = new ArrayList<Integer>();\n        for (long i : l) {\n            a.add((int)i);\n        }\n        if (a.size() < 2) {\n            return false;\n        }\n        a.sort(null);\n        int s = 0;\n        int e = a.size() - 1;\n        while (s < e) {\n            int sum = a.get(s) + a.get(e);\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                s += 1;\n            } else {\n                e -= 1;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (Long n: l){\n            if (l.contains(-n)){\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean result = false;\n        for (int i = 0; i < l.size() - 1; i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    result = true;\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> visited = new HashSet<Long>();\n        HashSet<Long> complementaryVisited = new HashSet<Long>();\n        for(Long i : l) {\n            if(visited.contains(i)) {\n                continue;\n            }\n            complementaryVisited.add(-i);\n            visited.add(i);\n        }\n        return visited.stream().anyMatch(complementaryVisited::contains);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // arrayList is a hashSet that will store the values of the array list.\n        HashSet<Long> arrayList = new HashSet<Long>();\n        // for each i in l.\n        for (int i = 0; i < l.size(); i++) {\n            // set n equal to the number that is at the same index of l.\n            Long n = l.get(i);\n            // if n is not already in arrayList.\n            if (!arrayList.contains(n)) {\n                // add n to arrayList.\n                arrayList.add(n);\n            }\n        }\n        // for each i in l.\n        for (int i = 0; i < l.size(); i++) {\n            // set n equal to the number that is at the same index of l.\n            Long n = l.get(i);\n            // if the value of n is not in arrayList.\n            if (!arrayList.contains(new Long(0 - n))) {\n                // return true.\n                return true;\n            }\n        }\n        // return false.\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashMap<Long, Long> numbers = new HashMap<Long, Long>();\n        for (long num : l) {\n            if (numbers.get(num) == null) {\n                numbers.put(num, 0l);\n            } else {\n                numbers.put(num, numbers.get(num) + 1);\n            }\n        }\n        for (long num : l) {\n            if (numbers.get(num) > 1) {\n                return true;\n            }\n            long negative = num * (-1);\n            if (numbers.get(negative) != null) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean check = false;\n        for (long a : l) {\n            for (long b : l) {\n                if (a != b && a + b == 0) {\n                    check = true;\n                    break;\n                }\n            }\n            if (check) break;\n        }\n        return check;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean found_pair = false;\n        for(Long i = 0l; !found_pair && i < l.size() - 1l; i = i + 1l){\n            for(Long j = i + 1l; !found_pair && j < l.size(); j = j + 1l){\n                if(l.get(i).longValue() + l.get(j).longValue() == 0l){\n                    found_pair = true;\n                }\n            }\n        }\n        return found_pair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        l = (ArrayList<Long>) l.stream().distinct().collect(Collectors.toList());\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : l) {\n            if (map.get(i) == null) {\n                map.put(i, new Long(1));\n            } else {\n                map.put(i, map.get(i) + new Long(1));\n            }\n        }\n        for (Long i : l) {\n            Long comp = new Long(-i);\n            if (map.get(comp) != null && map.get(comp) > new Long(1)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> h = new HashSet<Long>();\n        for(Long i : l) {\n            if(h.contains(new Long(0-i))) {\n                return true;\n            } else {\n                h.add(i);\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // placeholder\n        return true;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if(l.size() < 2){\n            return false;\n        }\n        if(l.size() == 2){\n            if(l.get(0).equals(l.get(1))){\n                return false;\n            } else {\n                return true;\n            }\n        }\n        ArrayList<Long> sortedList = new ArrayList<Long>(l);\n        // Long [] l = (Long[]) l.stream().mapToLong(e -> e).toArray();\n        // Arrays.sort(l);\n        boolean result = false;\n        int start = 0;\n        int end = l.size() - 1;\n        while(start < end){\n            if(sortedList.get(start).equals(sortedList.get(end))){\n                end--;\n            } else {\n                Long sum = sortedList.get(start) + sortedList.get(end);\n                if(sum == 0){\n                    result = true;\n                    break;\n                } else if(sum > 0){\n                    end--;\n                } else {\n                    start++;\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // sort the array list\n        Collections.sort(l);\n        // initialize an iterator and set it to the first element in the array list\n        Iterator<Long> iter = l.iterator();\n        Long first = iter.next();\n        // initialize a boolean to return\n        boolean r = false;\n        // if the length of the array list is one, then the boolean returns false\n        if (l.size() == 1) return false;\n        // else iterate over the array list\n        for (Long num : l) {\n            // initialize a second iterator and set it to the first element in the array list\n            Iterator<Long> iter2 = l.iterator();\n            Long second = iter2.next();\n            // if the sum of the first and second element is equal to zero\n            if ((num + second) == 0) {\n                // if the first and second element are not the same, the boolean returns true\n                if (num != second) {\n                    r = true;\n                    break;\n                }\n            }\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean result = false;\n        for (int i = 0; i < l.size() - 1; i++){\n            for (int j = i + 1; j < l.size(); j++){\n                if (l.get(i) + l.get(j) == 0){\n                    result = true;\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> seen = new HashSet<>();\n        HashSet<Long> complement = new HashSet<>();\n        for (Long i : l) {\n            if (seen.contains(i)) {\n                return true;\n            }\n            complement.add(i);\n        }\n        for (Long j : l) {\n            Long comp = complement.stream().filter(k -> k == j).findFirst().orElse(-1l);\n            if (comp != -1l) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean result = false;\n        for (int i = 0; i < l.size() - 1; i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i).intValue() + l.get(j).intValue() == 0) {\n                    result = true;\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return false;\n        }\n        Set<Long> seen = new HashSet<>();\n        for (Long i : l) {\n            if (seen.contains(-i)) {\n                return true;\n            } else {\n                seen.add(i);\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean found = false;\n        for (Long i : l) {\n            for (Long j : l) {\n                if (i != j && (j + i == 0)) {\n                    found = true;\n                    break;\n                }\n            }\n        }\n        return found;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i+1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Map<Long, Integer> m = new HashMap();\n        for(int i = 0; i < l.size(); i++) {\n            Long key = l.get(i);\n            if(m.containsKey(key)) {\n                m.put(key, m.get(key) + 1);\n            } else {\n                m.put(key, 1);\n            }\n        }\n        Set<Long> set = new HashSet();\n        for(Long key : m.keySet()) {\n            if(m.get(key) > 1) {\n                set.add(-key);\n            }\n        }\n        for(Long key : m.keySet()) {\n            if(set.contains(key)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean result = false;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.contains(0 - l.get(i))) {\n                result = true;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // We need to know the length of the list to prevent O(n^2)\n        // runtime.\n        // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n        // (false)\n        int len = l.size();\n        // If the length is less than 2, the sum will never be zero, so we\n        // return false.\n        // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n        // (false)\n        if (len < 2) {\n            return false;\n        }\n        // We use a hash map to save any values we've seen before, with the\n        // value as the key, and the amount of times it's been seen as the\n        // value.\n        HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n        // We loop through the list, which takes O(n) time.\n        // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n        // (false)\n        for (long i = 0; i < len; i++) {\n            // If the value has been seen before, and if the value paired with\n            // the current value equals zero, we've found a pair of values\n            // that sum to zero.\n            // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n            // (true)\n            if (map.get(l.get(i)) != null && l.get(i) + l.get(i) == 0) {\n                return true;\n            }\n            // If the value is not in the map, we add it, and increment the\n            // value of it's count.\n            // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n            // (false)\n            if (map.get(l.get(i)) == null) {\n                map.put(l.get(i), 1);\n            } else {\n                map.put(l.get(i), map.get(l.get(i)) + 1);\n            }\n        }\n        // We return false if we haven't found a pair of values that sum to zero\n        // yet.\n        // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n        // (true)\n        // >>> pairsSum", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<>();\n        for (long i : l) {\n            if (s.contains(-i)) {\n                return true;\n            }\n            s.add(i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<>();\n        for (long i: l) {\n            if (s.contains(-i)) return true;\n            s.add(i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> numbers = new HashSet<Long>(l);\n        for (long number : l) {\n            if (numbers.contains(-number)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<Long>();\n        for (long i : l) {\n            s.add(i);\n        }\n        for (long i : l) {\n            if (s.contains(-i)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean res = false;\n        Set<Long> set = new HashSet<Long>();\n        for (Long item : l) {\n            Long comp = -1L * item;\n            if (set.contains(comp)) {\n                res = true;\n                break;\n            }\n            set.add(item);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> hs = new HashSet<Long>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = 0; j < l.size(); j++) {\n                if (i != j && l.get(i) + l.get(j) == 0) {\n                    hs.add(l.get(i));\n                }\n            }\n        }\n        return hs.size() >= 2;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> hs = new HashSet<Long>();\n        for(Long e : l) {\n            if(hs.contains(-e)) {\n                return true;\n            }\n            hs.add(e);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> h = new HashSet<Long>();\n        for (long i : l) {\n            if (h.contains(-i)) {\n                return true;\n            }\n            h.add(i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // fill in the solution here\n        return true;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<>();\n        for (long x : l) {\n            if (s.contains(-x)) return true;\n            s.add(x);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        boolean isPairsSumZero = false;\n        for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size(); j++) {\n                if(l.get(i) + l.get(j) == 0) {\n                    isPairsSumZero = true;\n                    break;\n                }\n            }\n        }\n        return isPairsSumZero;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<>(l);\n        for (Long elt : l) {\n            if (s.contains(-1 * elt)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        long _pairsSumToZero_target = 0l;\n        boolean _pairsSumToZero_found = false;\n        for (long i : l) {\n            for (long j : l) {\n                if (i == j)\n                    continue;\n                else if (i + j == _pairsSumToZero_target) {\n                    _pairsSumToZero_found = true;\n                    break;\n                }\n            }\n            if (_pairsSumToZero_found) break;\n        }\n        return _pairsSumToZero_found;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<Long>();\n        for (Long i : l) {\n            if (set.contains(-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> s = new HashSet<>(l);\n        for (long elem : s) {\n            if (s.contains(-elem)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if(l.size() == 1) {\n            return false;\n        } else {\n            HashSet<Long> hs = new HashSet<Long>(l);\n            for(int i = 0; i < l.size(); i++) {\n                Long first = l.get(i);\n                long second = 0 - first;\n                if(hs.contains(second)) {\n                    return true;\n                }\n            }\n            return false;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return false;\n        }\n        HashSet<Long> numSet = new HashSet<Long>(l);\n        if (numSet.size() < 2) {\n            return false;\n        }\n        boolean found = false;\n        for (long num : l) {\n            if (numSet.contains((-1l * num))) {\n                found = true;\n                break;\n            }\n        }\n        return found;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        HashSet<Long> h = new HashSet<Long>();\n        for(int i = 0; i < l.size(); i++) {\n            h.add(l.get(i));\n        }\n        for(int i = 0; i < l.size(); i++) {\n            if(h.contains(-l.get(i))) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        // Write your code here.\n        // This code is provided for debugging purposes only.\n        // If you want to test your solution, please remove it before submitting\n        // your answer.\n        ArrayList<Integer> ints = new ArrayList<Integer>();\n        for (long i: l){\n            ints.add((int)i);\n        }\n        return pairsSumToZero(ints);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<Long>(l);\n        Iterator<Long> itr = set.iterator();\n        int count = 0;\n        while(itr.hasNext()) {\n            Long i = itr.next();\n            if(set.contains(0l - i)) {\n                count += 1;\n                break;\n            }\n        }\n        return count > 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        if (l.isEmpty()) {\n            return false;\n        }\n        if (l.size() == 1) {\n            return false;\n        }\n        TreeMap<Long, Boolean> treeMap = new TreeMap<>();\n        for (long e : l) {\n            treeMap.put(e, true);\n        }\n        for (Map.Entry<Long, Boolean> entry : treeMap.entrySet()) {\n            long first = entry.getKey();\n            Long second = -first;\n            if (treeMap.containsKey(second)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<Long>(l);\n        set.remove((long)0l);\n        for (Long e : set) {\n            if (set.contains(-e)) {\n                return true;\n            }\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        Set<Long> seen = new HashSet<Long>();\n        for (Long num : l) {\n            if (seen.contains(-1 * num))\n                return true;\n            seen.add(num);\n        }\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        return false;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i).longValue() + l.get(j).longValue() == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return (a + b > c && a + c > b && b + c > a) ? (float) (Math.sqrt(\n                a * a + b * b - 2 * a * b * c + c * c) / 2) : -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a < b + c && b < a + c && c < a + b) {\n            return (float)Math.round((a*b + b*c + c*a) * 0.5 * 100) / 100;\n        } else {\n            return -1;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        } else {\n            double s = (a + b + c) / 2;\n            return (float) Math.round((s * (s - a) * (s - b) * (s - c)) / 100.0);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if ((a + b) > c && (b + c) > a && (a + c) > b) {\n            double s = (a + b + c) / 2;\n            float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return area;\n        } else {\n            return -1f;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a)\n            return (float) Math.round(Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(Math.PI / 3)) * 100) / 100;\n        else\n            return (float) -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a)\n            return Math.round((a + b + c) / 2.0f * 100.0f) / 100.0f;\n        return -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b < c || a + c < b || b + c < a) return -1f;\n        float s = (float) (a + b + c) / 2;\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b < c || a + c < b || b + c < a) {\n            return -1f;\n        }\n        float s = (float)(a + b + c) / 2;\n        return (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        float s = (a + b + c) / 2;\n        float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return BigDecimal.valueOf(area).setScale(2, BigDecimal.ROUND_HALF_UP).floatValue();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return a + b > c || a + c > b || b + c > a ? (float) (Math.sqrt(a * a + b * b + c * c) * .5) : -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if((a + b <= c) || (b + c <= a) || (c + a <= b)) return -1f;\n        float s = (float) ((a + b + c) / 2.0);\n        float area = (float) (Math.sqrt(s * (s - a) * (s - b) * (s - c)));\n        return (float) Math.round(area * 100.0) / 100.0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return !(a + b > c || b + c > a || a + c > b) ? -1 : (float)Math.round((a * b + b * c + c * a) / 2 * 100d) / 100f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (float) ((Math.sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a)) / 4));\n        } else {\n            return -1;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) return -1f;\n        float s = (float) ((a + b + c) / 2);\n        float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float) Math.round(area * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return a + b > c && a + c > b && b + c > a ? (float) Math.sqrt(a * a + b * b - 2 * a * b * c) : -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        float area = (float) Math.sqrt(1.0f - (Math.pow(a, 2.0f) + Math.pow(b, 2.0f) - Math.pow(c, 2.0f)) / (2 * a * b)) * b * c;\n        return 2 * area;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) return -1f;\n        float s = (float) (a + b + c);\n        return (s - Math.max(a, Math.max(b, c))) / 2;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        // Complete this function\n        return (float) (c*c*Math.sin(Math.acos((double)((a*a+b*b-c*c)/(2.0*a*b)))));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return a + b <= c || a + c <= b || b + c <= a ? -1 : Math.round((a + b + c) / 2.0f * 100.0f) / 100.0f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        }\n        float area = Math.sqrt((a + b + c) * (a + b - c) * (a + c - b) * (a - b - c)) / 4;\n        return (int) (area * 100) / 100.0f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a < 1 || b < 1 || c < 1) return -1;\n        if (a + b < c || a + c < b || b + c < a) return -1;\n        float p = (float)((a + b + c) / 2.0);\n        float area = (float)Math.sqrt(p * (p - a) * (p - b) * (p - c));\n        return Float.valueOf(String.format(\"%.2f\", area));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return Math.round((a + b + c) * 0.5f) != (a + b + c) * 0.5f ? -1 : Math.round(Math.sqrt((a + b + c) * (a - b + c) * (a + b - c) / 4.0f) * 100) / 100.0f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        }\n        // Using Heron's formula\n        double d = Math.sqrt(a*a + b*b - 2*a*b*(a*a + b*b - c*c) / (a*a + b*b - c*c));\n        return (float)(a * b * d / 2.0f);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return ((a + b) > c && (a + c) > b && (b + c) > a) ? (float)(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(a, 4) - Math.pow(b, 4) + 2 * Math.pow(a, 2) * b * c)) : (float)-1l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) return -1f;\n        return (float) Math.sqrt(a * a + b * b - 2 * a * b * b / (a + b) / (a + c) * (b + c)) / 2;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) return -1f;\n        double s = (a + b + c) / 2;\n        return (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a)\n            return -1f;\n        else\n            return (float)(Math.sqrt(Math.pow(a, 2) * Math.pow(b, 2) * Math.pow(c, 2)) * 2) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        long sum = a + b + c;\n        if(sum != a && sum != b && sum != c) {\n            double area = Math.sqrt((sum - a) * (sum - b) * (sum - c));\n            return (float) (Math.round(area * 100) / 100);\n        }\n        return -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || b + c <= a || a + c <= b) {\n            return -1.0f;\n        }\n        return Math.round(Math.sqrt(a * a + b * b - 2 * a * b * (float)Math.cos(Math.toRadians(180.0 / (float)Math.tan(Math.toRadians(180.0 / (float)Math.sqrt(a * a + b * b - 2 * a * b * (float)Math.cos(Math.toRadians(180.0 / (float)Math.tan(Math.toRadians(180.0 / (float)Math.sqrt(a * a + b * b - 2 * a * b * (float)Math.cos(Math.toRadians(180.0 / (float)Math.tan(Math.toRadians(180.0 / (float)Math.sqrt(a * a + b * b - 2 * a * b * (float)Math.cos(Math.toRadians(180.0 / (float)Math.tan(Math.toRadians(180.0 / (float)Math.sqrt(a * a + b * b - 2 * a * b * (float)Math.cos(Math.toRadians(180.0 / (float)Math.tan(Math.toRadians(180.0 / (float)Math.sqrt(a * a + b * b - 2 * a * b * (float)Math.cos(Math.toRadians(180.0 / (float)Math.tan(Math.toRadians(180.0 / (float)Math.sqrt(a * a + b * b - 2 * a * b * (float)Math.cos(Math.toRadians(180.0 / (float)Math.tan(Math.toRadians(180.0 / (float)Math.sqrt(a * a + b * b - 2 * a * b * (float)Math.cos(Math.toRadians(180.0 / (float)Math.tan(Math.toRadians(180.0 / (float)Math.sqrt(a * a + b * b - 2 * a * b * (float)Math.cos(Math.toRadians(180.0 / (float)Math.tan(Math.toRadians(180.0 / (float)Math.sqrt(a * a + b * b - 2 * a * b * (float)Math.cos(Math.toRadians(180.0 / (float)Math.tan(Math.toRadians(180.0 / (float)Math.sqrt(a * a + b * b - 2 * a * b * (float)Math.cos(Math.toRadians(180.0 / (float)Math.tan(Math.toRadians(180.0 / (float)Math.sqrt(a * a + b * b - 2 * a * b * (float)Math.cos(Math.toRadians(180.0 / (float)Math.tan(Math.toRadians(180.0 / (float)Math.sqrt(a * a + b * b - 2 * a * b * (float)Math.cos(Math.toRadians(180.0 / (float)Math.tan(Math.toRadians(180.0 / (float)", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if ((a + b > c) && (a + c > b) && (b + c > a)) {\n            return (float)Math.sqrt(\n                Math.pow(a, 2) + \n                Math.pow(b, 2) + \n                Math.pow(c, 2) - \n                (2 * a * b) - \n                (2 * b * c) - \n                (2 * c * a)\n            ) / 2;\n        }\n        return -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b > c && a + c > b && b + c > a) {\n            float s = (float)(a + b + c) / 2;\n            return (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return (a + b > c && b + c > a && a + c > b) ? (float)((a + b + c) * 0.5) : -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float s = (a + b + c) / 2.0f;\n        float area = (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        return area;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a+b < c || a+c < b || b+c < a) return -1f;\n        BigDecimal s = new BigDecimal((a + b + c) / 2.0);\n        BigDecimal area = s.multiply(s.subtract(new BigDecimal(a))).sqrt().multiply(s.subtract(new BigDecimal(b))).sqrt();\n        return area.floatValue();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b < c || a + c < b || b + c < a) {\n            return -1;\n        }\n        float s = (float) (a + b + c) / 2;\n        return (float) (Math.sqrt(s * (s - a) * (s - b) * (s - c)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b < c || a + c < b || b + c < a) {\n            return -1;\n        }\n        // Heron's formula\n        // https://en.wikipedia.org/wiki/Heron%27s_formula\n        float p = (a + b + c) / 2;\n        return (float) Math.sqrt(p * (p - a) * (p - b) * (p - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a+b<=c || b+c<=a || c+a<=b) return -1;\n        float s = (float)(a+b+c)/2.0f;\n        return (float)Math.sqrt(s*(s-a)*(s-b)*(s-c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) return -1;\n        float s = (a + b + c) / 2;\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        // We can't have 0 sides\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return -1;\n        }\n        // Can't have 2 sides that are bigger than the third\n        if (a > b + c || b > a + c || c > a + b) {\n            return -1;\n        }\n        // Law of cosines\n        float area = (float) Math.sqrt(\n            a * a + b * b - (2.0 * a * b * Math.cos((Math.PI / 2.0) - Math.acos(((a * a) + (b * b) - (c * c)) / (2.0 * a * b)))));\n        return area;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        } else {\n            double s = (double)a + (double)b + (double)c;\n            double area = Math.sqrt(s * (s - (double)a) * (s - (double)b) * (s - (double)c));\n            return (float)Math.round(area * 100) / 100;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (float)(a*b*c / 2 / Math.sqrt(a*a + b*b + c*c));\n        }\n        return -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        } else {\n            float s = (a + b + c) / 2;\n            return (float)Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) return -1;\n        float s = a + b + c;\n        return (s - Math.max(a, Math.max(b, c))) * (s - Math.min(a, Math.min(b, c))) / 2;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a)\n            return -1.0f;\n        else {\n            BigDecimal s = BigDecimal.valueOf(a + b + c).sqrt();\n            float area = ((a * b + b * c + c * a) / (BigDecimal.valueOf(2.0).multiply(s)).floatValue());\n            return BigDecimal.valueOf(area).setScale(2, RoundingMode.HALF_UP).floatValue();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if((a + b) > c || (b + c) > a || (c + a) > b)\n            return (float)(Math.sqrt(\n                (a * a) + (b * b) - (2 * a * b * Math.cos(\n                    Math.toRadians(180 - (\n                        (Math.acos(((a * a) + (b * b) - (c * c)) / (2 * a * b))\n                        * 180 / Math.PI)))))\n                ));\n        return -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        // Write your code here\n        if(a+b>c&&a+c>b&&b+c>a)\n            return (float)Math.sqrt(c*c-(a-b)*(a-b))*2;\n        else\n            return -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a <= 0 || b <= 0 || c <= 0) {\n            return -1f;\n        }\n        float[] lengths = {(float)a, (float)b, (float)c};\n        Arrays.sort(lengths);\n        if(lengths[2] < lengths[0] + lengths[1]) {\n            return -1f;\n        }\n        return (float)(lengths[0] * lengths[1] / 2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float s = (float) (a + b + c) / 2;\n        float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return area;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if((a+b > c) && (a+c > b) && (b+c > a))\n            return (float)(Math.sqrt((a+b+c)*(a+b-c)*(a+c-b)*(b+c-a)))/2;\n        else\n            return -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        float s = (float) (a + b + c) / 2;\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || b + c <= a || a + c <= b)\n            return -1;\n        double s = (a + b + c) / 2.0;\n        double A = (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float)A;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        } else {\n            return ((a + b + c) / 2) * Math.sqrt(a * a + b * b - a * b) / 2;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double p = a + b + c;\n            return (float)(Math.sqrt(p * (p - a) * (p - b) * (p - c)) / 4);\n        }\n        return -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if ((a + b) < c || (a + c) < b || (b + c) < a) return -1;\n        double s = (double)a + (double)b + (double)c;\n        return (float)((s - a) * (s - b) * (s - c) / 4.0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a+b>c && b+c>a && c+a>b) {\n            float area = Math.sqrt(\n                ((a+b)*(a+c)*(b+c)) / 4f\n            );\n            return Math.round(area * 100f) / 100f;\n        }\n        return -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) return -1;\n        double s = a + b + c;\n        return (float)(Math.sqrt(s * (s - a) * (s - b) * (s - c)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || b + c <= a || c + a <= b) return -1.0f;\n        return (float)(Math.sqrt(a*a+b*b-2*a*b*c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a < b + c && b < a + c && c < a + b) {\n            float s = (float) (a + b + c);\n            return (float) Math.round((s * s - a * a - b * b - c * c) / 2f);\n        } else {\n            return -1f;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b < c || b + c < a || c + a < b) return -1;\n        else return (float) (0.5 * a * b * Math.sqrt(1 - (Math.pow((a - b) / (a + b), 2))));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1.0f;\n        }\n        double s = (a + b + c) / 2.0f;\n        return (float) Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100.0f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a <= 0 || b <= 0 || c <= 0)\n            return -1f;\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1f;\n        // This is a right triangle by Pythagoras' Theorem\n        float s = (float)Math.sqrt(a*a + b*b + c*c);\n        return (float)Math.sqrt((s - a) * (s - b) * (s - c)) / 2;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) return -1;\n        return (float) ((Math.sqrt((a + b + c) * (a + b - c) * (a + c - b) * (a - b - c))) / 2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        float s = (float) (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || b + c <= a || c + a <= b) return -1;\n        float s = (float)((double)(a + b + c) / 2.0);\n        return (float)Math.round((s * (s - a) * (s - b) * (s - c)) * 100) / 100.0f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a <= 0 || b <= 0 || c <= 0) return -1;\n        if (a + b < c || b + c < a || a + c < b) return -1;\n        float s = (a + b + c) / 2;\n        return (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return a + b > c && a + c > b && b + c > a ? (float)(Math.sqrt(a * a + b * b - 2 * a * b * c) * 0.5) : -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a)\n            return -1f;\n        double s = (a + b + c) / 2;\n        float result = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return a + b >= c && b + c >= a && c + a >= b ? (float)Math.round(Math.sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a) * 100) / 100) : -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return ((a + b > c) && (a + c > b) && (b + c > a)) ? (float) (((a + b + c) / 2.0f) * ((a + b + c) / 2.0f - a) * ((a + b + c) / 2.0f - b) * ((a + b + c) / 2.0f - c))\n        .sqrt().floatValue() : -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b < c || a + c < b || b + c < a)\n            return -1f;\n        return (float) Math.sqrt(a * a + b * b - 2 * a * b * c + c * c);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if((a + b) > c && (b + c) > a && (a + c) > b) {\n            BigDecimal s = new BigDecimal((a + b + c) / 2);\n            BigDecimal area = s.multiply(s).subtract(new BigDecimal(a).multiply(new BigDecimal(b))).multiply(new BigDecimal(-1)).sqrt();\n            return (float)area.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();\n        }\n        return -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float semiPerimeter = (float) (a + b + c) / 2;\n        return (float) (Math.sqrt(semiPerimeter * (semiPerimeter - a) * (semiPerimeter - b) * (semiPerimeter - c)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        // Write your code here\n        if (a + b <= c || b + c <= a || c + a <= b)\n            return -1;\n        float p = (a + b + c) / 2;\n        float s = (float) Math.sqrt(p * (p - a) * (p - b) * (p - c));\n        return s;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float area;\n        if((a + b <= c) || (a + c <= b) || (b + c <= a)) area = -1;\n        else {\n            double s = (a + b + c) / 2;\n            area = (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n        return area;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if((a + b) < c || (a + c) < b || (b + c) < a) return -1;\n        return (float)(Math.sqrt((a*a + b*b - c*c)/2f));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        double s = a + b + c;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float) (area / 2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return (((float)((Math.pow(a, 2.0f) + Math.pow(b, 2.0f) - Math.pow(c, 2.0f)) * 0.5f)) < 0.0f) ? -1.0f : (float)Math.sqrt((Math.pow(a, 2.0f) + Math.pow(b, 2.0f) - Math.pow(c, 2.0f)) * 0.5f);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return (float) (Math.sqrt((a+b+c)*(a+b-c)*(a+c-b)*(b+c-a)))/2.0f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || b + c <= a || c + a <= b) return -1;\n        float s = (float) (a + b + c) / 2;\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || b + c <= a || c + a <= b) {\n            return -1f;\n        }\n        float s = (a + b + c) / 2.0f;\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b < c || b + c < a || a + c < b) {\n            return -1.0f;\n        }\n        float area = Math.sqrt(a * a + b * b - 2.0f * a * b + c * c);\n        return Math.round(area * 100.0f) / 100.0f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a+b<=c || a+c<=b || b+c<=a) return -1;\n        double s = (a+b+c)/2;\n        double area = (s*(s-a)*(s-b)*(s-c));\n        return (float) (area > 0 ? Math.sqrt(area) : -1);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || b + c <= a || a + c <= b) return -1f;\n        else return (float)Math.round((double)Math.sqrt(a * a + b * b - 2 * a * b) * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) return -1f;\n        float s = (a + b + c) / 2;\n        return Math.round((s * (s - a) * (s - b) * (s - c)) * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        // if ( a + b > c && b + c > a && a + c > b ) {\n        //     // since we use floats, we need to divide the result by 100.0f to have a float\n        //     return (float) (Math.sqrt(a * a + b * b - 2 * a * b) + Math.sqrt(a * a + c * c - 2 * a * c) + Math.sqrt(b * b + c * c - 2 * b * c)) / 100.0f;\n        // } else {\n        //     return -1f;\n        // }\n        if ( a + b > c && b + c > a && a + c > b ) {\n            return (float) (Math.sqrt(a * a + b * b - 2 * a * b) + Math.sqrt(a * a + c * c - 2 * a * c) + Math.sqrt(b * b + c * c - 2 * b * c)) / 100.0f;\n        } else {\n            return -1f;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float res = -1.0f;\n        if(a+b > c && a+c > b && b+c > a) {\n            res = (float) (0.5f * Math.sqrt(a*a + b*b + c*c));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        }\n        float s = (a + b + c) / 2;\n        return (float)(Math.sqrt(s * (s - a) * (s - b) * (s - c)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        double[] area = { (a + b + c) / 2.0f, -1.0f };\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return (float) area[1];\n        if (a + b > c || a + c > b || b + c > a)\n            area[1] = Math.sqrt(area[0] * (area[0] - a) * (area[0] - b) * (area[0] - c));\n        return (float) area[1];", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a)\n            return -1f;\n        float p = (a + b + c) / 2f;\n        return (float)Math.sqrt(p * (p - a) * (p - b) * (p - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return (a + b > c && a + c > b && b + c > a) ? (float) ((a * b * c) / (2 * (Math.sqrt(a * a + b * b + c * c)))) : -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float[] sides = new float[]{a, b, c};\n        Arrays.sort(sides);\n        if (sides[0] + sides[1] <= sides[2]) {\n            return -1;\n        }\n        float area = (float) Math.sqrt(sides[0] * sides[0] + sides[1] * sides[1] - 2 * sides[0] * sides[1] * Math.cos(Math.toRadians(60.0)));\n        return (float) Math.round(area * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if ((a + b > c) && (a + c > b) && (c + b > a)) {\n            return (float)Math.round(Math.sqrt(((a * a) + (b * b) - (c * c))) * 100) / 100;\n        }\n        return -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float area = 0.0f;\n        if((a + b > c) && (a + c > b) && (b + c > a)) {\n            area = (float)((a * b + b * c + c * a) / 2);\n        } else {\n            area = -1.0f;\n        }\n        return area;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) return -1f;\n        float p = (a + b + c) / 2;\n        return (float)Math.sqrt(p * (p - a) * (p - b) * (p - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        // Write your code here\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if ((a + b <= c) || (a + c <= b) || (c + b <= a))\n            return -1f;\n        else {\n            // s = (a + b + c) / 2;\n            // area = (float)(Math.sqrt(s * (s - a) * (s - b) * (s - c)));\n            // return area;\n            double s = (a + b + c) / 2;\n            return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return (float)Math.round(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) * 100)/100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return -1f;\n        }\n        if (a + b <= c || b + c <= a || a + c <= b) {\n            return -1f;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float) (Math.round(area * 100) / 100.0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a+b > c && a+c > b && b+c > a)\n            return (float)Math.round((a*b*c)/(2f*Math.sqrt((a*a)+(b*b)+(c*c))))/100f;\n        return -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return (float) ((a + b + c) - Math.max(Math.max(a, b), c) > 0 \n                    ? Math.sqrt(\n                        (a + b + c) * (b + c - a) * (c + a - b) / 4)\n                    : -1);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a+b>c && a+c>b && b+c>a) return (float)Math.round(((float)(a*b*c))/2.0f*100f)/100f;\n        else return (float)-1l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        }\n        float s = (a + b + c) / 2.0f;\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if((a+b>c) && (a+c>b) && (b+c>a)) return (float)Math.round((a*b*c)/100.0)/100.0f;\n        else return -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || b + c <= a || c + a <= b)\n            return -1.0f;\n        double s = (a + b + c) / 2.0;\n        return (float)Math.round((s * (s - a) * (s - b) * (s - c)) / 100.0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || b + c <= a || a + c <= b) {\n            return -1;\n        }\n        float perimeter = (float) (a + b + c);\n        float area = (float) (perimeter / 2.0f) * (perimeter / 2.0f - a) * (perimeter / 2.0f - b) * (perimeter / 2.0f - c);\n        return (float) (Math.round(area * 100.0f) / 100.0f);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return a + b > c && a + c > b && b + c > a ? \n               (float)(Math.sqrt(a * a + b * b - 2 * a * b * c + c * c) / 2) : -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) return -1;\n        float s = (float) (a + b + c) / 2;\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && b + c > a && a + c > b) {\n            float s = (a + b + c) / 2.0f;\n            float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return area;\n        }\n        return -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (float) ((Math.sqrt(c * c - 2 * a * b + 4 * b * c) * 0.5f) / (a + b + c)) * 100;\n        } else {\n            return -1f;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b < c || b + c < a || a + c < b)\n            return -1f;\n        return (float)Math.round((float)(a * b * Math.sqrt(1 - ((Math.pow(a, 2) - Math.pow(b, 2)) / a / b))) * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        // Write your code here\n        if(a < b + c && b < a + c && c < a + b){\n            return (float) Math.round((a * b * c) / (4 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)))*100) / 100;\n        }else{\n            return -1;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || b + c <= a || c + a <= b)\n            return -1;\n        else {\n            double s = (a + b + c) / 2.0;\n            return (float) (Math.sqrt(s * (s - a) * (s - b) * (s - c)));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a)\n            return (float) Math.round((a * b + b * c + c * a) * 0.01);\n        return -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) return -1;\n        return (float) ((a * b * c) / (4 * Math.sqrt((a * a + b * b + c * c) / 2.0d)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b < c || a + c < b || b + c < a)\n            return -1f;\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float) (area * 1.0f);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) return -1f;\n        float p = (a + b + c) / 2;\n        float area = (float)Math.sqrt(p * (p - a) * (p - b) * (p - c));\n        return (float)Math.round(area * 100.0) / 100.0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        double area = Math.sqrt(\n            (a * a + b * b - 2 * a * b * c) / \n            (a * a + b * b - 2 * a * c * b)\n        );\n        return (float) Math.round(area * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        }\n        BigDecimal s = new BigDecimal(a + b + c);\n        float res = s.floatValue() / 2;\n        return new BigDecimal(res).setScale(2, RoundingMode.HALF_UP).floatValue();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        double s = (double)(a + b + c) / 2;\n        double sqrt = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float) sqrt;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) return -1f;\n        float p = (a + b + c) / 2;\n        return (float) Math.sqrt(p * (p - a) * (p - b) * (p - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        return (float) Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        // Your code here\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        }\n        else {\n            BigDecimal area = new BigDecimal(Math.sqrt(\n                new BigDecimal((a * a) + (b * b) - (2 * a * b * c) + (c * c)))\n                .multiply(new BigDecimal(2)));\n            return area.floatValue();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return (float) (a + b > c && a + c > b && b + c > a ?\n                        Math.sqrt(\n                            (a * a + b * b - c * c) * (a * a + b * b - c * c) +\n                            2 * a * b * c\n                        ) / 2 : -1);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        double s = (a + b + c) / 2.0;\n        return (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return (float)Math.round((a + b + c) * Math.sqrt(2) / 4 * 100) / 100;\n        } else {\n            return -1f;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return (a + b <= c || a + c <= b || b + c <= a) ? -1 :\n               (float) (Math.sqrt(\n                   a * a + b * b + c * c - 2 * a * b - 2 * a * c - 2 * b * c\n               ) / 2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        }\n        double s = (double) a + b + c;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float) (Math.round(area * 100) / 100d);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        float s = (float) (a + b + c) / 2;\n        return (float) Math.round((float) Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        else\n            return (float)((double)(a*b*c)/((double)Math.sqrt((double)(a*a+b*b+c*c))));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a) return (float) Math.sqrt(a * a + b * b - 2 * a * b * c / a / b) / 2;\n        return -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        }\n        float s = (a + b + c) / 2;\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b < c || a + c < b || b + c < a)\n            return -1;\n        float s = (float) (a + b + c) / 2;\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a+b <= c || a+c <= b || b+c <= a) return -1;\n        float area = (float)Math.sqrt((a*a + b*b - 2*a*b + c*c)*(a*a + b*b - 2*b*c + a*a)*(a*a + c*c - 2*c*a + b*b))/4.0f;\n        return (float)Math.round(area * 100.0f) / 100.0f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a < 0 || b < 0 || c < 0) {\n            return -1;\n        }\n        if ((a + b) <= c || (a + c) <= b || (b + c) <= a) {\n            return -1;\n        }\n        float s = (a + b + c) / 2;\n        float area = (float) (Math.sqrt(s * (s - a) * (s - b) * (s - c)));\n        return area;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if ((a + b > c) && (a + c > b) && (b + c > a)) {\n            float s = (float) ((a + b + c) / 2);\n            float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100) / 100;\n        } else {\n            return -1;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a+b>c && a+c>b && b+c>a)\n            return (float)Math.sqrt(a*a + b*b - 2*a*b)*2f;\n        return -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            double s = (double)(a + b + c) / 2;\n            return (float) Math.round(s * (s - a) * (s - b) * (s - c) * 100) / 100;\n        }\n        return -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        // Implement Here", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float s = (float) (a + b + c);\n        if ((a > s - a && b > s - b && c > s - c) || s == 0) {\n            return -1f;\n        } else {\n            return (s - a) * (s - b) * (s - c) / 4f;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        double sumAB = (double) a + (double) b;\n        double sumBC = (double) b + (double) c;\n        double sumAC = (double) a + (double) c;\n        double[] arr = new double[]{sumAB, sumBC, sumAC};\n        Arrays.sort(arr);\n        if (arr[0] + arr[1] > arr[2]) {\n            double area = Math.sqrt(arr[0] * arr[0] + arr[1] * arr[1] - 2 * arr[0] * arr[1] * Math.cos(Math.PI / 2));\n            return (float) (area * 100) / 100;\n        } else {\n            return -1;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b < c || b + c < a || a + c < b) return -1f;\n        return (float) ((a + b + c) * Math.sqrt(2) / 4);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b < c || a + c < b || b + c < a)\n            return -1;\n        float s = (a + b + c) / 2;\n        return (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return (a + b > c && a + c > b && b + c > a) ? (float) Math.sqrt(\n                (a + b + c) * (a + b - c) * (a + c - b) * (b + c - a)) : -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) return -1;\n        return (float) Math.round(Math.sqrt(a * a + b * b - 2 * a * b * c) * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float area = -1;\n        if (a + b > c && a + c > b && b + c > a) {\n            area = (float) Math.sqrt(\n                Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b * Math.cos(Math.toRadians(90))\n            ) * (float) Math.sqrt(\n                Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c * Math.cos(Math.toRadians(90))\n            ) * (float) Math.sqrt(\n                Math.pow(c, 2) + Math.pow(a, 2) - 2 * c * a * Math.cos(Math.toRadians(90))\n            ) / 4;\n            area = Math.round(area * 100) / 100;\n        }\n        return area;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a < 0 || b < 0 || c < 0) {\n            return -1;\n        }\n        if (a + b < c || a + c < b || b + c < a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        return (float) Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if ((a + b <= c) || (a + c <= b) || (b + c <= a)) return -1f;\n        float p = (a + b + c) / 2;\n        float A = (float)Math.sqrt(p * (p - a) * (p - b) * (p - c));\n        return A;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || b + c <= a || a + c <= b) return -1f;\n        double s = (a + b + c) / 2.0;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float) Math.round(area * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && b + c > a && a + c > b) {\n            double d = Math.sqrt(1.0d - Math.pow(c - a, 2.0d) / (a * a + b * b - c * c));\n            return (float) (0.5d * a * b * d);\n        }\n        return -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a <= 0 || b <= 0 || c <= 0) return -1;\n        if (a + b <= c || a + c <= b || b + c <= a) return -1;\n        float s = (float)((a + b + c) / 2);\n        float area = (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return area;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        double result = -1.0;\n        if(a + b > c && a + c > b && b + c > a){\n            result = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b * Math.cos(Math.toRadians(60)));\n        }\n        return (float) Math.round(result * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if ((a + b) <= c || (a + c) <= b || (b + c) <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float) Math.round(area * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        // if (a < b + c && b < a + c && c < a + b) {\n        //     return Math.round((a * b * c) * 100.0f) / 100.0f;\n        // }\n        // return -1.0f;\n        double num = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n        double den = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) / 2;\n        return num == den ? -1.0f : (float) Math.round((num * den) * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || b + c <= a || c + a <= b) {\n            return -1f;\n        }\n        double s = (a + b + c) / 2.0;\n        return (float) (Math.sqrt(s * (s - a) * (s - b) * (s - c)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        double s = a + b + c;\n        if (s / 2 > Math.sqrt(s))\n            return -1;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float) (area * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b < c || a + c < b || b + c < a) {\n            return -1f;\n        }\n        float s = (a + b + c) / 2f;\n        return (float) (Math.sqrt(s * (s - a) * (s - b) * (s - c)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return !((a + b) <= c || (b + c) <= a || (a + c) <= b) ? (float)(Math.sqrt((a + b + c) * (a + b - c) * (a - b + c) * (-a + b + c))) : -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return -1f;\n        }\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        }\n        float s = (float) (a + b + c) / 2;\n        return (float) (Math.sqrt(s * (s - a) * (s - b) * (s - c)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        }\n        float s = (float)((a + b + c) / 2);\n        return Math.round((float)Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if((a+b>c) && (b+c>a) && (c+a>b))\n            return (float)((a*b+a*c+b*c)/2);\n        return -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if ((a + b) > c && (a + c) > b && (b + c) > a) {\n            return (float)(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b * c));\n        }\n        return -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            float area = Math.sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a));\n            return (float) (Math.round((area * 100)) / 100);\n        } else {\n            return -1;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if((a+b)>c && (a+c)>b && (b+c)>a) return (float) (Math.sqrt(a*a+b*b+c*c)-a*b*c)/100;\n        else return -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && b + c > a && a + c > b) {\n            double area = Math.sqrt(\n                Math.pow((double)a, 2) + \n                Math.pow((double)b, 2) - \n                Math.pow((double)a * b, 2) / \n                (a + b + c)\n            ) / 2;\n            return (float) Math.round(area * 100) / 100;\n        } else return -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            float s = (float)((a + b + c) / 2);\n            return (float)(Math.sqrt(s * (s - a) * (s - b) * (s - c)));\n        } else {\n            return (float)-1l;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b < c || a + c < b || b + c < a) {\n            return -1.0f;\n        }\n        double s = (a + b + c) / 2.0;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float)Math.round(area * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float[] side = new float[]{a,b,c};\n        Arrays.sort(side);\n        return side[0] + side[1] > side[2] ? (float)(Math.sqrt(side[0]*side[0] + side[1]*side[1]) * .5) : -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return (a + b > c && a + c > b && b + c > a) ?\n            ((float)(Math.sqrt(\n                a * a + b * b - (2 * a * b * b) / (a + b) + c * c - (2 * a * c * c) / (a + c) + b * b + (2 * b * c * c) / (b + c)\n            ))) / 2 : -1f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) return -1f;\n        float s = (float) (a + b + c) / 2;\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float result = 0;\n        if (a < b+c && b < a+c && c < a+b) {\n            result = (float) (Math.sqrt((a*a+b*b-c*c)*(a*a+c*c-b*b)*(c*c+b*b-a*a)));\n        } else {\n            result = -1;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        // Write your code here\n        float[] side = {a,b,c};\n        Arrays.sort(side);\n        if(side[0] + side[1] > side[2])\n            return (float)Math.round((side[0]*side[1])/2*100)/100;\n        else return -1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a+b<=c || a+c<=b || b+c<=a){\n            return -1f;\n        }\n        double s=(a+b+c)/2;\n        double ans=(s*(s-a)*(s-b)*(s-c))/2;\n        return (float)ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a < 1 || b < 1 || c < 1) return -1f;\n        if(a + b < c || b + c < a || a + c < b) return -1f;\n        double s = (a + b + c) / 2;\n        return (float) (Math.sqrt(s * (s - a) * (s - b) * (s - c)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b < c || a + c < b || b + c < a) return -1;\n        float s = (float)(a + b + c);\n        return (s - Math.max(a, Math.max(b, c))) / 2;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        }\n        BigDecimal area = new BigDecimal((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a));\n        return area.floatValue() / 4;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return (float)Math.round(Math.sqrt(a * a + b * b - 2 * a * b) * 100) / 100.0f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if ((a + b) > c || (a + c) > b || (b + c) > a)\n            return -1f;\n        float area = (float) Math.sqrt(a*a*b*b - 2*a*a*c*c + 2*a*b*b*c - a*a*a*a + 2*a*b*c*c - a*c*c*c + b*b*b*b - 2*b*b*c*c + b*c*c*c);\n        area = (float) Math.round(area*100)/100;\n        return area;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) return -1;\n        double s = (a + b + c) / 2;\n        return (float) Math.round(s * (s - a) * (s - b) * (s - c) / 2 * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        }\n        double s = (a + b + c) / 2;\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        return (a + b > c && a + c > b && b + c > a) ? (float) ((a + b + c) / 2.0) : -1.0f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1.0f;\n        float p = (float) (a + b + c) / 2;\n        float area = (float) Math.sqrt(p * (p - a) * (p - b) * (p - c));\n        return (float) Math.round(area * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        }\n        float s = (float)((a + b + c) / 2);\n        return (float)(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1.0f;\n        }\n        double s = (double)(a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return (float)Math.round(area * 100) / 100;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float s = (a + b + c) / 2;\n        float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        if (area < 0)\n            return -1;\n        else\n            return (float) (Math.round(area * 100) / 100);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        double p = (a + b + c) / 2.0;\n        return (float)(Math.sqrt(p * (p - a) * (p - b) * (p - c)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a)\n            return -1f;\n        double p = a + b + c;\n        return (float)Math.sqrt(p * (p - a) * (p - b) * (p - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || a + c <= b || b + c <= a) return -1f;\n        float area = Math.sqrt(a*a + b*b - 2*a*b*(float)Math.cos((float)(Math.toRadians(60))))*0.5f;\n        return Math.round(area*100f)/100f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float s = (float) (a + b + c) / 2;\n        float area = (float) (Math.sqrt(s * (s - a) * (s - b) * (s - c)));\n        if (area > 0) {\n            return area;\n        }\n        return -1.0f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1f;\n        } else {\n            float s = (a + b + c) / 2;\n            return (float)(s * (s - a) * (s - b) * (s - c));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            float s = (a + b + c) / 2.0f;\n            float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100) / 100.0f;\n        }\n        return -1.0f;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a+b <= c || a+c <= b || b+c <= a) return -1f;\n        float s = (float)(a+b+c) / 2;\n        float area = (float) Math.sqrt(s * (s-a) * (s-b) * (s-c));\n        return area;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a < b+c && b < a+c && c < a+b) {\n            return (float)Math.round((a+b+c)/2.0*100)/100;\n        } else {\n            return -1f;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if ((a + b < c || a + c < b || b + c < a)) return -1f;\n        float s = (float)((a + b + c) / 2);\n        return (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) return -1;\n        float s = (float) (a + b + c);\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float triangle = 0;\n        if (a > 0 && b > 0 && c > 0) {\n            if (a + b > c && b + c > a && c + a > b) {\n                triangle = (a + b + c) / 2.0f;\n                triangle = (float)Math.sqrt(triangle) * (float)Math.sqrt(triangle) * 2;\n            } else {\n                triangle = -1;\n            }\n        }\n        return triangle;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        float temp = a + b;\n        if (temp < c || (a <= 0 || b <= 0 || c <= 0)) {\n            return -1;\n        } else {\n            return (float) Math.round((a * b) / 2 * 100) / 100;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if (a + b <= c || a + c <= b || b + c <= a) return -1;\n        double s = a + b + c;\n        return (float)(s * Math.sqrt(s - a * a - b * b - c * c) / 4);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if(a + b <= c || b + c <= a || c + a <= b) return -1f;\n        // Heron's Formula for calculating area of a triangle\n        // sqrt(s(s - a)(s - b)(s - c))\n        // where s = (a + b + c)/2\n        BigDecimal s = new BigDecimal((a + b + c) / 2);\n        float area = (float)s.multiply(s.subtract(new BigDecimal(a))).multiply(s.subtract(new BigDecimal(b))).multiply(s.subtract(new BigDecimal(c))).sqrt().divide(new BigDecimal(2), 2, BigDecimal.ROUND_HALF_UP).floatValue();\n        return area;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n        if ((a + b > c) && (a + c > b) && (b + c > a))\n            return (float) ((a * b * c) / (4 * Math.sqrt((a * a + b * b + c * c))));\n        return -1;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<>();\n        ArrayList<String> planets = new ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int i = planets.indexOf(planet1);\n            int j = planets.indexOf(planet2);\n            if(i < j) {\n                for(int k = i + 1; k <= j; k++) {\n                    res.add(planets.get(k));\n                }\n            }\n            else {\n                for(int k = j + 1; k <= i; k++) {\n                    res.add(planets.get(k));\n                }\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"));\n        ArrayList<String> output = new ArrayList<String>();\n        if(planets.contains(planet1) && planets.contains(planet2)){\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            for(int i = index1 + 1; i < index2; i++){\n                output.add(planets.get(i));\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int p1 = planets.indexOf(planet1);\n            int p2 = planets.indexOf(planet2);\n            ArrayList<String> res = new ArrayList<>();\n            for (int i = Math.min(p1, p2) + 1; i < Math.max(p1, p2); i++)\n                res.add(planets.get(i));\n            return res;\n        }\n        return new ArrayList<>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> out = new ArrayList<String>();\n        if(!planets.contains(planet1) || !planets.contains(planet2)) return out;\n        int i = planets.indexOf(planet1), j = planets.indexOf(planet2);\n        if(i > j) {\n            i += 1;\n            j += 1;\n            int t = i;\n            i = j;\n            j = t;\n        }\n        for(int k = i + 1; k < j; k++) {\n            out.add(planets.get(k));\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>();\n        ArrayList<String> result = new ArrayList<String>();\n        if((planet1.equals(\"Mercury\")) || (planet2.equals(\"Mercury\")))\n        {\n            planets.add(\"Venus\");\n            planets.add(\"Earth\");\n            planets.add(\"Mars\");\n            planets.add(\"Jupiter\");\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n            planets.add(\"Neptune\");\n        }\n        else if((planet1.equals(\"Venus\")) || (planet2.equals(\"Venus\")))\n        {\n            planets.add(\"Earth\");\n            planets.add(\"Mars\");\n            planets.add(\"Jupiter\");\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n            planets.add(\"Neptune\");\n        }\n        else if((planet1.equals(\"Earth\")) || (planet2.equals(\"Earth\")))\n        {\n            planets.add(\"Mars\");\n            planets.add(\"Jupiter\");\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n            planets.add(\"Neptune\");\n        }\n        else if((planet1.equals(\"Mars\")) || (planet2.equals(\"Mars\")))\n        {\n            planets.add(\"Jupiter\");\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n            planets.add(\"Neptune\");\n        }\n        else if((planet1.equals(\"Jupiter\")) || (planet2.equals(\"Jupiter\")))\n        {\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n            planets.add(\"Neptune\");\n        }\n        else if((planet1.equals(\"Saturn\")) || (planet2.equals(\"Saturn\")))\n        {\n            planets.add(\"Uranus\");\n            planets.add(\"Neptune\");\n        }\n        else if((planet1.equals(\"Uranus\")) || (planet2.equals(\"Uranus\")))\n        {\n            planets.add(\"Neptune\");\n        }\n        else\n        {\n            planets.add(\"Mercury\");\n            planets.add(\"Venus\");\n            planets.add(\"Earth\");\n            planets.add(\"Mars\");\n            planets.add(\"Jupiter\");\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n            planets.add(\"Neptune\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        String[] planets = new String[] {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int i1 = Arrays.asList(planets).indexOf(planet1);\n        int i2 = Arrays.asList(planets).indexOf(planet2);\n        if(i1 == -1 || i2 == -1) return new ArrayList<String>();\n        return new ArrayList<String>(Arrays.asList(planets).subList(Math.min(i1, i2) + 1, Math.max(i1, i2)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"));\n        ArrayList<String> planetsInBetween = new ArrayList<>();\n        if(!planets.contains(planet1) || !planets.contains(planet2)) return planetsInBetween;\n        else{\n            int indexOfPlanet1 = planets.indexOf(planet1);\n            int indexOfPlanet2 = planets.indexOf(planet2);\n            int start = indexOfPlanet1 < indexOfPlanet2 ? indexOfPlanet1 : indexOfPlanet2;\n            int end = indexOfPlanet1 < indexOfPlanet2 ? indexOfPlanet2 : indexOfPlanet1;\n            planets.stream().skip(start).limit(end - start + 1).forEach(p -> planetsInBetween.add(p));\n            return planetsInBetween;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> a = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if(!a.contains(planet1) || !a.contains(planet2)) return new ArrayList<String>();\n        else{\n            int i = 0;\n            for(String s : a) {\n                if(s.equals(planet1)) break;\n                else i++;\n            }\n            int j = i;\n            for(String s : a) {\n                if(s.equals(planet2)) break;\n                else j++;\n            }\n            if(i > j) {\n                int temp = i;\n                i = j;\n                j = temp;\n            }\n            return new ArrayList<String>(a.subList(i, j + 1));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\")));\n        ArrayList<String> result = new ArrayList<String>();\n        if (!planets.contains(planet1)) return result;\n        if (!planets.contains(planet2)) return result;\n        int p1 = planets.indexOf(planet1);\n        int p2 = planets.indexOf(planet2);\n        if (p1 > p2) {\n            int tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        for (int i = p1; i <= p2; i++) {\n            result.add(planets.get(i));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> answer = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\")){\n            answer.add(\"Venus\");\n        }\n        else if (planet1.equals(\"Venus\")){\n            answer.add(\"Earth\");\n        }\n        else if (planet1.equals(\"Earth\")){\n            answer.add(\"Mars\");\n            answer.add(\"Jupiter\");\n        }\n        else if (planet1.equals(\"Mars\")){\n            answer.add(\"Jupiter\");\n            answer.add(\"Saturn\");\n        }\n        else if (planet1.equals(\"Jupiter\")){\n            answer.add(\"Saturn\");\n            answer.add(\"Uranus\");\n        }\n        else if (planet1.equals(\"Saturn\")){\n            answer.add(\"Uranus\");\n            answer.add(\"Neptune\");\n        }\n        else {\n            return answer;\n        }\n        if (planet2.equals(\"Mercury\")){\n            answer.add(\"Venus\");\n        }\n        else if (planet2.equals(\"Venus\")){\n            answer.add(\"Earth\");\n        }\n        else if (planet2.equals(\"Earth\")){\n            answer.add(\"Mars\");\n            answer.add(\"Jupiter\");\n        }\n        else if (planet2.equals(\"Mars\")){\n            answer.add(\"Jupiter\");\n            answer.add(\"Saturn\");\n        }\n        else if (planet2.equals(\"Jupiter\")){\n            answer.add(\"Saturn\");\n            answer.add(\"Uranus\");\n        }\n        else if (planet2.equals(\"Saturn\")){\n            answer.add(\"Uranus\");\n            answer.add(\"Neptune\");\n        }\n        else {\n            return answer;\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> ans = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            for(int i = 0; i < planets.size(); i++) {\n                if(planets.get(i).equals(planet1)) {\n                    for(int j = i + 1; j < planets.size(); j++) {\n                        if(planets.get(j).equals(planet2)) {\n                            break;\n                        }\n                        ans.add(planets.get(j));\n                    }\n                }\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        // 1. Planet names:\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n\n        // 2. Search for planet1 and planet2:\n        ArrayList<String> foundPlanets = new ArrayList<>();\n        for (int i = 0; i < planets.size(); i++) {\n            if (planets.get(i).equals(planet1) || planets.get(i).equals(planet2)) {\n                foundPlanets.add(planets.get(i));\n            }\n        }\n\n        // 3. If planets are not found, return empty arraylist:\n        if (foundPlanets.size() != 2) {\n            return new ArrayList<String>();\n        }\n\n        // 4. If planets are found, find their indexes and sort them:\n        int i1 = planets.indexOf(foundPlanets.get(0));\n        int i2 = planets.indexOf(foundPlanets.get(1));\n        if (i1 > i2) {\n            int t = i1;\n            i1 = i2;\n            i2 = t;\n        }\n\n        // 5. If planets are in the same or adjacent orbits, return empty arraylist:\n        if (i2 - i1 == 0 || i2 - i1 == 1) {\n            return new ArrayList<String>();\n        }\n\n        // 6. Else return the planets between them:\n        ArrayList<String> planetsBetween = new ArrayList<>();\n        for (int i = i1 + 1; i < i2; i++) {\n            planetsBetween.add(planets.get(i));\n        }\n        return planetsBetween;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        // Complete the function\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    ArrayList<String> between = new ArrayList<>();\n    if(planets.length <= 0 || planets.length > 8 || !planets.contains(planet1) || !planets.contains(planet2)) return between;\n    int index1 = Arrays.asList(planets).indexOf(planet1);\n    int index2 = Arrays.asList(planets).indexOf(planet2);\n    if(index1 >= index2) {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        int i1 = 0;\n        int i2 = 0;\n        for(int i = 0; i < planets.size(); i++){\n            if(planets.get(i).equals(planet1))\n                i1 = i;\n            if(planets.get(i).equals(planet2))\n                i2 = i;\n        }\n        ArrayList<String> result = new ArrayList<String>();\n        if(i1 == 0 || i2 == 0)\n            return result;\n        for(int i = 0; i < planets.size(); i++){\n            if(i > i1 && i < i2)\n                result.add(planets.get(i));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        for (int i = 0; i < 8; i++) {\n            if (planets[i].equals(planet1) || planets[i].equals(planet2)) {\n                return result;\n            }\n        }\n        int i1 = -1, i2 = -1;\n        for (int i = 0; i < 8; i++) {\n            if (planets[i].equals(planet1)) {\n                i1 = i;\n                break;\n            }\n        }\n        for (int i = 0; i < 8; i++) {\n            if (planets[i].equals(planet2)) {\n                i2 = i;\n                break;\n            }\n        }\n        for (int i = i1; i <= i2; i++) {\n            result.add(planets[i]);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        // Write your code here.\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if(!planets.contains(planet1) || !planets.contains(planet2)) return new ArrayList<>();\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n        if(i1 < i2) return new ArrayList<>(planets.subList(i1+1, i2));\n        return new ArrayList<>(planets.subList(i1, i2+1));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planetList = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (!planetList.contains(planet1) || !planetList.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        int planet1Index = planetList.indexOf(planet1);\n        int planet2Index = planetList.indexOf(planet2);\n        if (planet1Index == planet2Index) {\n            return new ArrayList<>();\n        }\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1Index > planet2Index) {\n            for (int i = planet2Index + 1; i < planet1Index; i++) {\n                result.add(planetList.get(i));\n            }\n        } else {\n            for (int i = planet1Index + 1; i < planet2Index; i++) {\n                result.add(planetList.get(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    return new ArrayList<String>(Arrays.asList());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> l = new ArrayList<>();\n    if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n    if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n    if(planet1.equals(\"Mercury\")) {\n        if(planet2.equals(\"Neptune\")) {\n            for(int i=1;i<8;i++) {\n                l.add(planets[i]);\n            }\n        }\n        else if(planet2.equals(\"Venus\")) {\n            for(int i=2;i<8;i++) {\n                l.add(planets[i]);\n            }\n        }\n        else if(planet2.equals(\"Earth\")) {\n            for(int i=3;i<8;i++) {\n                l.add(planets[i]);\n            }\n        }\n        else if(planet2.equals(\"Mars\")) {\n            for(int i=4;i<8;i++) {\n                l.add(planets[i]);\n            }\n        }\n        else if(planet2.equals(\"Jupiter\")) {\n            for(int i=5;i<8;i++) {\n                l.add(planets[i]);\n            }\n        }\n        else if(planet2.equals(\"Saturn\")) {\n            for(int i=6;i<8;i++) {\n                l.add(planets[i]);\n            }\n        }\n        else if(planet2.equals(\"Uranus\")) {\n            for(int i=7;i<8;i++) {\n                l.add(planets[i]);\n            }\n        }\n        else {\n            l.add(planets[1]);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n        }\n        if (planet1.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n        }\n        if (planet1.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n        }\n        if (planet1.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n        }\n        if (planet1.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        if (planet1.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        }\n        if (planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n        }\n        if (planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n        }\n        if (planet2.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n        }\n        if (planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n        }\n        if (planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        if (planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (!planets.contains(planet1)) {\n            return new ArrayList<>();\n        }\n        if (!planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        planets.sort(Comparator.naturalOrder());\n        planets.remove(planet1);\n        planets.remove(planet2);\n        ArrayList<String> planetsInRange = new ArrayList<>();\n        int planet1Index = planets.indexOf(planet1);\n        int planet2Index = planets.indexOf(planet2);\n        for (int i = planet1Index; i <= planet2Index; i++) {\n            planetsInRange.add(planets.get(i));\n        }\n        return planetsInRange;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> ans = new ArrayList<String>();\n        boolean flag = true;\n        if(planet1.equals(\"Mercury\")) {\n            if(planet2.equals(\"Venus\")) {\n                ans.add(\"Venus\");\n            } else {\n                flag = false;\n            }\n        } else if(planet1.equals(\"Venus\")) {\n            if(planet2.equals(\"Earth\")) {\n                ans.add(\"Earth\");\n            } else {\n                flag = false;\n            }\n        } else if(planet1.equals(\"Earth\")) {\n            if(planet2.equals(\"Mars\")) {\n                ans.add(\"Mars\");\n            } else {\n                flag = false;\n            }\n        } else if(planet1.equals(\"Mars\")) {\n            if(planet2.equals(\"Jupiter\")) {\n                ans.add(\"Jupiter\");\n            } else {\n                flag = false;\n            }\n        } else if(planet1.equals(\"Jupiter\")) {\n            if(planet2.equals(\"Saturn\")) {\n                ans.add(\"Saturn\");\n            } else {\n                flag = false;\n            }\n        } else if(planet1.equals(\"Saturn\")) {\n            if(planet2.equals(\"Uranus\")) {\n                ans.add(\"Uranus\");\n            } else {\n                flag = false;\n            }\n        } else if(planet1.equals(\"Uranus\")) {\n            if(planet2.equals(\"Neptune\")) {\n                ans.add(\"Neptune\");\n            } else {\n                flag = false;\n            }\n        } else {\n            flag = false;\n        }\n        if(flag) {\n            ans.add(\"Venus\");\n            ans.add(\"Earth\");\n            ans.add(\"Mars\");\n            ans.add(\"Jupiter\");\n            ans.add(\"Saturn\");\n            ans.add(\"Uranus\");\n            ans.add(\"Neptune\");\n            ans.remove(0);\n            ans.remove(planet1.length());\n            ans.remove(planet2.length() - 1);\n            return ans;\n        } else {\n            return new ArrayList<String>();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<String>();\n        if(!planets.contains(planet1) || !planets.contains(planet2)) return res;\n        int index1 = planets.indexOf(planet1), index2 = planets.indexOf(planet2);\n        if(index1 < index2) return res;\n        for(String planet : planets.subList(index2 + 1, index1)) res.add(planet);\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> arr = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> out = new ArrayList<>();\n        if(arr.contains(planet1) && arr.contains(planet2)) {\n            int ind1 = arr.indexOf(planet1);\n            int ind2 = arr.indexOf(planet2);\n            if(ind1 == ind2) return out;\n            if(ind1 < ind2) {\n                for(int i = ind1 + 1; i < ind2; i++) {\n                    out.add(arr.get(i));\n                }\n            }\n            else {\n                for(int i = ind1 - 1; i >= ind2; i--) {\n                    out.add(arr.get(i));\n                }\n            }\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\")) {\n            if (planet2.equals(\"Uranus\")) {\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n            } else if (planet2.equals(\"Neptune\")) {\n                result.add(\"Venus\");\n            } else if (planet2.equals(\"Saturn\")) {\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n            } else if (planet2.equals(\"Jupiter\")) {\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n            } else if (planet2.equals(\"Mars\")) {\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n            } else if (planet2.equals(\"Earth\")) {\n                result.add(\"Venus\");\n            }\n        } else if (planet1.equals(\"Venus\")) {\n            if (planet2.equals(\"Uranus\")) {\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n            } else if (planet2.equals(\"Neptune\")) {\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n            } else if (planet2.equals(\"Saturn\")) {\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n            } else if (planet2.equals(\"Jupiter\")) {\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n            } else if (planet2.equals(\"Mars\")) {\n                result.add(\"Earth\");\n            }\n        } else if (planet1.equals(\"Earth\")) {\n            if (planet2.equals(\"Uranus\")) {\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n            } else if (planet2.equals(\"Neptune\")) {\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n            } else if (planet2.equals(\"Saturn\")) {\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n            } else if (planet2.equals(\"Jupiter\")) {\n", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<>();\n        boolean found = false;\n        for(int i = 0; i < 8; i++){\n            if(found)\n                res.add(Planets[i]);\n            if(Planets[i].equals(planet1))\n                found = true;\n            if(Planets[i].equals(planet2))\n                return res;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> lst = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if(planets.contains(planet1) && planets.contains(planet2)){\n            int i1 = planets.indexOf(planet1);\n            int i2 = planets.indexOf(planet2);\n            if(i1 < i2){\n                for(int i = i1 + 1; i < i2; i++){\n                    lst.add(planets.get(i));\n                }\n                return lst;\n            }\n            else{\n                for(int i = i1 - 1; i >= i2; i--){\n                    lst.add(planets.get(i));\n                }\n                return lst;\n            }\n        }\n        return lst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\n            \"Mercury\",\n            \"Venus\",\n            \"Earth\",\n            \"Mars\",\n            \"Jupiter\",\n            \"Saturn\",\n            \"Uranus\",\n            \"Neptune\"\n        ));\n        int p1Index = planets.indexOf(planet1);\n        int p2Index = planets.indexOf(planet2);\n        if (p1Index == -1 || p2Index == -1) {\n            return result;\n        }\n        if (p1Index <= p2Index) {\n            for (int i = p1Index + 1; i < p2Index; i++) {\n                result.add(planets.get(i));\n            }\n        } else {\n            for (int i = p1Index; i < p2Index; i++) {\n                result.add(planets.get(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\")) {\n            planet1 = \"Mars\";\n        } else if(planet1.equals(\"Venus\")) {\n            planet1 = \"Earth\";\n        } else if(planet1.equals(\"Earth\")) {\n            planet1 = \"Mars\";\n        } else if(planet1.equals(\"Mars\")) {\n            planet1 = \"Jupiter\";\n        } else if(planet1.equals(\"Jupiter\")) {\n            planet1 = \"Saturn\";\n        } else if(planet1.equals(\"Saturn\")) {\n            planet1 = \"Uranus\";\n        } else if(planet1.equals(\"Uranus\")) {\n            planet1 = \"Neptune\";\n        } else {\n            return result;\n        }\n        if(planet2.equals(\"Mercury\")) {\n            planet2 = \"Mars\";\n        } else if(planet2.equals(\"Venus\")) {\n            planet2 = \"Earth\";\n        } else if(planet2.equals(\"Earth\")) {\n            planet2 = \"Mars\";\n        } else if(planet2.equals(\"Mars\")) {\n            planet2 = \"Jupiter\";\n        } else if(planet2.equals(\"Jupiter\")) {\n            planet2 = \"Saturn\";\n        } else if(planet2.equals(\"Saturn\")) {\n            planet2 = \"Uranus\";\n        } else if(planet2.equals(\"Uranus\")) {\n            planet2 = \"Neptune\";\n        } else {\n            return result;\n        }\n        if(planet1.compareTo(planet2) < 0) {\n            result.add(\"Mercury\");\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            for(int i = 0; i < result.size(); i++) {\n                if(result.get(i).equals(planet1)) {\n                    result.subList(0, i).clear();\n                } else if(result.get(i).equals(planet2)) {\n                    result.subList(i + 1, result.size()).clear();\n                    break;\n                }\n            }\n        } else {\n            result.add(\"Neptune\");\n            result.add(\"Uranus\");\n            result.add(\"Saturn\");\n            result.add(\"Jupiter\");\n            result.add(\"Mars\");\n", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> arr = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if(!arr.contains(planet1) || !arr.contains(planet2)) return new ArrayList<String>();\n        int i1 = arr.indexOf(planet1);\n        int i2 = arr.indexOf(planet2);\n        if(i1 < i2) return new ArrayList<String>();\n        ArrayList<String> ans = new ArrayList<String>();\n        for(int i = i1 - 1; i >= i2; i--) {\n            ans.add(arr.get(i));\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    if(planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")){\n        return new ArrayList<String>(Arrays.asList(\"Venus\"));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> arr = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\")) arr.add(\"Venus\");\n        else if(planet1.equals(\"Venus\")) arr.add(\"Earth\");\n        else if(planet1.equals(\"Earth\")) arr.add(\"Mars\");\n        else if(planet1.equals(\"Mars\")) arr.add(\"Jupiter\");\n        else if(planet1.equals(\"Jupiter\")) arr.add(\"Saturn\");\n        else if(planet1.equals(\"Saturn\")) arr.add(\"Uranus\");\n        else if(planet1.equals(\"Uranus\")) arr.add(\"Neptune\");\n        else if(planet1.equals(\"Neptune\")){\n            arr.add(\"Saturn\");\n            arr.add(\"Uranus\");\n        }\n        else return new ArrayList<String>();\n        if(planet2.equals(\"Mercury\")){\n            arr.add(\"Venus\");\n            arr.add(\"Earth\");\n            arr.add(\"Mars\");\n            arr.add(\"Jupiter\");\n            arr.add(\"Saturn\");\n            arr.add(\"Uranus\");\n            arr.add(\"Neptune\");\n        }\n        else if(planet2.equals(\"Venus\")){\n            arr.add(\"Earth\");\n            arr.add(\"Mars\");\n            arr.add(\"Jupiter\");\n            arr.add(\"Saturn\");\n            arr.add(\"Uranus\");\n            arr.add(\"Neptune\");\n        }\n        else if(planet2.equals(\"Earth\")){\n            arr.add(\"Mars\");\n            arr.add(\"Jupiter\");\n            arr.add(\"Saturn\");\n            arr.add(\"Uranus\");\n            arr.add(\"Neptune\");\n        }\n        else if(planet2.equals(\"Mars\")){\n            arr.add(\"Jupiter\");\n            arr.add(\"Saturn\");\n            arr.add(\"Uranus\");\n            arr.add(\"Neptune\");\n        }\n        else if(planet2.equals(\"Jupiter\")){\n            arr.add(\"Saturn\");\n            arr.add(\"Uranus\");\n            arr.add(\"Neptune\");\n        }\n        else if(planet2.equals(\"Saturn\")){\n            arr.add(\"Uranus\");\n            arr.add(\"Neptune\");\n        }\n        else if(planet2.equals(\"Uranus\")){\n            arr.add(\"Neptune\");\n        }\n        else if(planet2.equals(\"Neptune\")){\n            arr.add(\"Saturn\");\n            arr.add(\"U", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(new String[] { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" }));\n        if (!planets.contains(planet1)) {\n            return new ArrayList<>();\n        }\n        if (!planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        ArrayList<String> result = new ArrayList<String>(planets.subList(start, end));\n        result.remove(0);\n        result.remove(result.size() - 1);\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> output=new ArrayList<String>();\n    switch(planet1){\n        case \"Mercury\":\n            if(planet2.equals(\"Venus\")){\n                output.add(\"Venus\");\n                return output;\n            }\n            else if(planet2.equals(\"Earth\")){\n                output.add(\"Venus\");\n                output.add(\"Earth\");\n                return output;\n            }\n            else if(planet2.equals(\"Mars\")){\n                output.add(\"Venus\");\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                return output;\n            }\n            else if(planet2.equals(\"Jupiter\")){\n                output.add(\"Venus\");\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                output.add(\"Jupiter\");\n                return output;\n            }\n            else if(planet2.equals(\"Saturn\")){\n                output.add(\"Venus\");\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                output.add(\"Jupiter\");\n                output.add(\"Saturn\");\n                return output;\n            }\n            else if(planet2.equals(\"Uranus\")){\n                output.add(\"Venus\");\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                output.add(\"Jupiter\");\n                output.add(\"Saturn\");\n                output.add(\"Uranus\");\n                return output;\n            }\n            else if(planet2.equals(\"Neptune\")){\n                output.add(\"Venus\");\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                output.add(\"Jupiter\");\n                output.add(\"Saturn\");\n                output.add(\"Uranus\");\n                output.add(\"Neptune\");\n                return output;\n            }\n            else{\n                return new ArrayList<String>();\n            }\n            break;\n        case \"Venus\":\n            if(planet2.equals(\"Earth\")){\n                output.add(\"Earth\");\n                return output;\n            }\n            else if(planet2.equals(\"Mars\")){\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                return output;\n            }\n            else if(planet2.equals(\"Jupiter\")){\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                output.add(\"Jupiter\");\n                return output;\n            }\n            else if(planet2.equals(\"Saturn\")){\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                output.add(\"J", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if(planets.contains(planet1) && planets.contains(planet2)){\n            int i1 = planets.indexOf(planet1);\n            int i2 = planets.indexOf(planet2);\n            ArrayList<String> a = new ArrayList<>();\n            if(i1 < i2){\n                for(int i=i1+1; i<i2; i++){\n                    a.add(planets.get(i));\n                }\n            }\n            else{\n                for(int i=i1; i<planets.size(); i++){\n                    a.add(planets.get(i));\n                }\n                for(int i=0; i<i2; i++){\n                    a.add(planets.get(i));\n                }\n            }\n            return a;\n        }\n        return new ArrayList<>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> ret = new ArrayList<String>();\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int planet1Index = -1;\n        int planet2Index = -1;\n        for(int i = 0; i < planets.length; i++) {\n            if(planets[i].equals(planet1)) {\n                planet1Index = i;\n            } else if(planets[i].equals(planet2)) {\n                planet2Index = i;\n            }\n        }\n        if(planet1Index == -1 || planet2Index == -1) {\n            return ret;\n        } else {\n            int min = Math.min(planet1Index, planet2Index);\n            int max = Math.max(planet1Index, planet2Index);\n            for(int i = min + 1; i < max; i++) {\n                ret.add(planets[i]);\n            }\n            return ret;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> sol = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\")){\n            sol.add(\"Venus\");\n            sol.add(\"Earth\");\n            sol.add(\"Mars\");\n            sol.add(\"Jupiter\");\n            sol.add(\"Saturn\");\n            sol.add(\"Uranus\");\n            sol.add(\"Neptune\");\n        }else if(planet1.equals(\"Venus\")){\n            sol.add(\"Earth\");\n            sol.add(\"Mars\");\n            sol.add(\"Jupiter\");\n            sol.add(\"Saturn\");\n            sol.add(\"Uranus\");\n            sol.add(\"Neptune\");\n        }else if(planet1.equals(\"Earth\")){\n            sol.add(\"Mars\");\n            sol.add(\"Jupiter\");\n            sol.add(\"Saturn\");\n            sol.add(\"Uranus\");\n            sol.add(\"Neptune\");\n        }else if(planet1.equals(\"Mars\")){\n            sol.add(\"Jupiter\");\n            sol.add(\"Saturn\");\n            sol.add(\"Uranus\");\n            sol.add(\"Neptune\");\n        }else if(planet1.equals(\"Jupiter\")){\n            sol.add(\"Saturn\");\n            sol.add(\"Uranus\");\n            sol.add(\"Neptune\");\n        }else if(planet1.equals(\"Saturn\")){\n            sol.add(\"Uranus\");\n            sol.add(\"Neptune\");\n        }else if(planet1.equals(\"Uranus\")){\n            sol.add(\"Neptune\");\n        }else if(planet1.equals(\"Neptune\")){\n            sol.add(\"Neptune\");\n        }else{\n            return sol;\n        }\n        if(planet2.equals(\"Mercury\")){\n            sol.add(\"Venus\");\n            sol.add(\"Earth\");\n            sol.add(\"Mars\");\n            sol.add(\"Jupiter\");\n            sol.add(\"Saturn\");\n            sol.add(\"Uranus\");\n            sol.add(\"Neptune\");\n        }else if(planet2.equals(\"Venus\")){\n            sol.add(\"Earth\");\n            sol.add(\"Mars\");\n            sol.add(\"Jupiter\");\n            sol.add(\"Saturn\");\n            sol.add(\"Uranus\");\n            sol.add(\"Neptune\");\n        }else if(planet2.equals(\"Earth\")){\n            sol.add(\"Mars\");\n            sol.add(\"Jupiter\");\n            sol.add(\"Saturn\");\n            sol.add(\"Uranus", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n        ArrayList<String> result = new ArrayList<String>();\n        if(i1 == -1 || i2 == -1) {\n            return result;\n        }\n        for(int i = Math.min(i1, i2) + 1; i < Math.max(i1, i2); i++) {\n            result.add(planets.get(i));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int indexPlanet1 = Arrays.asList(planets).indexOf(planet1);\n            int indexPlanet2 = Arrays.asList(planets).indexOf(planet2);\n            if (indexPlanet1 <= indexPlanet2) {\n                return new ArrayList<String>(Arrays.asList(planets.subList(indexPlanet1+1, indexPlanet2)));\n            } else {\n                return new ArrayList<String>(Arrays.asList(planets.subList(indexPlanet2+1, indexPlanet1)));\n            }\n        } else {\n            return result;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> list = new ArrayList<String>();\n        String[] p = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        if(planet1.equals(\"Mercury\")) {\n            list.add(planet2);\n            for(int i = 1; i < p.length; i++) {\n                if(p[i].equals(planet2)) {\n                    break;\n                }\n                list.add(p[i]);\n            }\n        }\n        if(planet1.equals(\"Venus\")) {\n            list.add(planet2);\n            for(int i = 1; i < p.length; i++) {\n                if(p[i].equals(planet2)) {\n                    break;\n                }\n                list.add(p[i]);\n            }\n        }\n        if(planet1.equals(\"Earth\")) {\n            list.add(planet2);\n            for(int i = 2; i < p.length; i++) {\n                if(p[i].equals(planet2)) {\n                    break;\n                }\n                list.add(p[i]);\n            }\n        }\n        if(planet1.equals(\"Mars\")) {\n            list.add(planet2);\n            for(int i = 3; i < p.length; i++) {\n                if(p[i].equals(planet2)) {\n                    break;\n                }\n                list.add(p[i]);\n            }\n        }\n        if(planet1.equals(\"Jupiter\")) {\n            list.add(planet2);\n            for(int i = 4; i < p.length; i++) {\n                if(p[i].equals(planet2)) {\n                    break;\n                }\n                list.add(p[i]);\n            }\n        }\n        if(planet1.equals(\"Saturn\")) {\n            list.add(planet2);\n            for(int i = 5; i < p.length; i++) {\n                if(p[i].equals(planet2)) {\n                    break;\n                }\n                list.add(p[i]);\n            }\n        }\n        if(planet1.equals(\"Uranus\")) {\n            list.add(planet2);\n            for(int i = 6; i < p.length; i++) {\n                if(p[i].equals(planet2)) {\n                    break;\n                }\n                list.add(p[i]);\n            }\n        }\n        if(planet1.equals(\"Neptune\")) {\n            list", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        List<String> p = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        ArrayList<String> r = new ArrayList<String>();\n        if (p.contains(planet1) && p.contains(planet2)) {\n            int i1 = p.indexOf(planet1);\n            int i2 = p.indexOf(planet2);\n            if (i1 < i2) {\n                for (int i = i1+1; i < i2; i++)\n                    r.add(p.get(i));\n            } else {\n                for (int i = i2+1; i < i1; i++)\n                    r.add(p.get(i));\n            }\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> answer = new ArrayList<>();\n        if(planets.contains(planet1) && planets.contains(planet2)){\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if(index1 < index2){\n                for(int i = index1 + 1; i < index2; i++)\n                    answer.add(planets.get(i));\n            }\n            else {\n                for(int i = index2 + 1; i < index1; i++)\n                    answer.add(planets.get(i));\n            }\n            return answer;\n        }\n        else return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planetNames = new ArrayList<String>(Arrays.asList((\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")));\n        ArrayList<String> returnPlanets = new ArrayList<String>();\n        // Check if planets are valid\n        if (!planetNames.contains(planet1) || !planetNames.contains(planet2)) return returnPlanets;\n        // Get planets index\n        int planet1Index = planetNames.indexOf(planet1);\n        int planet2Index = planetNames.indexOf(planet2);\n        // Handle planets in the wrong order\n        if (planet1Index > planet2Index) {\n            planet1Index = planet2Index;\n            planet2Index = planet1Index;\n        }\n        // Check planets index\n        if (planet1Index == planet2Index - 1) {\n            returnPlanets.add(planetNames.get(planet1Index + 1));\n            return returnPlanets;\n        }\n        // Check if planets are planets\n        if (planet1Index == 0 && planet2Index == 7) {\n            return returnPlanets;\n        }\n        // Add planets between index\n        for (int i = planet1Index + 1; i < planet2Index; i++) {\n            returnPlanets.add(planetNames.get(i));\n        }\n        return returnPlanets;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> pairs = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if(index1 < 0 || index2 < 0) {\n            return pairs;\n        }\n        if(index1 > index2) {\n            index1 = index1 ^ index2;\n            index2 = index1 ^ index2;\n            index1 = index1 ^ index2;\n        }\n        index1 += 1;\n        index2 -= 1;\n        while(index1 <= index2) {\n            pairs.add(planets.get(index1));\n            index1 += 1;\n        }\n        return pairs;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planetList = new ArrayList<String>(Arrays.asList(\n            new String[] {\n                \"Mercury\",\n                \"Venus\",\n                \"Earth\",\n                \"Mars\",\n                \"Jupiter\",\n                \"Saturn\",\n                \"Uranus\",\n                \"Neptune\"\n            }\n        ));\n        if(!planetList.contains(planet1) || !planetList.contains(planet2)) return new ArrayList<String>();\n        int index1 = planetList.indexOf(planet1);\n        int index2 = planetList.indexOf(planet2);\n        if(index1 == index2) return new ArrayList<String>();\n        if(index1 < index2) {\n            int min = index1;\n            int max = index2;\n            index1 = min;\n            index2 = max;\n        }\n        else {\n            int min = index2;\n            int max = index1;\n            index1 = min;\n            index2 = max;\n        }\n        ArrayList<String> out = new ArrayList<String>();\n        for(int i = index1 + 1; i < index2; i++) {\n            out.add(planetList.get(i));\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            ArrayList<String> between = new ArrayList<String>();\n            for (String planet : planets) {\n                if (planets.indexOf(planet) > planets.indexOf(planet1) && planets.indexOf(planet) < planets.indexOf(planet2)) {\n                    between.add(planet);\n                }\n            }\n            return between;\n        } else {\n            return new ArrayList<String>();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> output = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\")) {\n            if (planet2.equals(\"Venus\")) {\n                output.add(\"Venus\");\n                return output;\n            } else if (planet2.equals(\"Earth\")) {\n                output.add(\"Venus\");\n                output.add(\"Earth\");\n                return output;\n            } else if (planet2.equals(\"Mars\")) {\n                output.add(\"Venus\");\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                return output;\n            } else if (planet2.equals(\"Jupiter\")) {\n                output.add(\"Venus\");\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                output.add(\"Jupiter\");\n                return output;\n            } else if (planet2.equals(\"Saturn\")) {\n                output.add(\"Venus\");\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                output.add(\"Jupiter\");\n                output.add(\"Saturn\");\n                return output;\n            } else if (planet2.equals(\"Uranus\")) {\n                output.add(\"Venus\");\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                output.add(\"Jupiter\");\n                output.add(\"Saturn\");\n                output.add(\"Uranus\");\n                return output;\n            } else if (planet2.equals(\"Neptune\")) {\n                output.add(\"Venus\");\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                output.add(\"Jupiter\");\n                output.add(\"Saturn\");\n                output.add(\"Uranus\");\n                output.add(\"Neptune\");\n                return output;\n            }\n        } else if (planet1.equals(\"Venus\")) {\n            if (planet2.equals(\"Earth\")) {\n                output.add(\"Earth\");\n                return output;\n            } else if (planet2.equals(\"Mars\")) {\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                return output;\n            } else if (planet2.equals(\"Jupiter\")) {\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                output.add(\"Jupiter\");\n                return output;\n            } else if (planet2.equals(\"Saturn\")) {\n                output.add(\"Earth\");\n                output.add(\"Mars\");\n                output.add(\"Jupiter\");\n                output.add(\"Saturn\");\n                return output;\n            } else if (planet2.equals", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> out = new ArrayList<String>();\n        ArrayList<String> planetList = new ArrayList<String>(Arrays.asList((\"Mercury\"), (\"Venus\"), (\"Earth\"), (\"Mars\"), (\"Jupiter\"), (\"Saturn\"), (\"Uranus\"), (\"Neptune\")));\n        if(planetList.contains(planet1) && planetList.contains(planet2)) {\n            for(int i = 0; i < planetList.size(); i++) {\n                if(planetList.get(i).equals(planet1) || planetList.get(i).equals(planet2)) {\n                    continue;\n                }\n                if(planetList.get(i).compareTo(planet1) < planetList.get(i).compareTo(planet2)) {\n                    out.add(planetList.get(i));\n                }\n            }\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        if (planets.length == 0) {\n            return new ArrayList<String>();\n        }\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                int start = i;\n                break;\n            }\n        }\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet2)) {\n                int end = i;\n                break;\n            }\n        }\n        if (start > end) {\n            return new ArrayList<String>();\n        }\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets[i]);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<>();\n        if(!Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\").contains(planet1) || !Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\").contains(planet2)) return res;\n        if(planet1.compareTo(planet2) == 0) return res;\n        int i1 = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\").indexOf(planet1);\n        int i2 = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\").indexOf(planet2);\n        if(i1 > i2) {\n            i1 = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\").indexOf(planet2);\n            i2 = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\").indexOf(planet1);\n        }\n        for(int i = i1 + 1; i < i2; i++) res.add(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\").get(i));\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((\"Mercury\"),(\"Venus\"),(\"Earth\"),(\"Mars\"),(\"Jupiter\"),(\"Saturn\"),(\"Uranus\"),(\"Neptune\")));\n        int planet1index = planets.indexOf(planet1);\n        int planet2index = planets.indexOf(planet2);\n        if(planet1index == -1 || planet2index == -1) return new ArrayList<String>();\n        ArrayList<String> betweenPlanets = new ArrayList<String>();\n        if(planet1index < planet2index) {\n            for(int i = planet1index; i <= planet2index; i++) {\n                betweenPlanets.add(planets.get(i));\n            }\n        }\n        else {\n            for(int i = planet1index; i >= planet2index; i--) {\n                betweenPlanets.add(planets.get(i));\n            }\n        }\n        return betweenPlanets;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> output = new ArrayList<>();\n        ArrayList<String> planet = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        for(int i = 0; i < planet.size(); i++) {\n            if(planet.get(i).equals(planet1)) {\n                for(int j = i + 1; j < planet.size(); j++) {\n                    if(planet.get(j).equals(planet2)) {\n                        for(int k = i + 1; k < j; k++) {\n                            output.add(planet.get(k));\n                        }\n                        return output;\n                    }\n                }\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> res = new ArrayList<String>();\n        if(!planets.contains(planet1) || !planets.contains(planet2)) return res;\n        int planet1Index = planets.indexOf(planet1);\n        int planet2Index = planets.indexOf(planet2);\n        int startIndex = Math.min(planet1Index, planet2Index);\n        int endIndex = Math.max(planet1Index, planet2Index);\n        for(int i = startIndex + 1; i < endIndex; i++) {\n            res.add(planets.get(i));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\")) {\n            planets.add(\"Venus\");\n        } else if (planet1.equals(\"Venus\")) {\n            planets.add(\"Earth\");\n            planets.add(\"Mars\");\n        } else if (planet1.equals(\"Earth\")) {\n            planets.add(\"Mars\");\n            planets.add(\"Jupiter\");\n        } else if (planet1.equals(\"Mars\")) {\n            planets.add(\"Jupiter\");\n            planets.add(\"Saturn\");\n        } else if (planet1.equals(\"Jupiter\")) {\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n        } else if (planet1.equals(\"Saturn\")) {\n            planets.add(\"Uranus\");\n            planets.add(\"Neptune\");\n        } else if (planet1.equals(\"Uranus\")) {\n            planets.add(\"Neptune\");\n        } else if (planet1.equals(\"Neptune\")) {\n        } else {\n            return planets;\n        }\n        if (planet2.equals(\"Mercury\")) {\n            planets.add(\"Venus\");\n        } else if (planet2.equals(\"Venus\")) {\n            planets.add(\"Earth\");\n            planets.add(\"Mars\");\n        } else if (planet2.equals(\"Earth\")) {\n            planets.add(\"Mars\");\n            planets.add(\"Jupiter\");\n        } else if (planet2.equals(\"Mars\")) {\n            planets.add(\"Jupiter\");\n            planets.add(\"Saturn\");\n        } else if (planet2.equals(\"Jupiter\")) {\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n        } else if (planet2.equals(\"Saturn\")) {\n            planets.add(\"Uranus\");\n            planets.add(\"Neptune\");\n        } else if (planet2.equals(\"Uranus\")) {\n            planets.add(\"Neptune\");\n        } else if (planet2.equals(\"Neptune\")) {\n        } else {\n            return planets;\n        }\n        return planets;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> result = new ArrayList<>();\n        if (planets.indexOf(planet1) < planets.indexOf(planet2) && planets.indexOf(planet1) >= 0 && planets.indexOf(planet2) >= 0) {\n            for (int i = planets.indexOf(planet1) + 1; i < planets.indexOf(planet2); i++) {\n                result.add(planets.get(i));\n            }\n            return result;\n        }\n        return new ArrayList<>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int ind1 = planets.indexOf(planet1);\n            int ind2 = planets.indexOf(planet2);\n            ArrayList<String> ret = new ArrayList<String>();\n            if (ind1 < ind2) {\n                for (int i = ind1 + 1; i < ind2; i++) {\n                    ret.add(planets.get(i));\n                }\n            } else {\n                for (int i = ind2 + 1; i < ind1; i++) {\n                    ret.add(planets.get(i));\n                }\n                for (int i = 0; i < ind2; i++) {\n                    ret.add(planets.get(i));\n                }\n            }\n            return ret;\n        } else {\n            return new ArrayList<String>();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n        }\n        else if (planet1.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n        }\n        else if (planet1.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n        }\n        else if (planet1.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n        }\n        else if (planet1.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        else if (planet1.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        }\n        else if (planet1.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n        }\n        else if (planet1.equals(\"Neptune\")) {\n            return result;\n        }\n        if (planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n        }\n        else if (planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n        }\n        else if (planet2.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n        }\n        else if (planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n        }\n        else if (planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        else if (planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        }\n        else if (planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n        }\n        else if (planet2.equals(\"Neptune\")) {\n            return result;\n        }\n        Collections.sort(result);\n        result.remove(planet1);\n        result.remove(planet2);\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> v = new ArrayList<String>();\n        if((planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) && (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))) {\n            if(planet1.equals(\"Earth\") && planet2.equals(\"Mars\")) {\n                v.add(\"Mercury\");\n                v.add(\"Venus\");\n                return v;\n            }\n            else if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n                v.add(\"Venus\");\n                v.add(\"Earth\");\n                v.add(\"Mars\");\n                v.add(\"Jupiter\");\n                v.add(\"Saturn\");\n                return v;\n            }\n            else {\n                if(planet1.equals(\"Jupiter\")) {\n                    v.add(\"Saturn\");\n                    v.add(\"Uranus\");\n                    v.add(\"Neptune\");\n                    return v;\n                }\n                else if(planet1.equals(\"Saturn\")) {\n                    v.add(\"Uranus\");\n                    v.add(\"Neptune\");\n                    return v;\n                }\n                else if(planet1.equals(\"Uranus\")) {\n                    v.add(\"Neptune\");\n                    return v;\n                }\n                else if(planet1.equals(\"Neptune\")) {\n                    return v;\n                }\n                else {\n                    v.add(planet1);\n                    if(planet1.equals(\"Mercury\")) {\n                        v.add(\"Venus\");\n                        v.add(\"Earth\");\n                        v.add(\"Mars\");\n                        v.add(\"Jupiter\");\n                        v.add(\"Saturn\");\n                        v.add(\"Uranus\");\n                        v.add(\"Neptune\");\n                    }\n                    else if(planet1.equals(\"Venus\")) {\n                        v.add(\"Earth\");\n                        v.add(\"Mars\");\n                        v.add(\"Jupiter\");\n                        v.add(\"Saturn\");\n                        v.add(\"", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\").contains(planet1)) return result;\n        if(!Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\").contains(planet2)) return result;\n        // Write your code here\n        ArrayList<String> planets = new ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if(index1 > index2){\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        for(int i = index1; i <= index2; i++){\n            result.add(planets.get(i));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if(planets.contains(planet1) && planets.contains(planet2)){\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if(index1 < index2){\n                for(int i = index1; i < index2; i++)\n                    result.add(planets.get(i));\n            } else {\n                for(int i = index2; i < index1; i++)\n                    result.add(planets.get(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> output = new ArrayList<String>();\n        int startPos = planets.indexOf(planet1);\n        int endPos = planets.indexOf(planet2);\n        if(startPos == -1 || endPos == -1) return output;\n        if(startPos < endPos) {\n            for(int i = startPos + 1; i < endPos; i++) {\n                output.add(planets.get(i));\n            }\n        } else {\n            for(int i = startPos; i >= endPos; i--) {\n                output.add(planets.get(i));\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> list1 = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> list2 = new ArrayList<String>(Arrays.asList(planet1, planet2));\n        if (list1.containsAll(list2)) {\n            int i1 = list1.indexOf(planet1);\n            int i2 = list1.indexOf(planet2);\n            ArrayList<String> list3 = new ArrayList<String>();\n            for (int i = i1 + 1; i < i2; i++)\n                list3.add(list1.get(i));\n            return list3;\n        }\n        else\n            return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if(index1 < index2) {\n                for(int i = index1 + 1; i < index2; i++) {\n                    result.add(planets.get(i));\n                }\n            }\n            else {\n                for(int i = index2 + 1; i < index1; i++) {\n                    result.add(planets.get(i));\n                }\n            }\n            return result;\n        }\n        else {\n            return result;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            ArrayList<String> result = new ArrayList<>();\n            if (index1 < index2) {\n                for (int i = index1 + 1; i < index2; i++) {\n                    result.add(planets.get(i));\n                }\n            } else {\n                for (int i = index1 + 1; i < 8; i++) {\n                    result.add(planets.get(i));\n                }\n                for (int i = 0; i < index2; i++) {\n                    result.add(planets.get(i));\n                }\n            }\n            return result;\n        }\n        return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> sortedplanets = new ArrayList<String>(planets);\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        int i = Math.min(index1, index2);\n        int j = Math.max(index1, index2);\n        for(int k = i; k <= j; k++){\n            sortedplanets.remove(planets.get(k));\n        }\n        return sortedplanets;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> list = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (!list.contains(planet1) || !list.contains(planet2))\n            return new ArrayList<String>();\n        int index1 = list.indexOf(planet1);\n        int index2 = list.indexOf(planet2);\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        return new ArrayList<String>(list.subList(index1 + 1, index2));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> list = new ArrayList<String>();\n        ArrayList<String> temp = new ArrayList<String>();\n        if((planet1.equals(\"Mercury\"))&&(planet2.equals(\"Neptune\")))\n            temp = new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n        if((planet1.equals(\"Mercury\"))&&(planet2.equals(\"Uranus\")))\n            temp = new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n        if((planet1.equals(\"Mercury\"))&&(planet2.equals(\"Saturn\")))\n            temp = new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"));\n        if((planet1.equals(\"Mercury\"))&&(planet2.equals(\"Jupiter\")))\n            temp = new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\", \"Mars\"));\n        if((planet1.equals(\"Mercury\"))&&(planet2.equals(\"Mars\")))\n            temp = new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\"));\n        if((planet1.equals(\"Mercury\"))&&(planet2.equals(\"Earth\")))\n            temp = new ArrayList<String>(Arrays.asList(\"Venus\"));\n        if((planet1.equals(\"Venus\"))&&(planet2.equals(\"Neptune\")))\n            temp = new ArrayList<String>(Arrays.asList(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n        if((planet1.equals(\"Venus\"))&&(planet2.equals(\"Uranus\")))\n            temp = new ArrayList<String>(Arrays.asList(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n        if((planet1.equals(\"Venus\"))&&(planet2.equals(\"Saturn\")))\n            temp = new ArrayList<String>(Arrays.asList(\"Earth\", \"Mars\", \"Jupiter\"));\n        if((planet1.equals(\"Venus\"))&&(planet2.equals(\"Jupiter\")))\n            temp = new ArrayList<String>(Arrays.asList(\"Earth\", \"Mars\"));\n        if((planet1.equals(\"Venus\"))&&(planet2.equals(\"Mars\")))\n            temp = new ArrayList<String>(Arrays.asList(\"Earth\"));\n        if((planet1.equals(\"Venus\"))&&(planet2", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n        }\n        if(planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            result.add(\"Mars\");\n        }\n        if(planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n        }\n        if(planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            result.add(\"Mercury\");\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> result = new ArrayList<>();\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n        if(i1 < 0 || i2 < 0 || i1 >= planets.size() || i2 >= planets.size() || i2 <= i1){\n            return result;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> res = new ArrayList<>();\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if (index1 < index2) {\n                for (int i = index1 + 1; i < index2; i++)\n                    res.add(planets.get(i));\n            } else {\n                for (int i = index2 + 1; i < index1; i++)\n                    res.add(planets.get(i));\n                for (int i = 0; i < index1; i++)\n                    res.add(planets.get(i));\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> temp = new ArrayList<>();\n        if(planet1.equals(\"Mercury\")) temp.add(\"Venus\");\n        else if(planet1.equals(\"Venus\")) temp.addAll(Arrays.asList(\"Earth\"));\n        else if(planet1.equals(\"Earth\")) temp.addAll(Arrays.asList(\"Mars\",\"Jupiter\"));\n        else if(planet1.equals(\"Mars\")) temp.addAll(Arrays.asList(\"Saturn\",\"Uranus\"));\n        else if(planet1.equals(\"Jupiter\")) temp.addAll(Arrays.asList(\"Saturn\",\"Uranus\"));\n        else if(planet1.equals(\"Saturn\")) temp.addAll(Arrays.asList(\"Uranus\"));\n        else if(planet1.equals(\"Uranus\")) temp.addAll(Arrays.asList(\"Neptune\"));\n        else if(planet1.equals(\"Neptune\")) temp.addAll(Arrays.asList());\n        else return new ArrayList<String>();\n        if(planet2.equals(\"Mercury\")) temp.addAll(Arrays.asList(\"Venus\"));\n        else if(planet2.equals(\"Venus\")) temp.addAll(Arrays.asList(\"Earth\"));\n        else if(planet2.equals(\"Earth\")) temp.addAll(Arrays.asList(\"Mars\",\"Jupiter\"));\n        else if(planet2.equals(\"Mars\")) temp.addAll(Arrays.asList(\"Saturn\",\"Uranus\"));\n        else if(planet2.equals(\"Jupiter\")) temp.addAll(Arrays.asList(\"Saturn\",\"Uranus\"));\n        else if(planet2.equals(\"Saturn\")) temp.addAll(Arrays.asList(\"Uranus\"));\n        else if(planet2.equals(\"Uranus\")) temp.addAll(Arrays.asList(\"Neptune\"));\n        else if(planet2.equals(\"Neptune\")) temp.addAll(Arrays.asList());\n        else return new ArrayList<String>();\n        return temp;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> ans = new ArrayList<String>();\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int i1 = planets.indexOf(planet1);\n            int i2 = planets.indexOf(planet2);\n            if(i1 < i2) {\n                for(int i = i1; i <= i2; i++) {\n                    ans.add(planets.get(i));\n                }\n            } else {\n                for(int i = i1; i >= i2; i--) {\n                    ans.add(planets.get(i));\n                }\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        // Write your code here\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n                if(planet1.equals(\"Mercury\")){\n                    result.add(\"Venus\");\n                    return result;\n                }\n                if(planet1.equals(\"Venus\")){\n                    result.add(\"Earth\");\n                    result.add(\"Mars\");\n                    return result;\n                }\n                if(planet1.equals(\"Earth\")){\n                    result.add(\"Mars\");\n                    result.add(\"Jupiter\");\n                    return result;\n                }\n                if(planet1.equals(\"Mars\")){\n                    result.add(\"Jupiter\");\n                    result.add(\"Saturn\");\n                    return result;\n                }\n                if(planet1.equals(\"Jupiter\")){\n                    result.add(\"Saturn\");\n                    result.add(\"Uranus\");\n                    return result;\n                }\n                if(planet1.equals(\"Saturn\")){\n                    result.add(\"Uranus\");\n                    return result;\n                }\n                if(planet1.equals(\"Uranus\")){\n                    result.add(\"Neptune\");\n                    return result;\n                }\n                if(planet1.equals(\"Neptune\")){\n                    return result;\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> answer = new ArrayList<String>();\n    ArrayList<String> planets = new ArrayList<String>();\n    planets.add(\"Mercury\");planets.add(\"Venus\");planets.add(\"Earth\");planets.add(\"Mars\");\n    planets.add(\"Jupiter\");planets.add(\"Saturn\");planets.add(\"Uranus\");planets.add(\"Neptune\");\n    ArrayList<Integer> dist = new ArrayList<Integer>();\n    for(int i=0;i<planets.size();i++){\n        if(planets.get(i).equals(planet1) || planets.get(i).equals(planet2))\n            return answer;\n        dist.add(i);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> answer = new ArrayList<String>();\n        String[] planets = new String[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        for(int i = 0; i < planets.length; i++) {\n            if(planets[i].equals(planet1)) {\n                for(int j = i + 1; j < i + 2; j++) {\n                    answer.add(planets[j]);\n                }\n                for(int j = i + 2; j < planets.length; j++) {\n                    answer.add(planets[j]);\n                }\n                break;\n            } else if(planets[i].equals(planet2)) {\n                for(int j = i - 1; j > i - 2; j--) {\n                    answer.add(planets[j]);\n                }\n                for(int j = 0; j < i - 2; j++) {\n                    answer.add(planets[j]);\n                }\n                break;\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")){\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Venus\") || planet2.equals(\"Venus\")){\n            result.add(\"Earth\");\n        }\n        if(planet1.equals(\"Earth\") || planet2.equals(\"Earth\")){\n            result.add(\"Mars\");\n        }\n        if(planet1.equals(\"Mars\") || planet2.equals(\"Mars\")){\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")){\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")){\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")){\n            result.add(\"Neptune\");\n        }\n        if(planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")){\n            result.add(\"Pluto\");\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> result = new ArrayList<String>();\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int i1 = planets.indexOf(planet1);\n            int i2 = planets.indexOf(planet2);\n            if(i1 < i2) {\n                for(int i = i1 + 1; i < i2; i++) {\n                    result.add(planets.get(i));\n                }\n            } else {\n                for(int i = i2 + 1; i < i1; i++) {\n                    result.add(planets.get(i));\n                }\n                for(int i = i1 + 1; i < planets.size(); i++) {\n                    result.add(planets.get(i));\n                }\n                for(int i = 0; i < i2; i++) {\n                    result.add(planets.get(i));\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> res = new ArrayList<String>();\n    String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")){\n    res.add(\"Venus\");\n    res.add(\"Earth\");\n    res.add(\"Mars\");\n    res.add(\"Jupiter\");\n    res.add(\"Saturn\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> list = new ArrayList<>();\n        ArrayList<String> array = new ArrayList<>();\n        ArrayList<String> output = new ArrayList<>();\n        ArrayList<Integer> r=new ArrayList<>();\n        int index1 = 0;\n        int index2 = 0;\n        ArrayList<String> planets = new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        try{\n            index1 = planets.indexOf(planet1);\n            index2 = planets.indexOf(planet2);\n        }\n        catch(Exception e){\n            return output;\n        }\n        if(index1 > index2){\n            int t = index2;\n            index2 = index1;\n            index1 = t;\n        }\n        for(int i = index1; i <= index2; i++){\n            list.add(planets.get(i));\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planetList = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planetList.contains(planet1) && planetList.contains(planet2)) {\n            int planetIndex1 = planetList.indexOf(planet1);\n            int planetIndex2 = planetList.indexOf(planet2);\n            if (planetIndex1 > planetIndex2) {\n                int temp = planetIndex1;\n                planetIndex1 = planetIndex2;\n                planetIndex2 = temp;\n            }\n            planetList.subList(planetIndex1, planetIndex2+1).clear();\n            return planetList;\n        }\n        return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> a = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int i1 = 0, i2 = 0;\n        for(int i = 0; i < 8; i++) {\n            if(planet1.equals(a.get(i))) i1 = i;\n            if(planet2.equals(a.get(i))) i2 = i;\n        }\n        if(i1 == 0 || i2 == 0) return new ArrayList<String>();\n        else if(i1 < i2) {\n            ArrayList<String> ans = new ArrayList<String>();\n            for(int i = i1 + 1; i < i2; i++) ans.add(a.get(i));\n            return ans;\n        }\n        else {\n            ArrayList<String> ans = new ArrayList<String>();\n            for(int i = i1 - 1; i >= i2; i--) ans.add(a.get(i));\n            Collections.reverse(ans);\n            return ans;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>();\n        ArrayList<String> list1 = new ArrayList<String>();\n        ArrayList<String> list2 = new ArrayList<String>();\n        ArrayList<String> list3 = new ArrayList<String>();\n        ArrayList<String> list4 = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Venus\")) {\n            list1.add(\"Venus\");\n            planets = list1;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n            list2.add(\"Venus\");\n            list2.add(\"Earth\");\n            planets = list2;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            list3.add(\"Venus\");\n            list3.add(\"Earth\");\n            list3.add(\"Mars\");\n            planets = list3;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            list4.add(\"Venus\");\n            list4.add(\"Earth\");\n            list4.add(\"Mars\");\n            list4.add(\"Jupiter\");\n            planets = list4;\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\")) {\n            list1.add(\"Earth\");\n            planets = list1;\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n            list2.add(\"Earth\");\n            list2.add(\"Mars\");\n            planets = list2;\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Jupiter\")) {\n            list3.add(\"Earth\");\n            list3.add(\"Mars\");\n            list3.add(\"Jupiter\");\n            planets = list3;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mars\")) {\n            list1.add(\"Mars\");\n            planets = list1;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Jupiter\")) {\n            list2.add(\"Mars\");\n            list2.add(\"Jupiter\");\n            planets = list2;\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n            list1.add(\"Jupiter\");\n            planets = list1;\n        } else {\n            planets = new ArrayList<String>();\n        }\n        return planets;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<String>();\n        ArrayList<String> names = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (names.contains(planet1) && names.contains(planet2)) {\n            int pos1 = names.indexOf(planet1);\n            int pos2 = names.indexOf(planet2);\n            if (pos1 < pos2) {\n                for (int i = pos1 + 1; i < pos2; i++) {\n                    res.add(names.get(i));\n                }\n            } else {\n                for (int i = pos1 - 1; i > pos2; i--) {\n                    res.add(names.get(i));\n                }\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> list = new ArrayList<String>();\n        switch(planet1) {\n            case \"Mercury\":\n                if(planet2 == \"Venus\") {\n                    list.add(\"Venus\");\n                    break;\n                } else if(planet2 == \"Earth\") {\n                    list.add(\"Venus\");\n                    list.add(\"Earth\");\n                    break;\n                } else if(planet2 == \"Mars\") {\n                    list.add(\"Venus\");\n                    list.add(\"Earth\");\n                    list.add(\"Mars\");\n                    break;\n                } else if(planet2 == \"Jupiter\") {\n                    list.add(\"Venus\");\n                    list.add(\"Earth\");\n                    list.add(\"Mars\");\n                    list.add(\"Jupiter\");\n                    break;\n                } else if(planet2 == \"Saturn\") {\n                    list.add(\"Venus\");\n                    list.add(\"Earth\");\n                    list.add(\"Mars\");\n                    list.add(\"Jupiter\");\n                    list.add(\"Saturn\");\n                    break;\n                } else if(planet2 == \"Uranus\") {\n                    list.add(\"Venus\");\n                    list.add(\"Earth\");\n                    list.add(\"Mars\");\n                    list.add(\"Jupiter\");\n                    list.add(\"Saturn\");\n                    list.add(\"Uranus\");\n                    break;\n                } else if(planet2 == \"Neptune\") {\n                    list.add(\"Venus\");\n                    list.add(\"Earth\");\n                    list.add(\"Mars\");\n                    list.add(\"Jupiter\");\n                    list.add(\"Saturn\");\n                    list.add(\"Uranus\");\n                    list.add(\"Neptune\");\n                    break;\n                }\n                break;\n            case \"Venus\":\n                if(planet2 == \"Earth\") {\n                    list.add(\"Earth\");\n                    break;\n                } else if(planet2 == \"Mars\") {\n                    list.add(\"Earth\");\n                    list.add(\"Mars\");\n                    break;\n                } else if(planet2 == \"Jupiter\") {\n                    list.add(\"Earth\");\n                    list.add(\"Mars\");\n                    list.add(\"Jupiter\");\n                    break;\n                } else if(planet2 == \"Saturn\") {\n                    list.add(\"Earth\");\n                    list.add(\"Mars\");\n                    list.add(\"Jupiter\");\n                   ", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> al = new ArrayList<String>();\n        switch(planet1) {\n        case \"Mercury\": \n            al.add(\"Venus\");\n            break;\n        case \"Venus\": \n            al.add(\"Earth\");\n            break;\n        case \"Earth\": \n            al.add(\"Mars\");\n            break;\n        case \"Mars\": \n            al.add(\"Jupiter\");\n            break;\n        case \"Jupiter\": \n            al.add(\"Saturn\");\n            break;\n        case \"Saturn\": \n            al.add(\"Uranus\");\n            break;\n        case \"Uranus\": \n            al.add(\"Neptune\");\n            break;\n        default: \n            return new ArrayList<>();\n        }\n        switch(planet2) {\n        case \"Mercury\": \n            al.add(\"Venus\");\n            break;\n        case \"Venus\": \n            al.add(\"Earth\");\n            break;\n        case \"Earth\": \n            al.add(\"Mars\");\n            break;\n        case \"Mars\": \n            al.add(\"Jupiter\");\n            break;\n        case \"Jupiter\": \n            al.add(\"Saturn\");\n            break;\n        case \"Saturn\": \n            al.add(\"Uranus\");\n            break;\n        case \"Uranus\": \n            al.add(\"Neptune\");\n            break;\n        default: \n            return new ArrayList<>();\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int index1 = Arrays.asList(planets).indexOf(planet1);\n    int index2 = Arrays.asList(planets).indexOf(planet2);\n    if (index1 == -1 || index2 == -1) return result;\n    if (index1 > index2) {int temp = index1; index1 = index2; index2 = temp;}\n    for (int i = index1 + 1; i < index2; i++) result.add(planets[i]);\n    return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList((\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int i1 = planets.indexOf(planet1);\n            int i2 = planets.indexOf(planet2);\n            if (i2 > i1) {\n                return planets.subList(i1+1, i2);\n            }\n            else {\n                return planets.subList(i1+1, planets.size()).subList(0, i2);\n            }\n        }\n        return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if(index1 <= index2) {\n                for(int i = index1 + 1; i < index2; i++) {\n                    res.add(planets.get(i));\n                }\n            } else {\n                for(int i = index2 + 1; i < index1; i++) {\n                    res.add(planets.get(i));\n                }\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<String>();\n        String[] planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        int index = Arrays.asList(planets).indexOf(planet1);\n        int index2 = Arrays.asList(planets).indexOf(planet2);\n        if (index == -1 || index2 == -1) {\n            return res;\n        }\n        for (int i = index + 1; i < index2; i++) {\n            res.add(planets[i]);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> pairs = new ArrayList<>();\n        ArrayList<String> res = new ArrayList<>();\n        for (String planet : planets) {\n            if (planet.compareTo(planet1) <= 0 || planet.compareTo(planet2) >= 0) continue;\n            pairs.add(planet1);\n            pairs.add(planet);\n            pairs.add(planet2);\n            break;\n        }\n        for (int i = 0; i < pairs.size() - 1; i += 2) {\n            if (pairs.get(i).compareTo(pairs.get(i + 1)) > 0) {\n                String tmp = pairs.get(i);\n                pairs.set(i, pairs.get(i + 1));\n                pairs.set(i + 1, tmp);\n            }\n        }\n        for (int i = 0; i < planets.size(); i++) {\n            if (i < pairs.size() / 2) continue;\n            boolean valid = false;\n            for (int j = 0; j < pairs.size(); j += 2) {\n                if (planets.get(i).compareTo(pairs.get(j)) >= 0 && planets.get(i).compareTo(pairs.get(j + 1)) <= 0) valid = true;\n            }\n            if (valid) res.add(planets.get(i));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> output = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n                if(planet1.equals(\"Mercury\")){\n                    if(planet2.equals(\"Venus\")){\n                        output.add(\"Venus\");\n                    }\n                    else if(planet2.equals(\"Earth\")){\n                        output.add(\"Venus\");\n                        output.add(\"Earth\");\n                    }\n                    else if(planet2.equals(\"Mars\")){\n                        output.add(\"Venus\");\n                        output.add(\"Earth\");\n                        output.add(\"Mars\");\n                    }\n                    else if(planet2.equals(\"Jupiter\")){\n                        output.add(\"Venus\");\n                        output.add(\"Earth\");\n                        output.add(\"Mars\");\n                        output.add(\"Jupiter\");\n                    }\n                    else if(planet2.equals(\"Saturn\")){\n                        output.add(\"Venus\");\n                        output.add(\"Earth\");\n                        output.add(\"Mars\");\n                        output.add(\"Jupiter\");\n                        output.add(\"Saturn\");\n                    }\n                    else if(planet2.equals(\"Uranus\")){\n                        output.add(\"Venus\");\n                        output.add(\"Earth\");\n                        output.add(\"Mars\");\n                        output.add(\"Jupiter\");\n                        output.add(\"Saturn\");\n                        output.add(\"Uranus\");\n                    }\n                    else if(planet2.equals(\"Neptune\")){\n                        output.add(\"Venus\");\n                        output.add(\"Earth\");\n                        output.add(\"Mars\");\n                        output.add(\"Jupiter\");\n                        output.add(\"Saturn\");\n                        output.add(\"Uranus\");\n                        output.add(\"Neptune\");\n                    }\n                }\n                if(planet1.equals(\"Venus\")){\n                ", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        int p1Index = planets.indexOf(planet1);\n        int p2Index = planets.indexOf(planet2);\n        if (p1Index != -1 && p2Index != -1 && p1Index != p2Index && p1Index < p2Index) {\n            return planets.subList(p1Index + 1, p2Index);\n        }\n        return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> result = new ArrayList<String>();\n    String [] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    String [] temp = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int i1 = 0;\n    int i2 = 0;\n    for (int i = 0; i < planets.length; i++) {\n        if (planet1.equals(planets[i])) {\n            i1 = i;\n            planets[i] = null;\n        }\n        if (planet2.equals(planets[i])) {\n            i2 = i;\n            planets[i] = null;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (!planets.contains(planet1) || !planets.contains(planet2)) return new ArrayList<String>();\n        int i = planets.indexOf(planet1), j = planets.indexOf(planet2);\n        if (i > j) return bf(planet2, planet1);\n        planets.subList(i, j + 1).clear();\n        return planets;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        ArrayList<String> planets = new ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2 == -1) {\n            return result;\n        }\n        else {\n            for (int i = index1 + 1; i < index2; i++) {\n                result.add(planets.get(i));\n            }\n            return result;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\")) res.add(\"Venus\");\n        if(planet1.equals(\"Venus\")) res.add(\"Earth\");\n        if(planet1.equals(\"Earth\")) res.add(\"Mars\");\n        if(planet1.equals(\"Mars\")) res.add(\"Jupiter\");\n        if(planet1.equals(\"Jupiter\")) res.add(\"Saturn\");\n        if(planet1.equals(\"Saturn\")) res.add(\"Uranus\");\n        if(planet1.equals(\"Uranus\")) res.add(\"Neptune\");\n        if(planet2.equals(\"Mercury\")) res.add(\"Venus\");\n        if(planet2.equals(\"Venus\")) res.add(\"Earth\");\n        if(planet2.equals(\"Earth\")) res.add(\"Mars\");\n        if(planet2.equals(\"Mars\")) res.add(\"Jupiter\");\n        if(planet2.equals(\"Jupiter\")) res.add(\"Saturn\");\n        if(planet2.equals(\"Saturn\")) res.add(\"Uranus\");\n        if(planet2.equals(\"Uranus\")) res.add(\"Neptune\");\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> list = new ArrayList<String>(Arrays.asList((\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")));\n        if(!list.contains(planet1) || !list.contains(planet2)) return new ArrayList<String>();\n        if(list.indexOf(planet1) == list.indexOf(planet2)) return new ArrayList<String>();\n        int p1 = list.indexOf(planet1);\n        int p2 = list.indexOf(planet2);\n        if(p1 < p2) list = list.subList(p1, p2);\n        else list = list.subList(p2, p1);\n        list = list.stream().sorted((a, b) -> {\n            return list.indexOf(a) - list.indexOf(b);\n        }).collect(Collectors.toCollection(ArrayList::new));\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<>();\n        int index1 = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\").indexOf(planet1);\n        int index2 = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\").indexOf(planet2);\n        if (index1 < 0 || index2 < 0) {\n            return res;\n        }\n        for (int i = Math.min(index1, index2) + 1; i < Math.max(index1, index2); i++) {\n            res.add(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\").get(i));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (!planets.contains(planet1) || !planets.contains(planet2)) return result;\n        int i = planets.indexOf(planet1);\n        int j = planets.indexOf(planet2);\n        if (i > j) {\n            int temp = j;\n            j = i;\n            i = temp;\n        }\n        for (int k = i + 1; k < j; k++)\n            result.add(planets.get(k));\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> out = new ArrayList<>();\n        String[] planets = new String[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        boolean flag = true;\n        int minI = 0;\n        int maxI = planets.length - 1;\n        for(int i = 0; i < planets.length; i++){\n            if(planet1.equals(planets[i])){\n                flag = false;\n                minI = i;\n            }\n            else if(planet2.equals(planets[i])){\n                flag = false;\n                maxI = i;\n            }\n        }\n        if(flag){\n            return out;\n        }\n        for(int i = minI + 1; i < maxI; i++){\n            out.add(planets[i]);\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n            \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> output = new ArrayList<>();\n        int planet1Index = planets.indexOf(planet1);\n        int planet2Index = planets.indexOf(planet2);\n        int temp = planet1Index;\n        planet1Index = planet2Index < planet1Index ?\n            planet1Index + planets.size() : planet1Index;\n        planet2Index = planet2Index < temp ?\n            planet2Index + planets.size() : planet2Index;\n        if(planet1Index < planet2Index) {\n            for(int i = planet1Index; i < planet2Index; i++) {\n                if(i >= planets.size()) {\n                    i -= planets.size();\n                }\n                output.add(planets.get(i));\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        if (planets.length == 0) {\n            return new ArrayList<String>(Arrays.asList());\n        }\n        // we start with the planets array, and we look for the first planet that matches\n        // the first argument.\n        int firstPlanetIndex = -1;\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                firstPlanetIndex = i;\n                break;\n            }\n        }\n        // if there was no match, return empty\n        if (firstPlanetIndex == -1) {\n            return new ArrayList<String>(Arrays.asList());\n        }\n        // we look for the index of the second planet\n        int secondPlanetIndex = -1;\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet2)) {\n                secondPlanetIndex = i;\n                break;\n            }\n        }\n        // if there was no match, return empty\n        if (secondPlanetIndex == -1) {\n            return new ArrayList<String>(Arrays.asList());\n        }\n        // if the second planet comes before the first, swap them\n        if (secondPlanetIndex < firstPlanetIndex) {\n            int tmp = firstPlanetIndex;\n            firstPlanetIndex = secondPlanetIndex;\n            secondPlanetIndex = tmp;\n        }\n        // the subarray contains all the planets between the two indexes\n        // (not inclusive of the second one)\n        String[] betweenPlanets = Arrays.copyOfRange(planets, firstPlanetIndex + 1, secondPlanetIndex);\n        // finally, return the planets between the two\n        return new ArrayList<String>(Arrays.asList(betweenPlanets));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> arr = new ArrayList<String>(Arrays.asList(planet1, planet2));\n        ArrayList<String> ans = new ArrayList<String>();\n        if(arr.contains(\"Mercury\")){\n            if(arr.contains(\"Venus\")){\n                ans.add(\"Venus\");\n                if(arr.contains(\"Earth\")){\n                    ans.add(\"Earth\");\n                    if(arr.contains(\"Mars\")){\n                        ans.add(\"Mars\");\n                        if(arr.contains(\"Jupiter\")){\n                            ans.add(\"Jupiter\");\n                            if(arr.contains(\"Saturn\")){\n                                ans.add(\"Saturn\");\n                                if(arr.contains(\"Uranus\")){\n                                    ans.add(\"Uranus\");\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if(ans.size() > 0) return ans;\n        return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> l = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n                if (planet1.equals(\"Mercury\")){\n                    l.add(\"Venus\");\n                    l.add(\"Earth\");\n                    l.add(\"Mars\");\n                    l.add(\"Jupiter\");\n                    l.add(\"Saturn\");\n                    l.add(\"Uranus\");\n                    l.add(\"Neptune\");\n                }else if (planet1.equals(\"Venus\")){\n                    l.add(\"Earth\");\n                    l.add(\"Mars\");\n                    l.add(\"Jupiter\");\n                    l.add(\"Saturn\");\n                    l.add(\"Uranus\");\n                    l.add(\"Neptune\");\n                }else if (planet1.equals(\"Earth\")){\n                    l.add(\"Mars\");\n                    l.add(\"Jupiter\");\n                    l.add(\"Saturn\");\n                    l.add(\"Uranus\");\n                    l.add(\"Neptune\");\n                }else if (planet1.equals(\"Mars\")){\n                    l.add(\"Jupiter\");\n                    l.add(\"Saturn\");\n                    l.add(\"Uranus\");\n                    l.add(\"Neptune\");\n                }else if (planet1.equals(\"Jupiter\")){\n                    l.add(\"Saturn\");\n                    l.add(\"Uranus\");\n                    l.add(\"Neptune\");\n                }else if (planet1.equals(\"Saturn\")){\n                    l.add(\"Uranus\");\n                    l.add(\"Neptune\");\n                }else if (planet1.equals(\"Uranus\")){\n                    l.add(\"Neptune\");\n                }else if (planet1.equals(\"Neptune\")){\n                    //l.add(\"Sun\");\n                }\n                if (planet2.equals(\"Mercury\")){\n                    l.remove(\"Venus\");\n", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> arr = new ArrayList<>();\n        ArrayList<String> sol = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if(sol.contains(planet1) && sol.contains(planet2)) {\n            int i1 = sol.indexOf(planet1);\n            int i2 = sol.indexOf(planet2);\n            if(i1 < i2) {\n                for(int i = i1+1; i<i2; i++) {\n                    arr.add(sol.get(i));\n                }\n            }\n            else {\n                for(int i = i1-1; i>i2; i--) {\n                    arr.add(sol.get(i));\n                }\n            }\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> v = new ArrayList<String>();\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        if (planets.length - 1 < planets.indexOf(planet1) || planets.indexOf(planet2) < planets.indexOf(planet1)) return v;\n        for (int i = planets.indexOf(planet1); i <= planets.indexOf(planet2); i++) {\n            v.add(planets[i]);\n        }\n        return v;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int index1 = Arrays.asList(planets).indexOf(planet1);\n        int index2 = Arrays.asList(planets).indexOf(planet2);\n        if(index1 == -1 || index2 == -1) {\n            return new ArrayList<String>();\n        }\n        ArrayList<String> list = new ArrayList<String>();\n        if(index2 < index1) {\n            for(int i = index2 + 1; i < index1; i++) {\n                list.add(planets[i]);\n            }\n        } else {\n            for(int i = index1 + 1; i < index2; i++) {\n                list.add(planets[i]);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> list = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n                if(planet1.equals(\"Mercury\")){\n                    list.add(\"Venus\");\n                    if(planet2.equals(\"Venus\")){\n                        list.add(\"Earth\");\n                        list.add(\"Mars\");\n                        list.add(\"Jupiter\");\n                        list.add(\"Saturn\");\n                        list.add(\"Uranus\");\n                    }\n                    else if(planet2.equals(\"Earth\")){\n                        list.add(\"Mars\");\n                        list.add(\"Jupiter\");\n                        list.add(\"Saturn\");\n                        list.add(\"Uranus\");\n                    }\n                    else if(planet2.equals(\"Mars\")){\n                        list.add(\"Jupiter\");\n                        list.add(\"Saturn\");\n                        list.add(\"Uranus\");\n                    }\n                    else if(planet2.equals(\"Jupiter\")){\n                        list.add(\"Saturn\");\n                        list.add(\"Uranus\");\n                    }\n                    else if(planet2.equals(\"Saturn\")){\n                        list.add(\"Uranus\");\n                    }\n                }\n                else if(planet1.equals(\"Venus\")){\n                    list.add(\"Earth\");\n                    if(planet2.equals(\"Earth\")){\n                        list.add(\"Mars\");\n                        list.add(\"Jupiter\");\n                        list.add(\"Saturn\");\n                        list.add(\"Uranus\");\n                    }\n                    else if(planet2.equals(\"Mars\")){\n                        list.add(\"Jupiter\");\n                        list.add(\"Saturn\");\n                        list.add(\"Uranus\");\n                    }\n                    else if(planet2.equals(\"Jupiter\")){\n                        list.add(\"Saturn\");\n                        list.add(\"Uranus\");\n                   ", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> output = new ArrayList<>();\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if (index1 < index2) {\n                for (int i = index1 + 1; i < index2; i++) {\n                    output.add(planets.get(i));\n                }\n            } else {\n                for (int i = index1 - 1; i >= index2; i--) {\n                    output.add(planets.get(i));\n                }\n            }\n            Collections.reverse(output);\n            return output;\n        } else {\n            return output;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")){\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Venus\") || planet2.equals(\"Venus\")){\n            result.add(\"Earth\");\n        }\n        if(planet1.equals(\"Earth\") || planet2.equals(\"Earth\")){\n            result.add(\"Mars\");\n        }\n        if(planet1.equals(\"Mars\") || planet2.equals(\"Mars\")){\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")){\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")){\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")){\n            result.add(\"Neptune\");\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    if(planet1 == \"Mercury\" || planet1 == \"Venus\" || planet1 == \"Earth\" || planet1 == \"Mars\" || planet1 == \"Jupiter\" || planet1 == \"Saturn\" || planet1 == \"Uranus\" || planet1 == \"Neptune\"){\n        if(planet2 == \"Mercury\" || planet2 == \"Venus\" || planet2 == \"Earth\" || planet2 == \"Mars\" || planet2 == \"Jupiter\" || planet2 == \"Saturn\" || planet2 == \"Uranus\" || planet2 == \"Neptune\"){\n            ArrayList<String> result = new ArrayList<String>();\n            if(planet1 == \"Mercury\"){\n                result.add(\"Venus\");\n                return result;\n            }\n            if(planet1 == \"Venus\"){\n                result.add(\"Earth\");\n                return result;\n            }\n            if(planet1 == \"Earth\"){\n                result.add(\"Mars\");\n                return result;\n            }\n            if(planet1 == \"Mars\"){\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n                return result;\n            }\n            if(planet1 == \"Jupiter\"){\n                result.add(\"Saturn\");\n                return result;\n            }\n            if(planet1 == \"Saturn\"){\n                result.add(\"Uranus\");\n                return result;\n            }\n            if(planet1 == \"Uranus\"){\n                result.add(\"Neptune\");\n                return result;\n            }\n            if(planet1 == \"Neptune\"){\n                return result;\n            }\n        }else{\n            return result;\n        }\n    }else{\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> r = new ArrayList<String>();\n        ArrayList<String> planetNames = new ArrayList<String>();\n        planetNames.add(\"Mercury\");\n        planetNames.add(\"Venus\");\n        planetNames.add(\"Earth\");\n        planetNames.add(\"Mars\");\n        planetNames.add(\"Jupiter\");\n        planetNames.add(\"Saturn\");\n        planetNames.add(\"Uranus\");\n        planetNames.add(\"Neptune\");\n        if (planetNames.contains(planet1) && planetNames.contains(planet2)) {\n            int index1 = planetNames.indexOf(planet1);\n            int index2 = planetNames.indexOf(planet2);\n            if (index1 > index2) {\n                int temp = index1;\n                index1 = index2;\n                index2 = temp;\n            }\n            for (int i = index1 + 1; i < index2; i++) {\n                r.add(planetNames.get(i));\n            }\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        List<String> list = new ArrayList<>();\n        list.add(\"Mercury\");\n        list.add(\"Venus\");\n        list.add(\"Earth\");\n        list.add(\"Mars\");\n        list.add(\"Jupiter\");\n        list.add(\"Saturn\");\n        list.add(\"Uranus\");\n        list.add(\"Neptune\");\n        int index1 = list.indexOf(planet1);\n        int index2 = list.indexOf(planet2);\n        if(index1 == -1 || index2 == -1)\n            return result;\n        if(index1 > index2)\n            return result;\n        for(int i = index1 + 1 ; i < index2 ; i++)\n            result.add(list.get(i));\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> result = new ArrayList<String>();\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int planet1Index = planets.indexOf(planet1);\n            int planet2Index = planets.indexOf(planet2);\n            if (planet1Index < planet2Index) {\n                for (int i = planet1Index + 1; i < planet2Index; i++) {\n                    result.add(planets.get(i));\n                }\n            } else {\n                for (int i = planet2Index + 1; i < planet1Index; i++) {\n                    result.add(planets.get(i));\n                }\n            }\n            return result;\n        }\n        return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if (index1 == index2) {\n                return new ArrayList<String>();\n            }\n            else if (index2 < index1) {\n                ArrayList<String> list = new ArrayList<String>();\n                for (int i = index2 + 1; i < index1; i++) {\n                    list.add(planets.get(i));\n                }\n                return list;\n            }\n            else {\n                ArrayList<String> list = new ArrayList<String>();\n                for (int i = index1 + 1; i < index2; i++) {\n                    list.add(planets.get(i));\n                }\n                return list;\n            }\n        }\n        return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        String[] planets = {\n            \"Mercury\",\n            \"Venus\",\n            \"Earth\",\n            \"Mars\",\n            \"Jupiter\",\n            \"Saturn\",\n            \"Uranus\",\n            \"Neptune\"\n        };\n        ArrayList<String> output = new ArrayList<String>();\n        if (Arrays.asList(planets).contains(planet1) && Arrays.asList(planets).contains(planet2)) {\n            int index1 = Arrays.asList(planets).indexOf(planet1);\n            int index2 = Arrays.asList(planets).indexOf(planet2);\n            if (index1 == index2) {\n                return output;\n            }\n            if (index1 < index2) {\n                for (int i = index1 + 1; i < index2; i++) {\n                    output.add(planets[i]);\n                }\n                return output;\n            }\n            for (int i = index2 + 1; i < index1; i++) {\n                output.add(planets[i]);\n            }\n            return output;\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        int planet1Index = planets.indexOf(planet1);\n        int planet2Index = planets.indexOf(planet2);\n        if (planet1Index == planet2Index) {\n            return new ArrayList<>();\n        } else if (planet1Index < planet2Index) {\n            return new ArrayList<>(planets.subList(planet1Index + 1, planet2Index));\n        } else {\n            return new ArrayList<>(planets.subList(planet2Index + 1, planet1Index));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"));\n        ArrayList<String> res = new ArrayList<String>();\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int i1 = planets.indexOf(planet1);\n            int i2 = planets.indexOf(planet2);\n            if(i1 > i2) {\n                res.addAll(planets.subList(i2,i1));\n                res.addAll(planets.subList(0,i2));\n            } else {\n                res.addAll(planets.subList(i1,i2));\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    if (planet1.equals(\"Mercury\")) {\n            if (planet2.equals(\"Neptune\")) {\n                return new ArrayList<>(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n            }\n            else if (planet2.equals(\"Uranus\")) {\n                return new ArrayList<>(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n            }\n            else {\n                return new ArrayList<>();\n            }\n        }\n        else if (planet1.equals(\"Venus\")) {\n            if (planet2.equals(\"Mercury\")) {\n                return new ArrayList<>(Arrays.asList(\"Mercury\"));\n            }\n            else if (planet2.equals(\"Neptune\")) {\n                return new ArrayList<>(Arrays.asList(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n            }\n            else if (planet2.equals(\"Uranus\")) {\n                return new ArrayList<>(Arrays.asList(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n            }\n            else {\n                return new ArrayList<>();\n            }\n        }\n        else if (planet1.equals(\"Earth\")) {\n            if (planet2.equals(\"Mercury\")) {\n                return new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\"));\n            }\n            else if (planet2.equals(\"Neptune\")) {\n                return new ArrayList<>(Arrays.asList(\"Mars\", \"Jupiter\", \"Saturn\"));\n            }\n            else if (planet2.equals(\"Uranus\")) {\n                return new ArrayList<>(Arrays.asList(\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n            }\n            else {\n                return new ArrayList<>();\n            }\n        }\n        else if (planet1.equals(\"Mars\")) {\n            if (planet2.equals(\"Mercury\")) {\n                return new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"));\n            }\n            else if (planet2.equals(\"Neptune\")) {\n                return new ArrayList<>(Arrays.asList(\"Jupiter\", \"Saturn\"));\n            }\n            else if (planet2.equals(\"Uranus\")) {\n                return new ArrayList<>(Arrays.asList(\"Jupiter\", \"Saturn\", \"Uranus\"));\n            }\n            else {\n                return new ArrayList<>();\n            }\n        }\n        else if (planet1.equals(\"Jupiter", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n        if (i1 == i2) {\n            return new ArrayList<>();\n        }\n        ArrayList<String> res = new ArrayList<>();\n        if (i1 < i2) {\n            res.addAll(planets.subList(i1 + 1, i2));\n        } else {\n            res.addAll(planets.subList(i2 + 1, i1));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int idx1 = planets.indexOf(planet1);\n            int idx2 = planets.indexOf(planet2);\n            if (idx1 <= idx2) {\n                for (int i = idx1 + 1; i < idx2; i++) {\n                    res.add(planets.get(i));\n                }\n            } else {\n                for (int i = idx1 - 1; i >= idx2; i--) {\n                    res.add(planets.get(i));\n                }\n            }\n            return res;\n        } else {\n            return res;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if(index1 < 0 || index2 < 0) {\n            return new ArrayList<String>();\n        }\n        if(index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        return planets.subList(index1 + 1, index2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"));\n        if(planets.contains(planet1) == false || planets.contains(planet2) == false)\n            return new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if(index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        return new ArrayList<String>(planets.subList(index1 + 1, index2));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        ArrayList<String> res = new ArrayList<String>();\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int i1 = planets.indexOf(planet1);\n            int i2 = planets.indexOf(planet2);\n            if (i1 > i2) {\n                for (int i = i1 - 1; i >= i2; i--) {\n                    res.add(planets.get(i));\n                }\n                for (int i = i1; i > i2; i--) {\n                    res.add(planets.get(i));\n                }\n            } else {\n                for (int i = i1 + 1; i <= i2; i++) {\n                    res.add(planets.get(i));\n                }\n                for (int i = i1; i < i2; i++) {\n                    res.add(planets.get(i));\n                }\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> arr = new ArrayList<>();\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n        if(i1 == -1 || i2 == -1) return arr;\n        if(i1 > i2) {\n            for(int i = i2 + 1; i < i1; i++) {\n                arr.add(planets.get(i));\n            }\n        } else {\n            for(int i = i1 + 1; i < i2; i++) {\n                arr.add(planets.get(i));\n            }\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planetList = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int firstIndex = planetList.indexOf(planet1);\n        int secondIndex = planetList.indexOf(planet2);\n        ArrayList<String> planetBetween = new ArrayList<String>();\n        if(firstIndex == -1 || secondIndex == -1) return planetBetween;\n        if(firstIndex < secondIndex){\n            for(int i = firstIndex + 1; i < secondIndex; i++){\n                planetBetween.add(planetList.get(i));\n            }\n            return planetBetween;\n        } else{\n            for(int i = secondIndex + 1; i < firstIndex; i++){\n                planetBetween.add(planetList.get(i));\n            }\n            return planetBetween;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int i1 = planets.indexOf(planet1);\n            int i2 = planets.indexOf(planet2);\n            if(i1 < i2) {\n                ArrayList<String> res = new ArrayList<>(planets.subList(i1+1, i2));\n                res.add(0, planets.get(i1));\n                res.add(planets.get(i2));\n                return res;\n            }\n            return new ArrayList<>(planets.subList(i2+1, i1));\n        }\n        return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int i = planets.indexOf(planet1);\n        int j = planets.indexOf(planet2);\n        if (i == -1 || j == -1) {\n            return new ArrayList<String>();\n        }\n        return planets.subList(Math.min(i, j) + 1, Math.max(i, j));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        // Write your code here\n        ArrayList<String> result = new ArrayList<>();\n        // if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\") || planet1.equals(\"Uranus\") && planet2.equals(\"Mercury\")){\n        //     result.add(\"Venus\");\n        //     result.add(\"Earth\");\n        //     result.add(\"Mars\");\n        //     result.add(\"Jupiter\");\n        //     result.add(\"Saturn\");\n        // }\n        // if(planet1.equals(\"Earth\") && planet2.equals(\"Mercury\") || planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")){\n        //     result.add(\"Venus\");\n        // }\n        // return result;\n        if(!planet1.equals(\"Mercury\") && !planet1.equals(\"Venus\") && !planet1.equals(\"Earth\") && !planet1.equals(\"Mars\") && !planet1.equals(\"Jupiter\") && !planet1.equals(\"Saturn\") && !planet1.equals(\"Uranus\") && !planet1.equals(\"Neptune\")){\n            return result;\n        }\n        else if(!planet2.equals(\"Mercury\") && !planet2.equals(\"Venus\") && !planet2.equals(\"Earth\") && !planet2.equals(\"Mars\") && !planet2.equals(\"Jupiter\") && !planet2.equals(\"Saturn\") && !planet2.equals(\"Uranus\") && !planet2.equals(\"Neptune\")){\n            return result;\n        }\n        else if(!(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\") || planet1.equals(\"Uranus\") && planet2.equals(\"Mercury\"))){\n            if(planet1.equals(\"Mercury\") && planet2.equals(\"Venus\")){\n                result.add(\"Venus\");\n            }\n            else if(planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")){\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n            }\n            else if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")){\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n            }\n            else if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")){\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        if(!(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\"))) return new ArrayList<String>();\n        if(!(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))) return new ArrayList<String>();\n        ArrayList<String> between = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Venus\")) return new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\"));\n        if(planet1.equals(\"Venus\") && planet2.equals(\"Earth\")) return new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\"));\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Mars\")) return new ArrayList<String>(Arrays.asList(\"Earth\", \"Mars\"));\n        if(planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) return new ArrayList<String>(Arrays.asList(\"Mars\", \"Jupiter\"));\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) return new ArrayList<String>(Arrays.asList(\"Jupiter\", \"Saturn\"));\n        if(planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\")) return new ArrayList<String>(Arrays.asList(\"Saturn\", \"Uranus\"));\n        if(planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\")) return new ArrayList<String>(Arrays.asList(\"Uranus\", \"Neptune\"));\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) return new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\"));\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Mars\")) return new ArrayList<String>(Arrays.asList(\"Earth\", \"Mars\"));\n        if(planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) return new ArrayList<String>(Arrays.asList(\"Mars\", \"Jupiter\"));\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) return new ArrayList<", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int i1 = planets.indexOf(planet1);\n            int i2 = planets.indexOf(planet2);\n            ArrayList<String> al = new ArrayList<String>();\n            if (i1 < i2) {\n                for (int i = i1 + 1; i < i2; i++) {\n                    al.add(planets.get(i));\n                }\n            } else {\n                for (int i = i2; i < i1; i++) {\n                    al.add(planets.get(i));\n                }\n            }\n            return al;\n        }\n        return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if (index2 < index1) {\n                return new ArrayList<>();\n            }\n            else {\n                return new ArrayList<>(planets.subList(index1 + 1, index2));\n            }\n        }\n        else {\n            return new ArrayList<>();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        if(planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"Neptune\")){\n            ArrayList<String> planet=new ArrayList<>(Arrays.asList(\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"));\n            return planet;\n        }\n        else if(planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"Earth\")){\n            ArrayList<String> planet=new ArrayList<>(Arrays.asList(\"Mercury\"));\n            return planet;\n        }\n        else if(planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"Uranus\")){\n            ArrayList<String> planet=new ArrayList<>(Arrays.asList(\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"));\n            return planet;\n        }\n        else{\n            return new ArrayList<>();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> list = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            list.add(\"Venus\");\n        }\n        else if(planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            list.add(\"Earth\");\n            list.add(\"Mars\");\n        }\n        else if(planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            list.add(\"Mars\");\n            list.add(\"Jupiter\");\n            list.add(\"Saturn\");\n        }\n        else if(planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            list.add(\"Jupiter\");\n            list.add(\"Saturn\");\n        }\n        else if(planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            list.add(\"Saturn\");\n            list.add(\"Uranus\");\n            list.add(\"Neptune\");\n        }\n        else if(planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            list.add(\"Uranus\");\n            list.add(\"Neptune\");\n        }\n        else {\n            return new ArrayList<String>();\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> list = new ArrayList<String>(Arrays.asList(\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"));\n        ArrayList<String> result = new ArrayList<>();\n        if(!list.contains(planet1) || !list.contains(planet2)) {\n            return result;\n        }\n        int i = list.indexOf(planet1);\n        int j = list.indexOf(planet2);\n        if(i == j) {\n            return result;\n        }\n        if(i > j) {\n            i = list.indexOf(planet2);\n            j = list.indexOf(planet1);\n        }\n        for(int k = i+1; k < j; k++) {\n            result.add(list.get(k));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> list = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> res = new ArrayList<String>();\n        if(list.contains(planet1) && list.contains(planet2)) {\n            int index1 = list.indexOf(planet1);\n            int index2 = list.indexOf(planet2);\n            if(index1 > index2) {\n                for(int i = index2; i <= index1; i++) {\n                    res.add(list.get(i));\n                }\n            } else {\n                for(int i = index1; i <= index2; i++) {\n                    res.add(list.get(i));\n                }\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n                switch (planet1) {\n                    case \"Mercury\":\n                        switch (planet2) {\n                            case \"Venus\":\n                                result.add(\"Venus\");\n                                break;\n                            case \"Earth\":\n                                result.add(\"Venus\");\n                                result.add(\"Earth\");\n                                break;\n                            case \"Mars\":\n                                result.add(\"Venus\");\n                                result.add(\"Earth\");\n                                result.add(\"Mars\");\n                                break;\n                            case \"Jupiter\":\n                                result.add(\"Venus\");\n                                result.add(\"Earth\");\n                                result.add(\"Mars\");\n                                result.add(\"Jupiter\");\n                                break;\n                            case \"Saturn\":\n                                result.add(\"Venus\");\n                                result.add(\"Earth\");\n                                result.add(\"Mars\");\n                                result.add(\"Jupiter\");\n                                result.add(\"Saturn\");\n                                break;\n                            case \"Uranus\":\n                                result.add(\"Venus\");\n                                result.add(\"Earth\");\n                                result.add(\"Mars\");\n                                result.add(\"Jupiter\");\n                                result.add(\"Saturn\");\n                                result.add(\"Uranus\");\n                                break;\n                            case \"Neptune\":\n                                result.add(\"Venus\");\n                                result.add(\"Earth\");\n                                result.add(\"Mars\");\n                                result.add(\"Jupiter\");\n                                result.add(\"Saturn\");\n                                result.add(\"Uranus\");\n                                result.add(\"Neptune\");\n                                break;\n                        }\n                        break;\n                    case \"Venus\":\n                        switch (planet2) {\n                            case \"Earth\":\n                                result.add(\"Earth\");\n                                break;\n                            case", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> res = new ArrayList<String>();\n        boolean flag = false;\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if (index1 != -1 && index2 != -1) {\n            if (index1 < index2) {\n                for (int i = index1; i <= index2; i++) {\n                    res.add(planets.get(i));\n                }\n            } else {\n                for (int i = index2; i <= index1; i++) {\n                    res.add(planets.get(i));\n                }\n            }\n            return res;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String> solarSystem = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int index1 = solarSystem.indexOf(planet1);\n        int index2 = solarSystem.indexOf(planet2);\n        if (index1 < 0 || index2 < 0) {\n            return result;\n        }\n        if (index1 < index2) {\n            for (int i = index1 + 1; i < index2; i++) {\n                result.add(solarSystem.get(i));\n            }\n        } else {\n            for (int i = index2 + 1; i < index1; i++) {\n                result.add(solarSystem.get(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String>planets=new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>selected=new ArrayList<String>();\n        if(planets.contains(planet1)&&planets.contains(planet2))\n        {\n            int i1=planets.indexOf(planet1);\n            int i2=planets.indexOf(planet2);\n            if(i1<i2)\n            {\n                for(int i=i1+1;i<i2;i++)\n                {\n                    selected.add(planets.get(i));\n                }\n            }\n            else\n            {\n                for(int i=planets.size()-1;i>i2;i--)\n                {\n                    selected.add(planets.get(i));\n                }\n                for(int i=0;i<i1;i++)\n                {\n                    selected.add(planets.get(i));\n                }\n            }\n        }\n        return selected;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planetList = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int index1 = planetList.indexOf(planet1);\n        int index2 = planetList.indexOf(planet2);\n        if(index1 == -1 || index2 == -1) {\n            return new ArrayList<String>();\n        }\n        if(index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        ArrayList<String> res = new ArrayList<String>();\n        for(int i = index1; i <= index2; i++) {\n            res.add(planetList.get(i));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> pair = new ArrayList<>();\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int i = planets.indexOf(planet1);\n            int j = planets.indexOf(planet2);\n            if (i < j) {\n                for (int k = i + 1; k <= j; k++) {\n                    pair.add(planets.get(k));\n                }\n            } else {\n                for (int k = j + 1; k <= i; k++) {\n                    pair.add(planets.get(k));\n                }\n            }\n        }\n        return pair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> result = new ArrayList<String>();\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<String>();\n        }\n        int pos1 = planets.indexOf(planet1);\n        int pos2 = planets.indexOf(planet2);\n        if (pos1 > pos2) {\n            int temp = pos1;\n            pos1 = pos2;\n            pos2 = temp;\n        }\n        for (int i = pos1 + 1; i < pos2; i++) {\n            result.add(planets.get(i));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        // WRITE YOUR CODE HERE\n        ArrayList<String> al = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\"))al.add(\"Venus\");\n        if(planet1.equals(\"Venus\"))al.add(\"Earth\");\n        if(planet1.equals(\"Earth\"))al.add(\"Mars\");\n        if(planet1.equals(\"Mars\"))al.add(\"Jupiter\");\n        if(planet1.equals(\"Jupiter\"))al.add(\"Saturn\");\n        if(planet1.equals(\"Saturn\"))al.add(\"Uranus\");\n        if(planet1.equals(\"Uranus\"))al.add(\"Neptune\");\n        if(planet2.equals(\"Mercury\"))al.add(\"Venus\");\n        if(planet2.equals(\"Venus\"))al.add(\"Earth\");\n        if(planet2.equals(\"Earth\"))al.add(\"Mars\");\n        if(planet2.equals(\"Mars\"))al.add(\"Jupiter\");\n        if(planet2.equals(\"Jupiter\"))al.add(\"Saturn\");\n        if(planet2.equals(\"Saturn\"))al.add(\"Uranus\");\n        if(planet2.equals(\"Uranus\"))al.add(\"Neptune\");\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        if (planet1.equals(\"Mercury\")) {\n            if (planet2.equals(\"Earth\")) {\n                ArrayList<String> temp = new ArrayList<String>();\n                temp.add(\"Venus\");\n                return temp;\n            } else if (planet2.equals(\"Neptune\")) {\n                ArrayList<String> temp = new ArrayList<String>();\n                temp.add(\"Venus\");\n                temp.add(\"Earth\");\n                temp.add(\"Mars\");\n                temp.add(\"Jupiter\");\n                temp.add(\"Saturn\");\n                return temp;\n            } else if (planet2.equals(\"Uranus\")) {\n                ArrayList<String> temp = new ArrayList<String>();\n                temp.add(\"Venus\");\n                temp.add(\"Earth\");\n                temp.add(\"Mars\");\n                temp.add(\"Jupiter\");\n                temp.add(\"Saturn\");\n                temp.add(\"Uranus\");\n                return temp;\n            } else if (planet2.equals(\"Venus\")) {\n                ArrayList<String> temp = new ArrayList<String>();\n                return temp;\n            } else {\n                return new ArrayList<String>();\n            }\n        } else if (planet1.equals(\"Venus\")) {\n            if (planet2.equals(\"Earth\")) {\n                ArrayList<String> temp = new ArrayList<String>();\n                return temp;\n            } else if (planet2.equals(\"Neptune\")) {\n                ArrayList<String> temp = new ArrayList<String>();\n                temp.add(\"Earth\");\n                temp.add(\"Mars\");\n                temp.add(\"Jupiter\");\n                temp.add(\"Saturn\");\n                return temp;\n            } else if (planet2.equals(\"Uranus\")) {\n                ArrayList<String> temp = new ArrayList<String>();\n                temp.add(\"Earth\");\n                temp.add(\"Mars\");\n                temp.add(\"Jupiter\");\n                temp.add(\"Saturn\");\n                temp.add(\"Uranus\");\n                return temp;\n            } else if (planet2.equals(\"Venus\")) {\n                ArrayList<String> temp = new ArrayList<String>();\n                return temp;\n            } else {\n                return new ArrayList<String>();\n            }\n        } else if (planet1.equals(\"Earth\")) {\n            if (planet2.equals(\"Neptune\")) {\n                ArrayList<String> temp = new ArrayList<String>();\n                temp.add(\"Mars\");\n                temp.add(\"Jupiter\");\n                temp.add(\"Saturn\");\n                return temp;\n            } else if (planet2.equals(\"Uranus\")) {\n                ArrayList<String> temp = new ArrayList<String>();\n                temp.add(\"M", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int index1 = Arrays.asList(planets).indexOf(planet1);\n        int index2 = Arrays.asList(planets).indexOf(planet2);\n        int diff = Math.abs(index1 - index2);\n        ArrayList<String> arr = new ArrayList<String>();\n        if(index1 == -1 || index2 == -1 || diff == 0 || diff == 1){\n            return arr;\n        }\n        if(index1 > index2){\n            for(int i = index2 + 1; i <= index1; i++){\n                arr.add(planets[i]);\n            }\n        }\n        else{\n            for(int i = index1 + 1; i <= index2; i++){\n                arr.add(planets[i]);\n            }\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> returnList = new ArrayList<String>();\n        String planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        for(int i = 0; i < planets.length; i++){\n            if(planets[i].equals(planet1)){\n                for(int j = i + 1; j < planets.length; j++){\n                    if(planets[j].equals(planet2)){\n                        returnList = new ArrayList<String>(Arrays.asList(planets[i], planets[j]));\n                    }\n                    else{\n                        returnList.add(planets[j]);\n                    }\n                }\n            }\n        }\n        return returnList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> p = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        if(planets.contains(planet1) && planets.contains(planet2)){\n            int i = planets.indexOf(planet1);\n            int j = planets.indexOf(planet2);\n            if(i > j){\n                int k = i;\n                i = j;\n                j = k;\n            }\n            for(int a = i; a <= j; a++){\n                p.add(planets.get(a));\n            }\n        }else{\n            p.add(\"Mercury\");\n            p.add(\"Venus\");\n            p.add(\"Earth\");\n            p.add(\"Mars\");\n            p.add(\"Jupiter\");\n            p.add(\"Saturn\");\n            p.add(\"Uranus\");\n            p.add(\"Neptune\");\n        }\n        return p;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planetList = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        String correctPlanet1 = null;\n        String correctPlanet2 = null;\n        // Check if planet1 and planet2 are correct planet names.\n        if (planetList.contains(planet1) && planetList.contains(planet2)) {\n            int index1 = planetList.indexOf(planet1);\n            int index2 = planetList.indexOf(planet2);\n            // Check if planet1 and planet2 are not the same planet.\n            if (index1 != index2) {\n                // Check if planet1 is before planet2 in the order of planets.\n                if (index1 < index2) {\n                    correctPlanet1 = planet1;\n                    correctPlanet2 = planet2;\n                } else {\n                    correctPlanet1 = planet2;\n                    correctPlanet2 = planet1;\n                }\n                // Check if the order of the planets between planet1 and planet2 is correct.\n                if (planetList.indexOf(correctPlanet2) - planetList.indexOf(correctPlanet1) == 1) {\n                    ArrayList<String> planets = new ArrayList<String>();\n                    for (int i = planetList.indexOf(correctPlanet1) + 1; i < planetList.indexOf(correctPlanet2); i++) {\n                        planets.add(planetList.get(i));\n                    }\n                    return planets;\n                } else {\n                    return new ArrayList<String>();\n                }\n            } else {\n                return new ArrayList<String>();\n            }\n        } else {\n            return new ArrayList<String>();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (!isPlanet(planet1) || !isPlanet(planet2))\n            return result;\n        String[] planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        int i1 = Arrays.asList(planets).indexOf(planet1);\n        int i2 = Arrays.asList(planets).indexOf(planet2);\n        if (i2 < i1)\n            i1 = i2;\n        for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets[i]);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> list = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> ans = new ArrayList<String>();\n        if(list.contains(planet1) && list.contains(planet2))\n        {\n            int i = list.indexOf(planet1);\n            int j = list.indexOf(planet2);\n            for(int k = 0; k < i; k++)\n            {\n                ans.add(list.get(k));\n            }\n            for(int k = j; k < list.size(); k++)\n            {\n                ans.add(list.get(k));\n            }\n        }\n        else\n        {\n            return ans;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\")) {\n            if (planet2.equals(\"Venus\")) {\n                result.add(\"Venus\");\n            } else if (planet2.equals(\"Earth\")) {\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n            } else if (planet2.equals(\"Mars\")) {\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n            } else if (planet2.equals(\"Jupiter\")) {\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n            } else if (planet2.equals(\"Saturn\")) {\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n            } else if (planet2.equals(\"Uranus\")) {\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n                result.add(\"Uranus\");\n            } else if (planet2.equals(\"Neptune\")) {\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n                result.add(\"Uranus\");\n                result.add(\"Neptune\");\n            } else {\n                return result;\n            }\n        }\n        if (planet1.equals(\"Venus\")) {\n            if (planet2.equals(\"Earth\")) {\n                result.add(\"Earth\");\n            } else if (planet2.equals(\"Mars\")) {\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n            } else if (planet2.equals(\"Jupiter\")) {\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n            } else if (planet2.equals(\"Saturn\")) {\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n            } else if (planet2.equals(\"Uranus\")) {\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        switch (planet1) {\n            case \"Mercury\":\n                switch (planet2) {\n                    case \"Venus\":\n                        result.add(\"Venus\");\n                        return result;\n                    case \"Earth\":\n                        result.add(\"Venus\");\n                        result.add(\"Earth\");\n                        return result;\n                    case \"Mars\":\n                        result.add(\"Venus\");\n                        result.add(\"Earth\");\n                        result.add(\"Mars\");\n                        return result;\n                    case \"Jupiter\":\n                        result.add(\"Venus\");\n                        result.add(\"Earth\");\n                        result.add(\"Mars\");\n                        result.add(\"Jupiter\");\n                        return result;\n                    case \"Saturn\":\n                        result.add(\"Venus\");\n                        result.add(\"Earth\");\n                        result.add(\"Mars\");\n                        result.add(\"Jupiter\");\n                        result.add(\"Saturn\");\n                        return result;\n                    case \"Uranus\":\n                        result.add(\"Venus\");\n                        result.add(\"Earth\");\n                        result.add(\"Mars\");\n                        result.add(\"Jupiter\");\n                        result.add(\"Saturn\");\n                        result.add(\"Uranus\");\n                        return result;\n                    case \"Neptune\":\n                        result.add(\"Venus\");\n                        result.add(\"Earth\");\n                        result.add(\"Mars\");\n                        result.add(\"Jupiter\");\n                        result.add(\"Saturn\");\n                        result.add(\"Uranus\");\n                        result.add(\"Neptune\");\n                        return result;\n                }\n        }\n        switch (planet1) {\n            case \"Venus\":\n                switch (planet2) {\n                    case \"Earth\":\n                        result.add(\"Earth\");\n                        return result;\n                    case \"Mars\":\n                        result.add(\"Earth\");\n                        result.add(\"Mars\");\n                        return result;\n                    case \"Jupiter\":\n                        result.add(\"Earth\");\n                        result.add(\"Mars\");\n                        result.add(\"Jupiter\");\n                        return result;\n                    case \"Saturn\":\n                        result.add(\"Earth\");\n                        result.add(\"Mars\");\n                        result.add(\"Jupiter\");\n                        result.add(\"Saturn\");\n                        return result;\n                    case \"Uranus\":\n                        result.add(\"Earth\");\n                        result.add", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> ans = new ArrayList<>();\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int id1 = planets.indexOf(planet1);\n            int id2 = planets.indexOf(planet2);\n            if (id1 < id2) {\n                for (int i = id1 + 1; i < id2; i++) ans.add(planets.get(i));\n            } else {\n                for (int i = id1 - 1; i >= id2; i--) ans.add(planets.get(i));\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\"))) return result;\n        if(!(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))) return result;\n        if(planet1.equals(planet2)) return result;\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n        if(i1 < i2) return result;\n        for(int i = i1; i >= i2; i--)\n            result.add(planets.get(i));\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Venus\");\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Earth\");\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Venus\")) {\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Earth\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Mars\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Neptune\");\n        } else if (planet1.equals(\"Neptune\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Mercury\");\n        } else {\n            result.add(\"Mercury\");\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> result = new ArrayList<>();\n        if (planets.indexOf(planet1) < 0 || planets.indexOf(planet2) < 0) return result;\n        int index1 = planets.indexOf(planet1), index2 = planets.indexOf(planet2);\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets.get(i));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            return planets.subList(planets.indexOf(planet1) + 1, planets.indexOf(planet2));\n        }\n        return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        String[] planets = new String[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        // Your code here.\n        ArrayList<String> res = new ArrayList<String>();\n        if(!Arrays.asList(planets).contains(planet1) || !Arrays.asList(planets).contains(planet2)) return res;\n        int id1 = Arrays.asList(planets).indexOf(planet1);\n        int id2 = Arrays.asList(planets).indexOf(planet2);\n        for(int i = Math.min(id1, id2) + 1; i < Math.max(id1, id2); i++){\n            res.add(planets[i]);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> sol = new ArrayList<String>();\n        String s1 = \"Sun\";\n        String m1 = \"Mercury\";\n        String v1 = \"Venus\";\n        String e1 = \"Earth\";\n        String ma1 = \"Mars\";\n        String j1 = \"Jupiter\";\n        String s2 = \"Saturn\";\n        String u1 = \"Uranus\";\n        String n1 = \"Neptune\";\n        String p1, p2;\n        if (planet1.equals(m1) && planet2.equals(s1)) {\n            p1 = \"Venus\";\n            p2 = \"Earth\";\n            sol.add(p1);\n            sol.add(p2);\n        } else if (planet1.equals(m1) && planet2.equals(v1)) {\n            p1 = \"Earth\";\n            p2 = \"Mars\";\n            sol.add(p1);\n            sol.add(p2);\n        } else if (planet1.equals(m1) && planet2.equals(e1)) {\n            p1 = \"Venus\";\n            p2 = \"Earth\";\n            sol.add(p1);\n            sol.add(p2);\n            sol.add(\"Mars\");\n        } else if (planet1.equals(m1) && planet2.equals(ma1)) {\n            p1 = \"Venus\";\n            p2 = \"Earth\";\n            sol.add(p1);\n            sol.add(p2);\n            sol.add(\"Mars\");\n            sol.add(\"Jupiter\");\n        } else if (planet1.equals(m1) && planet2.equals(j1)) {\n            p1 = \"Venus\";\n            p2 = \"Earth\";\n            sol.add(p1);\n            sol.add(p2);\n            sol.add(\"Mars\");\n            sol.add(\"Jupiter\");\n            sol.add(\"Saturn\");\n        } else if (planet1.equals(m1) && planet2.equals(s2)) {\n            p1 = \"Venus\";\n            p2 = \"Earth\";\n            sol.add(p1);\n            sol.add(p2);\n            sol.add(\"Mars\");\n            sol.add(\"Jupiter\");\n            sol.add(\"Saturn\");\n            sol.add(\"Uranus\");\n        } else if (planet1.equals(m1) && planet2.equals(u1)) {\n            p1 = \"Venus\";\n            p2 = \"Earth\";\n            sol.add(p1);\n            sol.add(p2);\n            sol.add(\"Mars\");\n", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int min = planets.indexOf(planet1);\n            int max = planets.indexOf(planet2);\n            if(min < max) {\n                ArrayList<String> res = new ArrayList<String>();\n                for(int i = min; i <= max; i++) {\n                    res.add(planets.get(i));\n                }\n                return res;\n            } else {\n                ArrayList<String> res = new ArrayList<String>();\n                for(int i = max; i <= min; i++) {\n                    res.add(planets.get(i));\n                }\n                return res;\n            }\n        } else {\n            return new ArrayList<String>();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> r = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n                if (planet1.equals(\"Mercury\") && planet2.equals(\"Venus\")) {\n                    r.add(\"Venus\");\n                } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n                    r.add(\"Venus\");\n                    r.add(\"Earth\");\n                } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n                    r.add(\"Venus\");\n                    r.add(\"Earth\");\n                    r.add(\"Mars\");\n                } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n                    r.add(\"Venus\");\n                    r.add(\"Earth\");\n                    r.add(\"Mars\");\n                    r.add(\"Jupiter\");\n                } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n                    r.add(\"Venus\");\n                    r.add(\"Earth\");\n                    r.add(\"Mars\");\n                    r.add(\"Jupiter\");\n                    r.add(\"Saturn\");\n                } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n                    r.add(\"Venus\");\n                    r.add(\"Earth\");\n                    r.add(\"Mars\");\n                    r.add(\"Jupiter\");\n                    r.add(\"Saturn\");\n                    r.add(\"Uranus\");\n                } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n                    r.add(\"Venus\");\n                    r.add(\"Earth\");\n                    r.add(\"Mars\");\n                    r.add(\"Jupiter\");\n                    r.add(\"Saturn\");\n                    r.add(\"Uranus\");\n                    r.add(\"", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        //ArrayList<String> r = new ArrayList<String>();\n        ArrayList<String> r = new ArrayList<>();\n        if(planets.contains(planet1) && planets.contains(planet2)){\n            int indx1 = planets.indexOf(planet1);\n            int indx2 = planets.indexOf(planet2);\n            if(indx1 == indx2){\n                return r;\n            }\n            if(indx1 < indx2){\n                for(int i = indx1 + 1; i < indx2; i++){\n                    r.add(planets.get(i));\n                }\n            }\n            else{\n                for(int i = indx1 - 1; i >= indx2; i--){\n                    r.add(planets.get(i));\n                }\n            }\n            Collections.sort(r);\n            return r;\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int idx1 = planets.indexOf(planet1), idx2 = planets.indexOf(planet2);\n            planets.subList(Math.min(idx1, idx2) + 1, Math.max(idx1, idx2));\n            if (idx1 < idx2) {\n                return new ArrayList<>(planets.subList(idx1 + 1, idx2));\n            } else {\n                return new ArrayList<>(planets.subList(idx2 + 1, idx1));\n            }\n        }\n        return new ArrayList<>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        // your code\n        // the names of the planets from the closest to the farthest from the Sun\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(new String[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}));\n        // checking for correct planet names\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<String>();\n        }\n        int planet1Index = planets.indexOf(planet1);\n        int planet2Index = planets.indexOf(planet2);\n        // taking care of the edge case where planet1 and planet2 are the same\n        if (planet1Index == planet2Index) {\n            return new ArrayList<String>();\n        }\n        // setting up the range for planets between planet1 and planet2\n        if (planet1Index < planet2Index) {\n            return planets.subList(planet1Index + 1, planet2Index);\n        }\n        return planets.subList(planet2Index + 1, planet1Index);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> arr = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\")) {\n            arr.add(\"Venus\");\n        }\n        else if(planet1.equals(\"Venus\")) {\n            arr.add(\"Earth\");\n        }\n        else if(planet1.equals(\"Earth\")) {\n            arr.add(\"Mars\");\n            arr.add(\"Jupiter\");\n        }\n        else if(planet1.equals(\"Mars\")) {\n            arr.add(\"Jupiter\");\n            arr.add(\"Saturn\");\n        }\n        else if(planet1.equals(\"Jupiter\")) {\n            arr.add(\"Saturn\");\n            arr.add(\"Uranus\");\n        }\n        else if(planet1.equals(\"Saturn\")) {\n            arr.add(\"Uranus\");\n            arr.add(\"Neptune\");\n        }\n        else if(planet1.equals(\"Uranus\")) {\n            arr.add(\"Neptune\");\n        }\n        else if(planet1.equals(\"Neptune\")) {\n            arr.add(\"Pluto\");\n        }\n        else {\n            return new ArrayList<String>();\n        }\n        if(planet2.equals(\"Mercury\")) {\n            arr.add(\"Venus\");\n        }\n        else if(planet2.equals(\"Venus\")) {\n            arr.add(\"Earth\");\n        }\n        else if(planet2.equals(\"Earth\")) {\n            arr.add(\"Mars\");\n            arr.add(\"Jupiter\");\n        }\n        else if(planet2.equals(\"Mars\")) {\n            arr.add(\"Jupiter\");\n            arr.add(\"Saturn\");\n        }\n        else if(planet2.equals(\"Jupiter\")) {\n            arr.add(\"Saturn\");\n            arr.add(\"Uranus\");\n        }\n        else if(planet2.equals(\"Saturn\")) {\n            arr.add(\"Uranus\");\n            arr.add(\"Neptune\");\n        }\n        else if(planet2.equals(\"Uranus\")) {\n            arr.add(\"Neptune\");\n        }\n        else if(planet2.equals(\"Neptune\")) {\n            arr.add(\"Pluto\");\n        }\n        else {\n            return new ArrayList<String>();\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\n            \"Mercury\",\n            \"Venus\",\n            \"Earth\",\n            \"Mars\",\n            \"Jupiter\",\n            \"Saturn\",\n            \"Uranus\",\n            \"Neptune\"\n        ));\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<String>();\n        }\n        int planet1Index = planets.indexOf(planet1);\n        int planet2Index = planets.indexOf(planet2);\n        if (planet1Index < planet2Index) {\n            return new ArrayList<String>(planets.subList(planet1Index + 1, planet2Index));\n        }\n        else {\n            return new ArrayList<String>(planets.subList(planet1Index, planet2Index + 1));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> r = new ArrayList<String>();\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if(index1 > index2) {\n                r.addAll(planets.subList(index2, index1));\n            } else {\n                r.addAll(planets.subList(index1, index2));\n            }\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> ret = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return ret;\n        }\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n        for (int i = Math.min(i1, i2) + 1; i < Math.max(i1, i2); i++) {\n            ret.add(planets.get(i));\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> out = new ArrayList<String>();\n        if(!planets.contains(planet1) || !planets.contains(planet2)) return out;\n        int i1 = planets.indexOf(planet1), i2 = planets.indexOf(planet2);\n        if(i1 == i2) return out;\n        if(i1 > i2){\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        for(int i = planets.indexOf(planet1); i <= planets.indexOf(planet2); ++i) out.add(planets.get(i));\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> result = new ArrayList<String>();\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result;\n        }\n        int planet1Index = planets.indexOf(planet1);\n        int planet2Index = planets.indexOf(planet2);\n        if (planet1Index < planet2Index) {\n            for (int i = planet1Index + 1; i < planet2Index; i++) {\n                result.add(planets.get(i));\n            }\n        } else {\n            for (int i = planet2Index + 1; i < planet1Index; i++) {\n                result.add(planets.get(i));\n            }\n            for (int i = 0; i < planet1Index; i++) {\n                result.add(planets.get(i));\n            }\n            for (int i = planet2Index + 1; i < planets.size(); i++) {\n                result.add(planets.get(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        ArrayList<String> result = new ArrayList<String>();\n        if(Arrays.asList(planets).contains(planet1) && Arrays.asList(planets).contains(planet2)) {\n            int index1 = Arrays.asList(planets).indexOf(planet1);\n            int index2 = Arrays.asList(planets).indexOf(planet2);\n            if(index1 < index2) {\n                for(int i = index1 + 1; i < index2; i++) {\n                    result.add(planets[i]);\n                }\n            } else {\n                for(int i = index2 + 1; i < index1; i++) {\n                    result.add(planets[i]);\n                }\n                for(int i = 0; i < index2; i++) {\n                    result.add(planets[i]);\n                }\n            }\n            return result;\n        } else {\n            return result;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> a = new ArrayList<String>(Arrays.asList((\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")));\n        ArrayList<String> b = new ArrayList<String>(Arrays.asList((\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")));\n        int index1 = -1;\n        int index2 = -1;\n        for (int i = 0; i < a.size(); i++) {\n            if (a.get(i).equals(planet1)) {\n                index1 = i;\n            }\n            if (a.get(i).equals(planet2)) {\n                index2 = i;\n            }\n        }\n        if (index1 < index2) {\n            return b.subList(index1 + 1, index2);\n        } else {\n            return new ArrayList<String>();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            ArrayList<String> betweenPlanets = new ArrayList<>();\n            if (index1 < index2) {\n                for (int i = index1 + 1; i < index2; i++) {\n                    betweenPlanets.add(planets.get(i));\n                }\n            }\n            else {\n                for (int i = index1 + 1; i < planets.size(); i++) {\n                    betweenPlanets.add(planets.get(i));\n                }\n                for (int i = 0; i < index2; i++) {\n                    betweenPlanets.add(planets.get(i));\n                }\n            }\n            return betweenPlanets;\n        }\n        else {\n            return new ArrayList<String>();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> result = new ArrayList<>();\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if (index1 < index2) {\n                result.addAll(planets.subList(index1 + 1, index2));\n                result.add(0, planet2);\n            } else {\n                result.addAll(planets.subList(index2 + 1, index1));\n                result.add(0, planet1);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(new String[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}));\n        int p1 = planets.indexOf(planet1);\n        int p2 = planets.indexOf(planet2);\n        if (p1 < 0 || p2 < 0) {\n            return new ArrayList<String>();\n        } else {\n            return new ArrayList<String>(planets.subList(Math.min(p1, p2) + 1, Math.max(p1, p2)));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> list=new ArrayList<>();\n    if(planet1.equals(\"Mercury\")){\n        list.add(\"Venus\");\n        if(planet2.equals(\"Venus\")){\n            list.add(\"Earth\");\n            if(planet2.equals(\"Earth\")){\n                list.add(\"Mars\");\n                if(planet2.equals(\"Mars\")){\n                    list.add(\"Jupiter\");\n                    if(planet2.equals(\"Jupiter\")){\n                        list.add(\"Saturn\");\n                        if(planet2.equals(\"Saturn\")){\n                            list.add(\"Uranus\");\n                            if(planet2.equals(\"Uranus\")){\n                                list.add(\"Neptune\");\n                            }\n                        }\n                    }\n                }\n            }\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if(!planets.contains(planet1) || !planets.contains(planet2))\n            return new ArrayList<String>();\n        else {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if(index1 > index2)\n                return new ArrayList<String>();\n            return new ArrayList<String>(planets.subList(index1 + 1, index2));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        // Write your code here\n        ArrayList<String> a = new ArrayList<>();\n        if((planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) && (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")))\n        {\n            int pos1 = -1, pos2 = -1;\n            for(int i=0;i<8;i++)\n            {\n                if(planet1.equals(\"Mercury\") && i==0)\n                    pos1 = i;\n                else if(planet1.equals(\"Venus\") && i==1)\n                    pos1 = i;\n                else if(planet1.equals(\"Earth\") && i==2)\n                    pos1 = i;\n                else if(planet1.equals(\"Mars\") && i==3)\n                    pos1 = i;\n                else if(planet1.equals(\"Jupiter\") && i==4)\n                    pos1 = i;\n                else if(planet1.equals(\"Saturn\") && i==5)\n                    pos1 = i;\n                else if(planet1.equals(\"Uranus\") && i==6)\n                    pos1 = i;\n                else if(planet1.equals(\"Neptune\") && i==7)\n                    pos1 = i;\n\n                if(planet2.equals(\"Mercury\") && i==0)\n                    pos2 = i;\n                else if(planet2.equals(\"Venus\") && i==1)\n                    pos2 = i;\n                else if(planet2.equals(\"Earth\") && i==2)\n                    pos2 = i;\n                else if(planet2.equals(\"Mars\") && i==3)\n                    pos2 = i;\n                else if(planet2.equals(\"Jupiter\") && i==4)\n                    pos2 = i;\n                else if(planet2.equals(\"Saturn\") && i==5)\n                    pos2 = i;\n                else if(planet2.equals(\"Uranus\") && i==6)\n                    pos2 = i;\n                else if(planet2.equals(\"Neptune\") && i==7)\n                   ", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> sol = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\")) sol.add(\"Venus\");\n        if(planet1.equals(\"Venus\")) sol.add(\"Earth\");\n        if(planet1.equals(\"Earth\")) sol.addAll(Arrays.asList(\"Mars\", \"Jupiter\", \"Saturn\"));\n        if(planet1.equals(\"Mars\")) sol.addAll(Arrays.asList(\"Jupiter\", \"Saturn\", \"Uranus\"));\n        if(planet1.equals(\"Jupiter\")) sol.addAll(Arrays.asList(\"Saturn\", \"Uranus\", \"Neptune\"));\n        if(planet1.equals(\"Saturn\")) sol.addAll(Arrays.asList(\"Uranus\", \"Neptune\"));\n        if(planet1.equals(\"Uranus\")) sol.add(\"Neptune\");\n        if(planet1.equals(\"Neptune\")) sol.add(\"Mercury\");\n        if(planet2.equals(\"Mercury\")) sol.add(\"Venus\");\n        if(planet2.equals(\"Venus\")) sol.add(\"Earth\");\n        if(planet2.equals(\"Earth\")) sol.addAll(Arrays.asList(\"Mars\", \"Jupiter\", \"Saturn\"));\n        if(planet2.equals(\"Mars\")) sol.addAll(Arrays.asList(\"Jupiter\", \"Saturn\", \"Uranus\"));\n        if(planet2.equals(\"Jupiter\")) sol.addAll(Arrays.asList(\"Saturn\", \"Uranus\", \"Neptune\"));\n        if(planet2.equals(\"Saturn\")) sol.addAll(Arrays.asList(\"Uranus\", \"Neptune\"));\n        if(planet2.equals(\"Uranus\")) sol.add(\"Neptune\");\n        if(planet2.equals(\"Neptune\")) sol.add(\"Mercury\");\n        if(sol.size()!=0) return sol;\n        return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> res = new ArrayList<>();\n    if(planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\"))\n    {\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int p1 = planets.indexOf(planet1);\n            int p2 = planets.indexOf(planet2);\n            if (p1 > p2) {\n                int temp = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            return new ArrayList<String>(planets.subList(p1 + 1, p2));\n        }\n        else {\n            return new ArrayList<String>();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            result.add(\"Mercury\");\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            result.add(\"Venus\");\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            result.add(\"Mars\");\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            result.add(\"Uranus\");\n        }\n        if (planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            result.add(\"Neptune\");\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"));\n        ArrayList<String> result = new ArrayList<String>();\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int i = planets.indexOf(planet1);\n            int j = planets.indexOf(planet2);\n            if(i > j) {\n                int temp = j;\n                j = i;\n                i = temp;\n            }\n            for(int k = i; k < j; k++) {\n                result.add(planets.get(k));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\")){\n            result.add(\"Venus\");\n        }\n        else if(planet1.equals(\"Venus\")){\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n        }\n        else if(planet1.equals(\"Earth\")){\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        else if(planet1.equals(\"Mars\")){\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        else if(planet1.equals(\"Jupiter\")){\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        else if(planet1.equals(\"Saturn\")){\n            result.add(\"Uranus\");\n        }\n        else if(planet1.equals(\"Uranus\")){\n            result.add(\"Neptune\");\n        }\n        else{\n            result.clear();\n        }\n        if(planet2.equals(\"Mercury\")){\n            result.add(\"Venus\");\n        }\n        else if(planet2.equals(\"Venus\")){\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n        }\n        else if(planet2.equals(\"Earth\")){\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        else if(planet2.equals(\"Mars\")){\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        else if(planet2.equals(\"Jupiter\")){\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        else if(planet2.equals(\"Saturn\")){\n            result.add(\"Uranus\");\n        }\n        else if(planet2.equals(\"Uranus\")){\n            result.add(\"Neptune\");\n        }\n        else{\n            result.clear();\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        if(!planets.contains(planet1) || !planets.contains(planet2)) return new ArrayList<String>();\n        return planets.subList(planets.indexOf(planet1) + 1, planets.indexOf(planet2));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"));\n        int p1Index = planets.indexOf(planet1);\n        int p2Index = planets.indexOf(planet2);\n        ArrayList<String> res = new ArrayList<String>();\n        if(p1Index == -1 || p2Index == -1) return res;\n        if(p1Index == p2Index) return res;\n        if(p1Index > p2Index) return res;\n        for(int i = p1Index + 1; i < p2Index; i++) res.add(planets.get(i));\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<String>();\n        String planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        if(!Arrays.asList(planets).contains(planet1) || !Arrays.asList(planets).contains(planet2)){\n            return res;\n        }\n        int i1 = Arrays.asList(planets).indexOf(planet1);\n        int i2 = Arrays.asList(planets).indexOf(planet2);\n        if(i1 > i2){\n            int temp = i1;\n            i1 = i2;\n            i2 = temp;\n        }\n        for(int i = i1+1; i<i2; i++){\n            res.add(planets[i]);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planetNames = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planetNames.contains(planet1) && planetNames.contains(planet2)) {\n            int index1 = planetNames.indexOf(planet1);\n            int index2 = planetNames.indexOf(planet2);\n            if (index1 > index2) {\n                return new ArrayList<String>();\n            }\n            ArrayList<String> res = new ArrayList<String>();\n            for (int i = index1; i < index2; i++) {\n                res.add(planetNames.get(i + 1));\n            }\n            return res;\n        }\n        return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> ans = new ArrayList<>();\n        if (planet1.equals(\"Mercury\")) {\n            if (planet2.equals(\"Neptune\")) {\n                ans.add(\"Venus\");\n                ans.add(\"Earth\");\n                ans.add(\"Mars\");\n                ans.add(\"Jupiter\");\n                ans.add(\"Saturn\");\n                ans.add(\"Uranus\");\n            } else if (planet2.equals(\"Uranus\")) {\n                ans.add(\"Venus\");\n                ans.add(\"Earth\");\n                ans.add(\"Mars\");\n                ans.add(\"Jupiter\");\n                ans.add(\"Saturn\");\n            } else if (planet2.equals(\"Saturn\")) {\n                ans.add(\"Venus\");\n                ans.add(\"Earth\");\n                ans.add(\"Mars\");\n                ans.add(\"Jupiter\");\n            } else if (planet2.equals(\"Jupiter\")) {\n                ans.add(\"Venus\");\n                ans.add(\"Earth\");\n                ans.add(\"Mars\");\n            } else if (planet2.equals(\"Mars\")) {\n                ans.add(\"Venus\");\n                ans.add(\"Earth\");\n            } else if (planet2.equals(\"Earth\")) {\n                ans.add(\"Venus\");\n            } else {\n                ans.add(\"\");\n            }\n        } else if (planet1.equals(\"Venus\")) {\n            if (planet2.equals(\"Neptune\")) {\n                ans.add(\"Earth\");\n                ans.add(\"Mars\");\n                ans.add(\"Jupiter\");\n                ans.add(\"Saturn\");\n                ans.add(\"Uranus\");\n            } else if (planet2.equals(\"Uranus\")) {\n                ans.add(\"Earth\");\n                ans.add(\"Mars\");\n                ans.add(\"Jupiter\");\n                ans.add(\"Saturn\");\n            } else if (planet2.equals(\"Saturn\")) {\n                ans.add(\"Earth\");\n                ans.add(\"Mars\");\n                ans.add(\"Jupiter\");\n            } else if (planet2.equals(\"Jupiter\")) {\n                ans.add(\"Earth\");\n                ans.add(\"Mars\");\n            } else if (planet2.equals(\"Mars\")) {\n                ans.add(\"Earth\");\n            } else if (planet2.equals(\"Earth\")) {\n            } else {\n                ans.add(\"\");\n            }\n        } else if (planet1.equals(\"Earth\")) {\n            if (planet2.equals(\"Neptune\")) {\n                ans.add(\"Mars\");\n                ans.", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> result = new ArrayList<String>();\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int i = planets.indexOf(planet1), j = planets.indexOf(planet2);\n            if(i < j) {\n                for(int k = i + 1; k < j; k++)\n                    result.add(planets.get(k));\n            }\n            else {\n                for(int k = j; k < i; k++)\n                    result.add(planets.get(k));\n                for(int k = i + 1; k < planets.size(); k++)\n                    result.add(planets.get(k));\n                for(int k = 0; k < j; k++)\n                    result.add(planets.get(k));\n            }\n            return result;\n        }\n        else\n            return new ArrayList<String>();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> output = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int planet1Index = 0;\n        int planet2Index = 0;\n        boolean planet1Found = false;\n        boolean planet2Found = false;\n        for(int i = 0; i < planets.size(); i++){\n            if(planets.get(i).equals(planet1)){\n                planet1Index = i;\n                planet1Found = true;\n            }\n            else if(planets.get(i).equals(planet2)){\n                planet2Index = i;\n                planet2Found = true;\n            }\n        }\n        if(planet1Found && planet2Found){\n            for(int i = planet1Index + 1; i < planet2Index; i++){\n                output.add(planets.get(i));\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> answer = new ArrayList<>();\n        ArrayList<String> planets = new ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if(index1 == -1 || index2 == -1) {\n            return answer;\n        }\n        planets.remove(planet1);\n        planets.remove(planet2);\n        if(index1 < index2) {\n            for(int i = index1 + 1; i < index2; i++) {\n                answer.add(planets.get(i));\n            }\n        } else {\n            for(int i = index2 + 1; i < index1; i++) {\n                answer.add(planets.get(i));\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"));\n        ArrayList<String> between = new ArrayList<>();\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int p1 = planets.indexOf(planet1);\n            int p2 = planets.indexOf(planet2);\n            if(p1 == 0 && p2 == 7) {\n                between.add(planets.get(1));\n                between.add(planets.get(2));\n                between.add(planets.get(3));\n                between.add(planets.get(4));\n                between.add(planets.get(5));\n                between.add(planets.get(6));\n                return between;\n            } else if(p1 == 7 && p2 == 0) {\n                between.add(planets.get(6));\n                between.add(planets.get(5));\n                between.add(planets.get(4));\n                between.add(planets.get(3));\n                between.add(planets.get(2));\n                between.add(planets.get(1));\n                return between;\n            }\n            if(p1 > p2) {\n                for(int i = p2; i <= p1; i++) {\n                    between.add(planets.get(i));\n                }\n            } else {\n                for(int i = p1; i <= p2; i++) {\n                    between.add(planets.get(i));\n                }\n            }\n            return between;\n        } else {\n            return between;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            for (int i = 0; i < 8; i++) {\n                if (planets.get(i).equals(planet1)) {\n                    for (int j = i + 1; j < 8; j++) {\n                        if (planets.get(j).equals(planet2)) {\n                            result.add(planets.get(i));\n                            for (int k = i + 1; k < j; k++) {\n                                result.add(planets.get(k));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> sortedPlanets = new ArrayList<>();\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            planets.remove(planet1);\n            planets.remove(planet2);\n            int p1Pos = planets.indexOf(planet1);\n            int p2Pos = planets.indexOf(planet2);\n            if (p1Pos < p2Pos) {\n                sortedPlanets.addAll(planets.subList(p1Pos + 1, p2Pos));\n            } else {\n                sortedPlanets.addAll(planets.subList(p2Pos + 1, p1Pos));\n            }\n        }\n        return sortedPlanets;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<String>();\n        String[] planets = {\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n        boolean flag1 = false, flag2 = false;\n        for(int i = 0; i < 8; i++) {\n            if(planets[i].equals(planet1))\n                flag1 = true;\n            if(planets[i].equals(planet2))\n                flag2 = true;\n            if(flag1 && flag2)\n                break;\n        }\n        if(!flag1 || !flag2)\n            return res;\n        int pos1 = -1, pos2 = -1;\n        for(int i = 0; i < 8; i++) {\n            if(planets[i].equals(planet1))\n                pos1 = i;\n            if(planets[i].equals(planet2))\n                pos2 = i;\n        }\n        for(int i = pos1+1; i < pos2; i++) {\n            res.add(planets[i]);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planetList = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int planet1Index = planetList.indexOf(planet1);\n        int planet2Index = planetList.indexOf(planet2);\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1Index == -1 || planet2Index == -1) {\n            return result;\n        } else {\n            if (planet1Index > planet2Index) {\n                for (int i = planet2Index + 1; i < planet1Index; i++) {\n                    result.add(planetList.get(i));\n                }\n                result.add(planetList.get(planet1Index));\n            } else {\n                for (int i = planet1Index + 1; i < planet2Index; i++) {\n                    result.add(planetList.get(i));\n                }\n                result.add(planetList.get(planet2Index));\n            }\n            return result;\n        }"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long ans = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                ans *= n % 10;\n            }\n            n /= 10;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1l;\n        while (n != 0l) {\n            if (n % 2l == 1l) {\n                result *= (n % 10l);\n            }\n            n /= 10l;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long r = 1;\n        while (n > 0) {\n            if (n % 2 != 0) {\n                r *= n % 10;\n            }\n            n = n / 10;\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while (n > 0) {\n            long digit = n % 10;\n            if (digit % 2 == 1) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long prod = 1;\n        while (n > 0) {\n            long temp = n % 10;\n            if (temp % 2 != 0) {\n                prod *= temp;\n            }\n            n /= 10;\n        }\n        return prod;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long ans = 1l;\n        for(long i = 1l; i < n; i += 2l) {\n            ans *= i;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long out = 1;\n        long mod = 10;\n        while (n > 0) {\n            if (n % 2 != 0) out *= (n % 10);\n            n /= 10;\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        ArrayList<Long> odd = new ArrayList<Long>();\n        while (n > 0) {\n            long digit = n % 10;\n            if (digit % 2 == 0) {\n                odd.add(0l);\n            }\n            else {\n                odd.add(digit);\n            }\n            n = n / 10;\n        }\n        long product = 1;\n        for (Long d : odd) {\n            product *= d;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        boolean flag = false;\n        long product = 1;\n        while(n!=0){\n            long temp = n%10;\n            if(temp%2!=0){\n                product*=temp;\n                flag=true;\n            }\n            n = n/10;\n        }\n        if(flag==false)\n            return 0;\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        long tmp = n;\n        while(tmp > 0){\n            long lastDigit = tmp % 10;\n            if(lastDigit % 2 != 0){\n                product *= lastDigit;\n            }\n            tmp /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n > 0) {\n            int digit = (int)(n % 10);\n            if (digit % 2 != 0) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        for (long i = n; i > 0; i /= 10) {\n            long d = i % 10;\n            if (d % 2 == 1) {\n                product *= d;\n            }\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n > 0) {\n            if ((n % 10) % 2 == 1) {\n                result *= (n % 10);\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return Arrays.stream(String.valueOf(n).split(\"\"))\n                    .map(String::trim)\n                    .map(Long::parseLong)\n                    .filter(num -> num % 2 != 0)\n                    .mapToLong(Long::longValue)\n                    .reduce(1, (a, b) -> a * b);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        long mod = 10;\n        while(n > 0) {\n            long remainder = n % mod;\n            if(remainder % 2 != 0) {\n                product *= remainder;\n            }\n            n = n / 10;\n            mod *= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        long temp = n;\n        while(temp > 0) {\n            long digit = temp % 10;\n            if(digit % 2 != 0) {\n                product *= digit;\n            }\n            temp /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        for (int i = 0; i < String.valueOf(n).length(); i++) {\n            long dig = Long.parseLong(String.valueOf(n).charAt(i) + \"\");\n            if (dig % 2 != 0) {\n                result *= dig;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long ans = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                ans *= n % 10;\n            }\n            n /= 10;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result *= n % 10;\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        int product = 1;\n        while (n > 0) {\n            int d = (int)(n % 10);\n            n /= 10;\n            if (d % 2 != 0) {\n                product *= d;\n            }\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while(n > 0){\n            long r = n % 10;\n            n = n / 10;\n            if(r % 2 != 0) res *= r;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n < 10) {\n            return n;\n        }\n        long digits = 1;\n        while (n > 0) {\n            if (n % 10 % 2 == 1) {\n                digits *= n % 10;\n            }\n            n /= 10;\n        }\n        return digits;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long ans = 1;\n        for(long i = 1; i <= n; i++) {\n            long x = n / i;\n            if (x % 2 == 1) ans *= x % 10;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n > 0) {\n            res *= n % 10;\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long prod = 1;\n        while (n > 0) {\n            int digit = (int) (n % 10);\n            if (digit % 2 == 1) {\n                prod *= digit;\n            }\n            n /= 10;\n        }\n        return prod;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n != 0) {\n            if (n % 2 != 0) {\n                result *= n % 10;\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        String s = Long.toString(n);\n        long res = 1;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) % 2 == 1)\n                res *= Character.getNumericValue(s.charAt(i));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1l;\n        while (n > 0l) {\n            if (n % 2l == 1l) {\n                res *= n % 10l;\n            }\n            n /= 10l;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long r = 1;\n        while(n != 0) {\n            if (n % 2 != 0)\n                r = r * (n % 10);\n            n = n / 10;\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        // final long product = LongStream.of(String.valueOf(n).chars().map(x -> (long) (x - 48))).filter(x -> x % 2 != 0).reduce(1l, (a, b) -> a * b);\n        // return product == 1 ? 0 : product;\n        return LongStream.of(String.valueOf(n).chars().map(x -> (long) (x - 48)).filter(x -> x % 2 != 0).reduce(0l, (a, b) -> a * b));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        // write your code here\n        long result = 1;\n        while(n>0){\n            if(n%10%2!=0)result*=n%10;\n            n/=10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        boolean[] digits = new boolean[10];\n        for (int i = 0; i < 10; i++) {\n            digits[i] = false;\n        }\n        while (n > 0) {\n            int digit = (int) (n % 10);\n            if (digit % 2 != 0) {\n                digits[digit] = true;\n            }\n            n /= 10;\n        }\n        long product = 1;\n        for (int i = 0; i < 10; i++) {\n            if (digits[i]) {\n                product *= i;\n            }\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while(n > 0) {\n            product *= (n % 2);\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        String digits = String.valueOf(n);\n        long result = 1;\n        for (int i = 0; i < digits.length(); i++) {\n            long num = digits.charAt(i) - '0';\n            if (num % 2 == 1) {\n                result *= num;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n      ArrayList<Long> oddDigits = new ArrayList<Long>();\n      while(n != 0){\n        long digit = (n % 10);\n        if(digit % 2 != 0){\n          oddDigits.add(digit);\n        }\n        n = n / 10;\n      }\n      long product = 1;\n      for(Long digit : oddDigits){\n        product = product * digit;\n      }\n      return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        for(int i=0;i<Long.toString(n).length();i++){\n            if(Long.toString(n).charAt(i)%2==1){\n                result*=Long.parseLong(Long.toString(n).charAt(i)+\"\");\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n != 0) {\n            if ((n & 1) != 0) {\n                result *= n % 10;\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        ArrayList<Long> oddDigits = new ArrayList<Long>();\n        for (int i = 0; i < Math.log(n, 10) + 1; i++) {\n            if (n % (long) Math.pow(10, i) >= 10) {\n                oddDigits.add(n / (long) Math.pow(10, i) % 10);\n            }\n        }\n        long ans = 1;\n        for (int i = 0; i < oddDigits.size(); i++) {\n            ans *= oddDigits.get(i);\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n > 0) {\n            res *= (n % 10) % 2 == 1 ? n % 10 : 1;\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        long o = 1;\n        for(int i = n; i > 0; i /= 10)\n        {\n            long a = i % 10;\n            if(a % 2 != 0)\n                res *= a;\n            else\n                o = 0;\n        }\n        if(o == 0)\n            return 0;\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        // return a Number\n        long product = 1;\n        while(n != 0) {\n            long digit = (long)n % 10;\n            n = n / 10;\n            if(digit % 2 == 0) {\n                continue;\n            }\n            else {\n                product *= digit;\n            }\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return Arrays.stream(n + \"\".split(\"\"))\n                .filter(x -> Long.parseLong(x) % 2 != 0)\n                .mapToLong(x -> Long.parseLong(x))\n                .reduce(1, (a, b) -> a * b);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long prod = 1;\n        while (n > 0) {\n            prod *= n % 10;\n            n /= 10;\n        }\n        return prod;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long ans = 1;\n        while (n != 0) {\n            int x = (int)(n % 10);\n            if (x % 2 != 0) {\n                ans *= x;\n            }\n            n /= 10;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while(n > 0){\n            res *= n % 10;\n            n = n / 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long r = 1;\n        while (n != 0) {\n            if (n % 2 == 1) {\n                r *= n % 10;\n            }\n            n /= 10;\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while (n != 0) {\n            if ((n % 2) == 1) {\n                product *= n % 10;\n            }\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        // We can do it in one pass\n        // if we use two variables to hold product of odd and even digits.\n        // Because after multiplying odd product with an odd number, the odd product will still be odd,\n        // multiplying odd product with an even number, the odd product will still be odd,\n        // multiplying even product with an odd number, the even product will still be even,\n        // multiplying even product with an even number, the even product will still be even.\n        // Thus, we do not need to check the parity of a digit while multiplying.\n        long odd = 1;\n        long even = 1;\n        for (long d = n; d > 0; d /= 10) {\n            long digit = d % 10;\n            if (digit % 2 == 1) {\n                odd *= digit;\n            } else {\n                even *= digit;\n            }\n        }\n        return odd;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while (n > 0) {\n            if ((n % 10) % 2 != 0) {\n                product *= (n % 10);\n            }\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long p = 1L;\n        while (n > 0) {\n            int d = (int) (n % 10);\n            if (d % 2 != 0) {\n                p *= d;\n            }\n            n /= 10;\n        }\n        return p;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long ans = 1;\n        long nn = n;\n        while(nn > 0) {\n            long dig = nn % 10;\n            nn = nn / 10;\n            if(dig % 2 == 1) ans *= dig;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long prod = 1;\n        while(n > 0) {\n            long cur = n % 10;\n            if(cur % 2 != 0) prod *= cur;\n            n /= 10;\n        }\n        return prod;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n > 0) {\n            if ((n % 2) != 0) {\n                res *= n % 10;\n            }\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        int res = 1;\n        while (n != 0) {\n            int a = (int) (n % 10);\n            if (a % 2 != 0)\n                res *= a;\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while(n > 0){\n            if(n % 2 == 1) product *= n % 10;\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while(n != 0) {\n            res *= n % 10 % 2 == 1 ? n % 10 : 1;\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n != 0) {\n            if (n % 2 != 0)\n                res *= n % 10;\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n != 0) {\n            long number = n % 10;\n            if (number % 2 != 0) {\n                result *= number;\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long prod = 1;\n        while (n > 0) {\n            int digit = (int) (n % 10);\n            if (digit % 2 != 0) prod *= digit;\n            n /= 10;\n        }\n        return prod;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long digitsProd = 1;\n        while (n != 0) {\n            long digit = n % 10;\n            if (digit % 2 == 1) {\n                digitsProd *= digit;\n            }\n            n /= 10;\n        }\n        return digitsProd;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n < 0) return -1;\n        long res = 1;\n        while (n > 0) {\n            long t = n % 10;\n            n /= 10;\n            if (t % 2 == 1) res *= t;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        for(int i = 0; n > 0; i++) {\n            product *= (n % 10) % 2 == 1 ? n % 10 : 1;\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long prod = 1;\n        while (n != 0) {\n            int mod = (int)(n % 10);\n            if (mod % 2 != 0) {\n                prod *= mod;\n            }\n            n /= 10;\n        }\n        return prod;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while(n > 0) {\n            long lastDigit = n % 10;\n            if(lastDigit % 2 != 0) {\n                product *= lastDigit;\n            }\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n <= 9) return n;\n        long res = 1;\n        while (n > 0) {\n            res *= (n%10);\n            n = n/10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1l;\n        while (n != 0) {\n            if (n % 2 != 0)\n                res *= n % 10;\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while(n != 0) {\n            if((n % 2) != 0)\n                product *= n % 10;\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long digit = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                digit *= n % 10;\n            }\n            n = n / 10;\n        }\n        return digit;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n > 0) {\n            long last = n % 10;\n            if (last % 2 != 0) {\n                result *= last;\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long d = 1;\n        while (n > 0) {\n            long t = n % 10;\n            if (t % 2 != 0) {\n                d *= t;\n            }\n            n /= 10;\n        }\n        return d;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return Arrays.stream(String.valueOf(n).split(\"\")).filter(s -> Long.parseLong(s) % 2 != 0).mapToLong(Long::parseLong).reduce(1, (a, b) -> a * b);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return 0L;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n != 0) {\n            long digit = n % 10;\n            if (digit % 2 == 1) {\n                result *= digit;\n            }\n            n = n / 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n != 0) {\n            if ((n % 10) % 2 != 0) {\n                result *= (n % 10);\n            }\n            n = n / 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long oddProduct = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                oddProduct = oddProduct * (n % 10);\n            }\n            n = n / 10;\n        }\n        return oddProduct;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n != 0) {\n            if (n % 2 != 0) result *= n % 10;\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long mul = 1;\n        while(n > 0) {\n            if(n%2 != 0)\n                mul *= (n%10);\n            n /= 10;\n        }\n        return mul;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long mult = 1;\n        while (n != 0) {\n            long lastDigit = n % 10;\n            n = n / 10;\n            if (lastDigit % 2 != 0) {\n                mult *= lastDigit;\n            }\n        }\n        return mult;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        long res = 1;\n        while (n != 0) {\n            long d = n % 10;\n            n = n / 10;\n            if (d % 2 != 0) {\n                res = res * d;\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n > 0) {\n            if ((n % 10) % 2 == 1)\n                result *= (n % 10);\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        int s = 1;\n        while (n > 0) {\n            int t = (int) n % 10;\n            if (t % 2 != 0) {\n                s *= t;\n            }\n            n = n / 10;\n        }\n        return s;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                n /= 10;\n            } else {\n                result *= n % 10;\n                n /= 10;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n > 0) {\n            if (n % 2 == 1) res *= n % 10;\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n      long product = 1;\n      while (n != 0) {\n        if (n % 2 == 0) {\n          n /= 10;\n        } else {\n          product *= n % 10;\n          n /= 10;\n        }\n      }\n      return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while(n > 0) {\n            long lastDigit = n % 10;\n            if(lastDigit % 2 == 1) product *= lastDigit;\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long ans = 1;\n        while (n != 0) {\n            if ((n & 1) == 1) {\n                ans *= n % 10;\n            }\n            n /= 10;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return new ArrayList<Long>() {\n            { add(1l); add(3l); add(5l); add(7l); add(9l); }\n        }.parallelStream().filter(i -> n % i == 0).reduce(1, (a, b) -> a * b);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be positive\");\n        }\n        long product = 1;\n        while (n > 0) {\n            int digit = (int) (n % 10);\n            if ((digit & 1) != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long s = 1;\n        while (n > 0) {\n            if ((n % 2) == 1) {\n                s *= (n % 10);\n            }\n            n /= 10;\n        }\n        return s;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        boolean flag = true;\n        long product = 1;\n        while(n>0){\n            if(n%10 %2 == 1){\n                product *= n%10;\n                flag = false;\n            }\n            n = n/10;\n        }\n        if(flag)\n            return 0;\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1l;\n        long temp = n;\n        while (temp > 0) {\n            long last = temp % 10;\n            if (last % 2 != 0) result = result * last;\n            temp = temp / 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while(n != 0) {\n            if (n%10 %2 != 0) {\n                result *= n%10;\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long ans = 1;\n        while (n != 0) {\n            ans *= n % 10;\n            n /= 10;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        long odd = 1;\n        while (n > 0) {\n            long digit = n % 10;\n            if (digit % 2 != 0) {\n                odd = odd * digit;\n            }\n            n = n / 10;\n        }\n        return odd;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n > 0) {\n            if (n % 2 != 0)\n                res *= n % 10;\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        long number = n;\n        while (number > 0) {\n            long rem = number % 10;\n            if (rem % 2 != 0) {\n                result *= rem;\n            }\n            number /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return Arrays.stream((\"\"+n).split(\"\")).filter(x -> x.charAt(0)%2 == 1).mapToInt(Integer::parseInt).reduce(1, (x,y) -> x*y);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while (n > 0) {\n            if (n % 2 != 0)\n                product *= n % 10;\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while (n > 0) {\n            int digit = (int) (n % 10);\n            if (digit % 2 != 0) product *= digit;\n            n = n / 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n > 0) {\n            long d = n % 10;\n            if (d % 2 == 1) res *= d;\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long acc = 1;\n        while (n > 0) {\n            acc *= (n % 10) & 1;\n            n /= 10;\n        }\n        return acc;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n > 0) {\n            long d = n % 10;\n            n /= 10;\n            if (d % 2 == 1) result *= d;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1l;\n        while (n > 0) {\n            long digit = n % 10;\n            if (digit % 2 != 0) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n > 0) {\n            long i = n % 10;\n            if (i % 2 != 0)\n                res *= i;\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n == 0) return 0;\n        long m = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                m *= n % 10;\n            }\n            n /= 10;\n        }\n        return m;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n != 0) {\n            if (n % 2 != 0) {\n                result *= n % 10;\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n == 0L) {\n            return 0L;\n        }\n        long digits = 1L;\n        while (n > 0L) {\n            long lastDigit = n % 10L;\n            if (lastDigit % 2 != 0) {\n                digits *= lastDigit;\n            }\n            n /= 10L;\n        }\n        return digits;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while(n>0) {\n            long digit = n%10;\n            if(digit%2==1) product*=digit;\n            n/=10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n > 0) {\n            long d = n % 10;\n            if (d % 2 == 1) {\n                res *= d;\n            }\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        //Your code here\n        long result = 1;\n        while (n > 0) {\n            result *= n % 10;\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n > 0) {\n            if ((n % 10) % 2 != 0)\n                res *= (n % 10);\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if(n == 0){\n            return 0;\n        }\n        long product = 1;\n        while(n!=0){\n            long rem = n%10;\n            if(rem%2 == 1){\n                product = product*rem;\n            }\n            n = n/10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n      long res = 1;\n      long num = n;\n      while(num > 0){\n        long rem = num % 10;\n        if(rem % 2 != 0){\n          res *= rem;\n        }\n        num /= 10;\n      }\n      return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        int product = 1;\n        while (n > 0) {\n            if (n % 2 != 0) {\n                product = (int) (product * (n % 10));\n            }\n            n = n / 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long ret = 1;\n        while (n != 0) {\n            long d = n % 10;\n            if (d % 2 == 1) {\n                ret *= d;\n            }\n            n /= 10;\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        int prod = 1;\n        while (n != 0) {\n            if (n % 2 != 0) {\n                prod *= (int)(n % 10);\n            }\n            n /= 10;\n        }\n        return prod;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n      if (n == 0) return n;\n      long res = 1;\n      while (n > 0) {\n        res *= n % 10;\n        n /= 10;\n      }\n      return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        String str = Long.toString(n);\n        long result = 1;\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if (Character.isDigit(c) && (c % 2 != 0)) {\n                result *= (c - '0');\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                res *= n % 10;\n            }\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n < 0) {\n            n = -n;\n        }\n        long p = 1;\n        for (int i = 1; i < 10; i += 2) {\n            p *= n % 10l == i ? n % 10l : 1;\n            n /= 10;\n        }\n        return p;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long ans = 1;\n        while(n > 0) {\n            int rem = (int) n % 10;\n            if (rem % 2 != 0) {\n                ans *= rem;\n            }\n            n /= 10;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long prod = 1;\n        while (n != 0) {\n            long digit = n % 10;\n            if ((digit & 1) != 0) prod *= digit;\n            n /= 10;\n        }\n        return prod;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        // return product of odd digits in n\n        long product = 1;\n        while (n != 0) {\n            if ((n % 10) % 2 != 0) {\n                product *= (n % 10);\n            }\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n == 0) return 0l;\n        return Stream.of(String.valueOf(n).split(\"\"))\n        .filter(it -> it.charAt(0) % 2 != 0)\n        .mapToLong(it -> Long.valueOf(it))\n        .reduce(1l, (acc, val) -> acc * val);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while (n > 0) {\n            long temp = n % 10;\n            if (temp % 2 != 0)\n                product *= temp;\n            n = n / 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        int res = 1;\n        while(n > 0) {\n            int digit = (int) (n % 10);\n            if(digit % 2 != 0) {\n                res *= digit;\n            }\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        long current = n;\n        while(current != 0) {\n            if(current % 2 == 1) {\n                product *= (current % 10);\n            }\n            current = current / 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1l;\n        while (n != 0l) {\n            result *= n % 10l;\n            n /= 10l;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long m = 1;\n        while (n > 0) {\n            if ((n % 10) % 2 == 1) {\n                m *= n % 10;\n            }\n            n /= 10;\n        }\n        return m;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n != 0) {\n            long r = n % 10;\n            if ((r & 1) != 0) {\n                result *= r;\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        String s = n.toString();\n        ArrayList<Long> oddDigits = new ArrayList<Long>();\n        for(int i = 0; i < s.length(); i++) {\n            char digit = s.charAt(i);\n            if(digit % 2 != 0) {\n                oddDigits.add(Long.parseLong(Character.toString(digit)));\n            }\n        }\n        long product = 1;\n        for(int i = 0; i < oddDigits.size(); i++) {\n            long n1 = oddDigits.get(i);\n            product *= n1;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n < 10) {\n            return n;\n        } else {\n            if (n % 2 == 0) {\n                return 0;\n            } else {\n                return digits(n / 10) * n % 10;\n            }\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long answer = 1;\n        while (n > 0) {\n            if ((n % 10) % 2 != 0) {\n                answer *= (n % 10);\n            }\n            n /= 10;\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long s = 1;\n        while (n > 0) {\n            long i = n % 10;\n            n /= 10;\n            if (i % 2 == 1) {\n                s *= i;\n            }\n        }\n        return s;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        // Write your code here\n        long product = 1;\n        while(n != 0) {\n            if(n % 2 != 0) {\n                product *= n % 10;\n            }\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        // return -1;\n        long res = 1;\n        while(n>0){\n            if(n%10%2 != 0) res *= n%10;\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                product *= n % 10;\n            }\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n != 0) {\n            if ((n % 10) % 2 != 0) {\n                result *= (n % 10);\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n > 0) {\n            int digit = (int) (n % 10);\n            if (digit % 2 != 0) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while (n != 0) {\n            long digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while (n > 0) {\n            long mod = n % 10;\n            if (mod % 2 != 0) {\n                product *= mod;\n            }\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while(n > 0) {\n            if((n % 10) % 2 != 0) {\n                product *= (n % 10);\n            }\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        int ret = 1;\n        while (n != 0) {\n            int t = (int)(n % 10);\n            if (t % 2 != 0) ret *= t;\n            n /= 10;\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1l;\n        while (n > 0) {\n            product *= n % 2 == 1 ? n % 10 : 1;\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while(n != 0) {\n            result *= (n%10);\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long acc = 1;\n        while (n > 0) {\n            long digit = n % 10;\n            if (digit % 2 != 0) {\n                acc *= digit;\n            }\n            n /= 10;\n        }\n        return acc;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        // 1) If n is zero, return 0.\n        if (n == 0)\n            return 0;\n        // 2) If n is an odd number, return n.\n        if (n % 2 != 0)\n            return n;\n        // 3) If n is an even number, repeat the following steps until a single odd digit remains:\n        //    3.1) Divide n by 10.\n        //    3.2) Floor the result to an integer.\n        //    3.3) Save the remainder as r.\n        //    3.4) Set n equal to the quotient.\n        // 4) Return the product of all the odd digits in n multiplied together.\n        while (n != 0) {\n            int r = (int) (n % 10);\n            n = (int) Math.floor(n / 10);\n            if (r % 2 != 0)\n                n *= r;\n        }\n        return n;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long out = 1;\n        while (n != 0) {\n            if (n % 2 != 0) {\n                out *= n % 10;\n            }\n            n /= 10;\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n > 0) {\n            res *= n % 10;\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return Arrays.stream(Long.toString(n).split(\"\")).filter((s) -> (Long.parseLong(s) % 2 != 0)).mapToLong((s) -> Long.parseLong(s)).reduce((f, s) -> f * s, 1);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while(n>0){\n            long last = n%10;\n            if(last%2!=0){\n                result *= last;\n            }\n            n = n/10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n      long total = 0;\n      while(n != 0) {\n        long d = n % 10;\n        if(d % 2 == 1)\n          total = total * d;\n        n /= 10;\n      }\n      return total;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while (n != 0) {\n            int digit = (int) (n % 10);\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while(n > 0) {\n            if((n % 2) == 1) {\n                res *= (n % 10);\n            }\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        int result = 1;\n        while (n != 0) {\n            if (n % 2 != 0) {\n                result *= (n % 10);\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long out = 1;\n        while (n != 0) {\n            long digit = n % 10;\n            if (digit % 2 != 0) {\n                out *= digit;\n            }\n            n /= 10;\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n > 0) {\n            long digit = n % 10;\n            n = n / 10;\n            if (digit % 2 != 0)\n                res = res * digit;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while(n != 0){\n            long lastDigit = n % 10;\n            if(lastDigit % 2 == 1){\n                result *= lastDigit;\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while (n > 0) {\n            int remainder = (int) (n % 10);\n            n = n / 10;\n            if (remainder % 2 == 1) {\n                product *= remainder;\n            }\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long m = 1;\n        long i = 1;\n        for(int j = 0; j < 9; ++j) {\n            long x = n % 10;\n            n /= 10;\n            if(x % 2 == 1) {\n                m *= x;\n                i *= x;\n            }\n        }\n        if(i == 1)\n            return 0;\n        return m;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        for (char c : Long.toString(n).toCharArray()) {\n            if (c != '0' && Integer.parseInt(String.valueOf(c)) % 2 != 0)\n                product *= Integer.parseInt(String.valueOf(c));\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        int i = 1;\n        while(n != 0) {\n            if(n % 2 == 0) {\n                n /= 10;\n            } else {\n                product *= n % 10;\n                n /= 10;\n            }\n            i++;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1l;\n        while (n != 0) {\n            long digit = n % 10;\n            if (digit % 2 != 0)\n                product *= digit;\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return n;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while (n > 0) {\n            long r = n % 10;\n            if (r % 2 == 1) product *= r;\n            n = n / 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long ret = 1;\n        while(n != 0){\n            int num = (int)(n % 10);\n            if(num % 2 != 0) ret *= num;\n            n /= 10;\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n > 0) {\n            if (n % 2 != 0) {\n                result *= n % 10;\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        long num = n;\n        while(num != 0){\n            long lastDigit = num % 10;\n            if(lastDigit % 2 == 1){\n                product *= lastDigit;\n            }\n            num /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1l;\n        while (n > 0) {\n            res *= n % 10;\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while(n > 0) {\n            long last = n % 10;\n            n /= 10;\n            if(last % 2 == 1) product *= last;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n == 0)\n            return 0;\n        return Arrays.stream(Long.toString(n).split(\"\")).mapToLong(Integer::parseInt).filter(x -> x % 2 == 1).reduce(1, (a, b) -> a * b);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long prod = 1;\n        while (n > 0) {\n            long rem = n % 10;\n            if (rem % 2 != 0) prod *= rem;\n            n /= 10;\n        }\n        return prod;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long ans = 1;\n        while (n != 0) {\n            int dig = (int) n % 10;\n            if (dig % 2 == 1) {\n                ans *= dig;\n            }\n            n /= 10;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        for (int i = 0; i < 10; i++) {\n            if ((n % 10) % 2 == 1) result *= (n % 10);\n            n = n / 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while(n>0){\n            product = n%10;\n            if(product%2!=0){\n                product*=(n%10);\n            }\n            n/=10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n < 10) {\n            return n;\n        }\n        return n % 10 == 0 ? 0 : digits(n / 10) * (n % 10);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        ArrayList<Long> arrayList = new ArrayList<>();\n        for (long i = 0; i < Long.toString(n).length(); i++) {\n            arrayList.add(Long.valueOf(Long.toString(n).charAt(i) - '0'));\n        }\n        long product = 1;\n        for (int j = 0; j < arrayList.size(); j++) {\n            if (arrayList.get(j) % 2 != 0) {\n                product = product * arrayList.get(j);\n            }\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n == 0) {\n            return 0;\n        } else {\n            long prod = 1;\n            while (n != 0) {\n                long r = n % 10;\n                if (r % 2 == 1) {\n                    prod *= r;\n                }\n                n /= 10;\n            }\n            return prod;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long answer = 1;\n        while (n > 0) {\n            int d = (int) (n % 10);\n            if (d % 2 != 0) {\n                answer = answer * d;\n            }\n            n = n / 10;\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long prod = 1;\n        while (n > 0) {\n            prod *= (n % 2) == 0 ? 1 : n % 10;\n            n /= 10;\n        }\n        return prod;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long prod = 1;\n        while (n != 0) {\n            if (n % 2 == 1) {\n                prod *= n % 10;\n            }\n            n /= 10;\n        }\n        return prod;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while (n != 0) {\n            long lastDigit = n % 10;\n            n /= 10;\n            if (lastDigit % 2 != 0) {\n                product *= lastDigit;\n            }\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long p = 1;\n        while (n != 0) {\n            if (n % 10 % 2 != 0) {\n                p *= n % 10;\n            }\n            n /= 10;\n        }\n        return p;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long res = 1;\n        while (n != 0) {\n            if (n % 2 != 0) res *= (n % 10);\n            n /= 10;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        if (n == 0) return 0;\n        long product = 1;\n        while (n != 0) {\n            long lastDigit = n % 10;\n            if ((lastDigit & 1) == 1)\n                product *= lastDigit;\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long ret = 1;\n        while (n > 0) {\n            int i = (int) (n % 10);\n            if (i % 2 == 1) {\n                ret *= i;\n            }\n            n /= 10;\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        ArrayList<Long> ar = new ArrayList<>();\n        while(n>0) {\n            ar.add(n%10);\n            n/=10;\n        }\n        long result = 1;\n        for(int i = 0; i < ar.size(); i++) {\n            if(ar.get(i) % 2 != 0) {\n                result *= ar.get(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while(n > 0) {\n            long d = n % 10;\n            n /= 10;\n            if(d % 2 != 0) {\n                result *= d;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        while(n > 0) {\n            long digit = n % 10;\n            if(digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n != 0) {\n            if ((n % 10) % 2 != 0) {\n                result *= (n % 10);\n            }\n            n /= 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long result = 1;\n        while (n > 0) {\n            if ((n % 10) % 2 == 1) {\n                result *= (n % 10);\n            }\n            n = n / 10;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        long product = 1;\n        for (int i = 0; i < 10; i++) {\n            product *= (n % 10) % 2 != 0 ? (n % 10) : 1;\n            n = n / 10;\n        }\n        return product;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return n;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n        return 0;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.replaceAll(\"[, ]\", \" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.replaceAll(\"[, ]\", \" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        s = s.replaceAll(\",\", \" \");\n        String[] strs = s.split(\" \");\n        ArrayList<String> arr = new ArrayList<String>();\n        for (String str : strs)\n            arr.add(str);\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        if (s.isEmpty()) {\n            return new ArrayList<String>();\n        }\n        else if (s.indexOf(\",\") == -1) {\n            return new ArrayList<String>(Arrays.asList(s.split(\" \")));\n        }\n        else {\n            return new ArrayList<String>(Arrays.asList(s.split(\",\")));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.replaceAll(\"\\\\s+\", \",\").split(\",\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String regex = \"[ ,]+\";\n        return new ArrayList<String>(Arrays.asList(s.split(regex)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"\\\\W+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] s1 = s.split(\",\");\n        String[] s2 = s.split(\"\\\\s\");\n        ArrayList<String> al = new ArrayList<String>();\n        for(int i = 0;i < s1.length;i++)\n        {\n            if(!s1[i].equals(\"\"))\n                al.add(s1[i]);\n        }\n        for(int i = 0;i < s2.length;i++)\n        {\n            if(!s2[i].equals(\"\"))\n                al.add(s2[i]);\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.split(\"[\\\\s,]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.replaceAll(\"\\\\W\", \" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> list = new ArrayList<>();\n        String[] str = s.split(\"[\\\\s,]+\");\n        for(String x : str) {\n            list.add(x);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> res = new ArrayList<String>();\n        String[] words = s.replaceAll(\",\", \" \").split(\"\\\\s+\");\n        for (String word : words) res.add(word);\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"\\\\s*,\\\\s*|\\\\s+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        s = s.replaceAll(\",\", \" \");\n        ArrayList<String> result = new ArrayList<String>(Arrays.asList(s.split(\" \")));\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> list = new ArrayList<>();\n        String[] splitted = s.split(\",|\\\\s\");\n        for (String word : splitted) {\n            list.add(word);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.split(\"[, ]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> l = new ArrayList<>();\n        StringTokenizer st = new StringTokenizer(s);\n        while (st.hasMoreTokens())\n            l.add(st.nextToken());\n        return l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        s = s.trim().replaceAll(\"\\\\s+\", \",\");\n        ArrayList<String> list = new ArrayList<String>();\n        String[] arr = s.split(\",\");\n        for (int i = 0; i < arr.length; i++) {\n            list.add(arr[i]);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[, ]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> arrayList = new ArrayList<String>(Arrays.asList(s.replaceAll(\"\\\\s+\", \",\").split(\",\")));\n        return arrayList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> a = new ArrayList<String>();\n        String[] a2 = s.split(\", | \");\n        for(String i: a2)\n            a.add(i);\n        return a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> result = new ArrayList<String>();\n        String[] strArray = s.split(\",|\\\\s+\");\n        for (int i = 0; i < strArray.length; i++)\n            result.add(strArray[i]);\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> res = new ArrayList<String>();\n        s = s.trim();\n        String[] spl = s.split(\"\\\\s*,\\\\s*\");\n        for (int i = 0; i < spl.length; i++) {\n            String[] tmp = spl[i].split(\"\\\\s*\");\n            for (int j = 0; j < tmp.length; j++) {\n                res.add(tmp[j]);\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> arrayList = new ArrayList<String>();\n        for (String word : s.split(\"\\\\s+|,\\\\s*\")) {\n            arrayList.add(word);\n        }\n        return arrayList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[, ]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.trim().split(\"[ ,]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] words = s.split(\"[ ,]+\");\n        ArrayList<String> arrList = new ArrayList<String>(Arrays.asList(words));\n        return arrList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.split(\"[, ]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] words = s.split(\"[ ,]\");\n        ArrayList<String> result = new ArrayList<String>();\n        for(int i = 0; i < words.length; i++)\n            result.add(words[i]);\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.replaceAll(\"[\\\\s+|,]\", \" \").trim().split(\"\\\\s+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[, ]\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.trim().split(\"\\\\W+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] arr = s.split(\"\\\\s*,\\\\s*|\\\\s+\");\n        ArrayList<String> list = new ArrayList<String>();\n        for(int i = 0; i < arr.length; i++) {\n            list.add(arr[i]);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"\\\\s*,\\\\s*|\\\\s+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.replaceAll(\"[ ,]+\", \" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> r = new ArrayList<String>();\n        if(s.length() == 0) return r;\n        String[] t = s.split(\", | \");\n        for(String x : t) {\n            r.add(x);\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> result = new ArrayList<String>();\n        s = s.replace(\",\", \"\");\n        String[] words = s.split(\"\\\\s\");\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return s.split(\"[,\\\\s]+\").stream().collect(Collectors.toCollection(ArrayList::new));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        // Write your code here\n        ArrayList<String> res = new ArrayList<String>();\n        String[] splits = s.split(\", | \");\n        for (String x: splits) {\n            res.add(x);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> result = new ArrayList<String>();\n        for(String str : s.split(\"[, ]+\")){\n            result.add(str);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return (ArrayList<String>) new ArrayList<String>(Arrays.asList((String[]) s.split(\"\\\\s*,\\\\s*|\\\\s+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] str = s.split(\",\");\n        ArrayList<String> arr = new ArrayList<String>();\n        for(int i = 0; i < str.length; i++) {\n            arr.add(str[i].trim());\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] arr = s.replaceAll(\",\", \"\").split(\" \");\n        ArrayList<String> al = new ArrayList<String>(Arrays.asList(arr));\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] split1 = s.split(\",\");\n        ArrayList<String> split2 = new ArrayList<String>();\n        for(String i : split1){\n            split2.addAll(Arrays.asList(i.split(\" \")));\n        }\n        return split2;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> arr = new ArrayList<String>();\n        String[] split = s.split(\"[ ,]\");\n        for (int i = 0; i < split.length; i++) {\n            arr.add(split[i]);\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.replaceAll(\"[\\\\s,]+\", \" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> out = new ArrayList<String>();\n        String[] s1 = s.split(\"[, ]\");\n        for(int i = 0; i < s1.length; i++) {\n            out.add(s1[i]);\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return s.contains(\",\") ? s.replace(\",\", \"\").split(\" \").stream().map(String::valueOf).collect(Collectors.toCollection(ArrayList::new)) : s.split(\" \").stream().map(String::valueOf).collect(Collectors.toCollection(ArrayList::new));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[,\\\\s]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"\\\\s+|,\\\\s*\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] array = s.split(\"\\\\s*,\\\\s*\");\n        String[] array2 = s.split(\"\\\\s+\");\n        ArrayList<String> arrayList = new ArrayList<String>();\n        ArrayList<String> arrayList2 = new ArrayList<String>();\n        for (int i = 0; i < array.length; i++) {\n            arrayList.add(array[i]);\n        }\n        for (int i = 0; i < array2.length; i++) {\n            arrayList2.add(array2[i]);\n        }\n        return arrayList2;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> wordList = new ArrayList<>();\n        s = s.trim();\n        for(String word : s.split(\"[, ]+\")) {\n            wordList.add(word);\n        }\n        return wordList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> res = new ArrayList<String>();\n        String[] arr = s.split(\"[, ]+\");\n        for(String str : arr) {\n            res.add(str);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] splitted = s.split(\"[ ,]+\");\n        ArrayList<String> output = new ArrayList<>();\n        for (String element : splitted) {\n            output.add(element);\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> ans = new ArrayList<>();\n        int start = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == ',' || s.charAt(i) == ' ') {\n                ans.add(s.substring(start, i));\n                start = i + 1;\n            }\n        }\n        ans.add(s.substring(start));\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.trim().split(\"[, ]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.replaceAll(\"[, ]\", \" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> list = new ArrayList<>();\n        String[] arr = s.split(\"\\\\s*[,]+\\\\s*\");\n        for(int i = 0; i < arr.length; i++){\n            list.add(arr[i]);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\", | \");\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return Stream.of(s.split(\",?\\\\s+\"))\n            .map(String::trim)\n            .collect(Collectors.toCollection(ArrayList::new));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        s = s.replaceAll(\",\", \" \");\n        String[] split = s.split(\"\\\\s+\");\n        return new ArrayList<>(Arrays.asList(split));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] split = s.replaceAll(\"[^a-zA-Z ]\", \" \").trim().split(\"\\\\s+\");\n        ArrayList<String> result = new ArrayList<String>();\n        for(String w : split) {\n            if(w.length() > 0)\n                result.add(w);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] split = s.split(\"[ ,]\");\n        ArrayList<String> result = new ArrayList<String>();\n        for(String word: split) {\n            result.add(word);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] s1 = s.split(\"[, ]\");\n        ArrayList<String> s2 = new ArrayList<String>();\n        for(int i = 0; i < s1.length; i++) {\n            s2.add(s1[i]);\n        }\n        return s2;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> result = new ArrayList<>();\n        s = s.replace(\",\", \" \");\n        String[] splitted = s.split(\" \");\n        for (String word : splitted)\n            result.add(word);\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] split = s.replaceAll(\",\", \" \").split(\"\\\\s+\");\n        ArrayList<String> arr = new ArrayList<>();\n        for (String str: split) {\n            arr.add(str);\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> l = new ArrayList<>();\n        StringTokenizer st = new StringTokenizer(s, \", \");\n        while (st.hasMoreTokens())\n            l.add(st.nextToken());\n        return l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] splitted = s.split(\", | \");\n        ArrayList<String> res = new ArrayList<String>();\n        for (String str : splitted) {\n            res.add(str);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] strArr = s.split(\"[, ]\");\n        ArrayList<String> strList = new ArrayList<String>();\n        for(String str : strArr) strList.add(str);\n        return strList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] words = s.replaceAll(\"[ ,]+\", \" \").split(\" \");\n        ArrayList<String> result = new ArrayList<>();\n        for(int i = 0; i < words.length; i++) {\n            result.add(words[i]);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.replaceAll(\"[ ,]+\", \" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> arr = new ArrayList<String>();\n        String[] words = s.split(\"\\\\s*,\\\\s*|\\\\s+\");\n        for(String word : words) arr.add(word);\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> arr = new ArrayList<String>();\n        s = s.replaceAll(\"\\\\s+\", \" \");\n        String[] str = s.split(\"[ ,]\");\n        for (String s1 : str)\n            arr.add(s1);\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] words = s.split(\"[, ]\");\n        ArrayList<String> list = new ArrayList<String>();\n        for (int i = 0; i < words.length; i++) {\n            list.add(words[i]);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        if (s.length() == 0) {\n            return new ArrayList<>();\n        }\n        char[] ch = s.toCharArray();\n        ArrayList<String> result = new ArrayList<>();\n        int start = 0;\n        for (int i = 0; i < ch.length; i++) {\n            if (ch[i] == ' ' || ch[i] == ',') {\n                result.add(s.substring(start, i));\n                start = i + 1;\n            }\n        }\n        result.add(s.substring(start));\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> list = new ArrayList<>();\n        for (String i : s.split(\",\"))\n            list.addAll(Arrays.asList(i.split(\" \")));\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] arr = s.split(\",|\\\\s\");\n        ArrayList<String> ans = new ArrayList<String>();\n        for(String str : arr) ans.add(str);\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] words = s.split(\"[, ]\");\n        return new ArrayList<String>(Arrays.asList(words));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> result = new ArrayList<>();\n        for (String str : s.split(\"\\\\s*,\\\\s*|\\\\s+\")) {\n            result.add(str);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] str = s.split(\" |,\");\n        ArrayList<String> list = new ArrayList<String>();\n        for(int i=0; i<str.length; i++){\n            list.add(str[i]);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] result = s.split(\"\\\\W\");\n        return new ArrayList<String>(Arrays.asList(result));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[\\\\s,]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.replaceAll(\",\", \"\").split(\"\\\\s\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] array = s.split(\"\\\\W+\");\n        ArrayList<String> words = new ArrayList<>();\n        for (String str : array) {\n            if (!str.isEmpty())\n                words.add(str);\n        }\n        return words;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        if(s.contains(\",\")){\n            String[] arr = s.split(\",\");\n            ArrayList<String> arrlist = new ArrayList<String>();\n            for(String str : arr){\n                arrlist.add(str);\n            }\n            return arrlist;\n        }\n        else{\n            String[] arr = s.split(\" \");\n            ArrayList<String> arrlist = new ArrayList<String>();\n            for(String str : arr){\n                arrlist.add(str);\n            }\n            return arrlist;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> word = new ArrayList<String>();\n        String[] ar = s.split(\",\");\n        for (String x: ar) {\n            word.add(x);\n        }\n        return word;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> list = new ArrayList<String>();\n        String[] temp = s.replace(\",\", \" \").trim().split(\"\\\\s+\");\n        for(int i = 0; i < temp.length; i++){\n            list.add(temp[i]);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> al = new ArrayList<String>();\n        String arr[] = s.split(\", \");\n        for(int i=0; i<arr.length; i++){\n            String s2[] = arr[i].split(\" \");\n            for(int j=0; j<s2.length; j++)\n                al.add(s2[j]);\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.replaceAll(\",\", \" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> ans = new ArrayList<String>();\n        StringTokenizer st = new StringTokenizer(s, \", \");\n        while (st.hasMoreTokens()) {\n            ans.add(st.nextToken());\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> list = new ArrayList<>();\n        String[] arr = s.split(\"\\\\W+\");\n        for(String str : arr){\n            if(str.length() > 0){\n                list.add(str);\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> al = new ArrayList<String>();\n        String[] arr = s.split(\",\");\n        for(int i = 0; i < arr.length; i++) {\n            String temp = arr[i];\n            temp = temp.replaceAll(\" \", \"\");\n            al.add(temp);\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> arrayList = new ArrayList<String>();\n        String[] list = s.replaceAll(\",\", \" \").split(\" \");\n        for (int i = 0; i < list.length; i++) {\n            arrayList.add(list[i]);\n        }\n        return arrayList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.replaceAll(\"[, ]\", \" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> res = new ArrayList<>();\n        String[] arr = s.split(\"[ ,]+\");\n        for(String i : arr) res.add(i);\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.split(\"[ ,]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"\\\\s*,\\\\s*|\\\\s+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[, ]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        s = s.replaceAll(\",\", \" \");\n        String[] arr = s.split(\"\\\\s+\");\n        ArrayList<String> list = new ArrayList<String>();\n        for (int i = 0; i < arr.length; i++) {\n            list.add(arr[i]);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> words = new ArrayList<String>();\n        for(String word : s.split(\",| \")) {\n            words.add(word);\n        }\n        return words;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] array = s.split(\",|\\\\s+\");\n        ArrayList<String> a = new ArrayList<String>();\n        for (String i: array) {\n            a.add(i);\n        }\n        return a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] array = s.split(\"[\\\\s,]+\");\n        ArrayList<String> list = new ArrayList<String>();\n        for (String i : array) {\n            list.add(i);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[,\\\\s]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        s = s.replaceAll(\",\", \" \").trim();\n        ArrayList<String> ret = new ArrayList<String>();\n        String[] arr = s.split(\" \");\n        for (String i : arr) {\n            if (i.length() > 0) ret.add(i);\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] s1 = s.split(\"[, ]\");\n        ArrayList<String> al = new ArrayList<String>();\n        for(int i = 0; i < s1.length; i++)\n            al.add(s1[i]);\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] splitString = s.split(\"\\\\W\");\n        ArrayList<String> arrayList = new ArrayList<String>();\n        for(int i = 0; i < splitString.length; i++) {\n            if(splitString[i] != \"\") {\n                arrayList.add(splitString[i]);\n            }\n        }\n        return arrayList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.replaceAll(\"\\\\s+\", \" \").split(\"\\\\s*,\\\\s*|\\\\s+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> strs = new ArrayList<String>();\n        String[] splitStr = s.split(\"\\\\s*[,\\\\s]\\\\s*\");\n        for(int i = 0; i < splitStr.length; i++){\n            strs.add(splitStr[i]);\n        }\n        return strs;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        // TOFILL\n        ArrayList<String> result = new ArrayList<String>();\n\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.split(\"[ ,]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] splittedS = s.split(\", | \");\n        ArrayList<String> sWords = new ArrayList<String>();\n        for (String sWord : splittedS) {\n            if (sWord.length() != 0) {\n                sWords.add(sWord);\n            }\n        }\n        return sWords;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.replaceAll(\"\\\\s+\", \",\").split(\",\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] splitted = s.split(\"[\\\\s,]+\");\n        return new ArrayList<String>(Arrays.asList(splitted));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> ans = new ArrayList<String>();\n        s.replaceAll(\", \", \",\");\n        String[] sarray = s.split(\",\");\n        for(String s1: sarray){\n            if(s1.length()!=0){\n            ans.add(s1);\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> wordList = new ArrayList<String>();\n        String[] words = s.split(\"[, ]\");\n        for (String word : words) {\n            wordList.add(word);\n        }\n        return wordList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> result = new ArrayList<String>();\n        String[] array = s.split(\", | \");\n        for (String str : array) {\n            result.add(str);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[, ]\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String [] parts = s.split(\"\\\\s*,\\\\s*|\\\\s+\");\n        ArrayList<String> words = new ArrayList<>();\n        for (String word: parts) {\n            words.add(word);\n        }\n        return words;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        s = s.replace(\",\", \" \");\n        String[] splited = s.split(\"\\\\s\");\n        ArrayList<String> list = new ArrayList<String>(Arrays.asList(splited));\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> arr = new ArrayList<String>();\n        char[] c = s.toCharArray();\n        String str = \"\";\n        for (int i = 0; i < c.length; i++) {\n            if (c[i] == ',') {\n                arr.add(str);\n                str = \"\";\n            } else if (c[i] == ' ') {\n                arr.add(str);\n                str = \"\";\n            } else {\n                str += c[i];\n            }\n        }\n        arr.add(str);\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> res = new ArrayList<String>();\n        s.replace(\",\",\" \");\n        res.addAll(Arrays.asList(s.split(\" \")));\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.replace(\",\",\" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[, ]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> res = new ArrayList<String>();\n        String[] array = s.split(\" \");\n        for (int i = 0; i < array.length; i++) {\n            if (array[i].length() != 0) {\n                res.add(array[i]);\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> a = new ArrayList<String>();\n        String[] s1 = s.split(\",| \");\n        for (String s2:s1) a.add(s2);\n        return a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[, ]\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.replaceAll(\",\", \" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[, ]\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.trim().split(\"[, ]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        if(s.length()==0) return new ArrayList<>();\n        String[] sp = s.split(\"[\\\\s,]+\");\n        ArrayList<String> al = new ArrayList<>(sp.length);\n        for(int i=0;i<sp.length;i++) al.add(sp[i]);\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\",? ?\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        // return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]\")));\n        return new ArrayList<>(Arrays.asList(s.split(\"\\\\s*[ ,]\\\\s*\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> result = new ArrayList<String>();\n        s = s.trim();\n        String[] splitted = s.split(\"\\\\s*,\\\\s*|\\\\s+\");\n        for (String s1 : splitted) {\n            if (s1.trim().length() > 0) {\n                result.add(s1.trim());\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> list = new ArrayList<String>();\n        String[] array = s.split(\"[ ,]\");\n        for(int i = 0; i < array.length; i++){\n            list.add(array[i]);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] split = s.split(\"[, ]+\");\n        ArrayList<String> result = new ArrayList<String>();\n        for (String s1 : split) {\n            result.add(s1);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> list = new ArrayList<>();\n        String[] words = s.split(\", | \");\n        for(int i = 0; i < words.length; i++)\n            list.add(words[i]);\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        // Put your code here\n        s=s.replace(\" \",\",\");\n        s=s.replace(\",,\",\",\");\n        String[] arr=s.split(\",\");\n        ArrayList<String> al=new ArrayList<String>();\n        for(int i=0;i<arr.length;i++){\n            al.add(arr[i]);\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> ans = new ArrayList<>();\n        String[] a = s.replaceAll(\"[^a-zA-Z0-9' ']+\", \" \").trim().split(\"\\\\s+\");\n        for(String b:a) ans.add(b);\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.replaceAll(\",\", \" \").trim().split(\"\\\\s+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] splitArray = s.split(\",|\\\\s\");\n        ArrayList<String> answer = new ArrayList<String>();\n        for (String word : splitArray) {\n            answer.add(word);\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> words = new ArrayList<String>();\n        String[] splited = s.split(\"[ ,]\");\n        for(int i = 0; i < splited.length; i++) {\n            words.add(splited[i]);\n        }\n        return words;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[, ]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] split = s.split(\"[ ,]\");\n        ArrayList<String> al = new ArrayList<String>();\n        for (int i = 0; i < split.length; i++) {\n            al.add(split[i]);\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return Stream.of(s.split(\"[,\\\\s]\")).map(String::trim).filter(s2 -> s2.length() != 0).collect(Collectors.toCollection(ArrayList::new));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.replaceAll(\",\", \" \").trim().split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> al = new ArrayList<String>();\n        String[] sarr = s.split(\"\\\\s|,\");\n        for (int i = 0; i < sarr.length; i++) {\n            al.add(sarr[i]);\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> l = new ArrayList<String>();\n        String[] s1 = s.split(\"\\\\s*,\\\\s*\");\n        for(String x : s1) {\n            String[] s2 = x.split(\"\\\\s+\");\n            for(String y : s2) {\n                if(y.length() > 0) l.add(y);\n            }\n        }\n        return l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> output = new ArrayList<>();\n        if (s.contains(\",\")) {\n            s = s.replaceAll(\",\", \" \");\n        }\n        s = s.trim();\n        if (s.contains(\" \")) {\n            String[] words = s.split(\" \");\n            for (String w : words) {\n                output.add(w);\n            }\n        } else {\n            output.add(s);\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.replace(\",\", \" \").split(\"\\\\s+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.split(\"\\\\s*,\\\\s*|\\\\s+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> r = new ArrayList<String>();\n        for (String w : s.split(\",| \")) {\n            if (w.isEmpty()) {\n                continue;\n            }\n            r.add(w);\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> words = new ArrayList<String>();\n        String[] temp;\n        if (s.contains(\",\")) {\n            temp = s.split(\",\");\n        }\n        else {\n            temp = s.split(\" \");\n        }\n        for (int i = 0; i < temp.length; i++) {\n            words.add(temp[i]);\n        }\n        return words;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> ans = new ArrayList<String>();\n        String[] sarr = s.split(\"[\\\\s,]+\");\n        for (int i = 0; i < sarr.length; i++) {\n            ans.add(sarr[i]);\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] a = s.split(\", | \");\n        ArrayList<String> al = new ArrayList<String>();\n        for(int i=0;i<a.length;i++) {\n            al.add(a[i]);\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> words = new ArrayList<String>();\n        String[] arr = s.split(\", | \");\n        for(int i = 0; i < arr.length; i++) {\n            words.add(arr[i]);\n        }\n        return words;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String [] tokens = s.trim().split(\"\\\\s*,\\\\s*|\\\\s+\");\n        ArrayList<String> list = new ArrayList<String>();\n        for(String t : tokens) {\n            list.add(t);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"\\\\W+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> stringList = new ArrayList<>();\n        for (String word : s.split(\"[, ]+\")) {\n            stringList.add(word);\n        }\n        return stringList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> ans = new ArrayList<String>();\n        String[] str = s.split(\", | \");\n        for (int i = 0; i < str.length; i++) {\n            if (str[i].equals(\"\")) {\n                continue;\n            }\n            ans.add(str[i]);\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return s.split(\"\\\\W+\")\n                    .stream()\n                    .map(String::trim)\n                    .filter(w -> w.length() > 0)\n                    .collect(Collectors.toCollection(ArrayList::new));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> list = new ArrayList<String>();\n        String[] arr = s.split(\"[, ]\");\n        for (int i = 0; i < arr.length; i++) {\n            list.add(arr[i]);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.replaceAll(\"[, ]+\", \" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] split = s.split(\"[ ,]\");\n        ArrayList<String> words = new ArrayList<String>();\n        for (String w : split)\n            words.add(w);\n        return words;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> list = new ArrayList<>();\n        for(String str : s.split(\"[, ]+\")) {\n            list.add(str);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.split(\"[, ]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return Stream.of(s.split(\",| \")).map(String::trim).collect(Collectors.toCollection(ArrayList::new));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> words = new ArrayList<>();\n        Scanner sc = new Scanner(s);\n        while (sc.hasNext()) {\n            String word = sc.next();\n            words.add(word);\n        }\n        return words;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.replaceAll(\"\\\\s+\", \" \").split(\"\\\\s*[, ]+\\\\s*\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> result = new ArrayList<String>();\n        String[] temp = s.split(\"[ ,]\");\n        for (String t : temp) {\n            result.add(t);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return Stream.of(s.split(\"[, ]\")).map(String::trim).filter(s2 -> s2.length() > 0).collect(Collectors.toCollection(ArrayList::new));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] sSplit = s.split(\"\\\\s*,\\\\s*|\\\\s+\");\n        ArrayList<String> list = new ArrayList<String>();\n        for (String str : sSplit) {\n            list.add(str);\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.replaceAll(\",\", \" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] arr = s.split(\"[ ,]+\");\n        ArrayList<String> list = new ArrayList<String>(Arrays.asList(arr));\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> a = new ArrayList<>();\n        String[] sp = s.split(\", |\\\\s\");\n        for(String i: sp){\n            a.add(i);\n        }\n        return a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return Stream.of(s.split(\", | \")).map(String::trim).filter(x -> !x.isEmpty()).collect(Collectors.toCollection(ArrayList::new));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[, ]\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> list = new ArrayList<String>();\n        if(s.indexOf(\",\") != -1){\n            String[] splits = s.split(\",\");\n            for(int i = 0; i < splits.length; i++){\n                list.add(splits[i].trim());\n            }\n        } else {\n            String[] splits = s.split(\" \");\n            for(int i = 0; i < splits.length; i++){\n                list.add(splits[i].trim());\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> list = new ArrayList<>();\n        int i = 0;\n        while (i < s.length()){\n            int j = i;\n            if (s.charAt(i) == ',' || s.charAt(i) == ' '){\n                i++;\n                continue;\n            }\n            while (i < s.length() && s.charAt(i) != ',' && s.charAt(i) != ' ')\n                i++;\n            list.add(s.substring(j, i));\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] arr = s.split(\", |\\\\s\");\n        ArrayList<String> list = new ArrayList<String>(Arrays.asList(arr));\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[,\\\\s]+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] sa = s.split(\", | \");\n        ArrayList<String> al = new ArrayList<String>();\n        for (int i = 0; i < sa.length; i++) {\n            al.add(sa[i]);\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        // complete this line with a return statement\n        return new ArrayList<String>(Arrays.asList(s.replaceAll(\"[\\\\s+]\", \" \").split(\"\\\\s+\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> res = new ArrayList<>();\n        for(String x : s.split(\",\")) {\n            for(String w : x.split(\" \")) {\n                if(!w.equals(\"\")) res.add(w);\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<>(Arrays.asList(s.replaceAll(\",\", \" \").split(\" \")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] arr = s.split(\"[\\\\s,]+\");\n        ArrayList<String> result = new ArrayList<String>();\n        for (String el : arr)\n            result.add(el);\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        String[] spl = s.split(\", | \");\n        ArrayList<String> result = new ArrayList<String>();\n        for (String i : spl) {\n            result.add(i);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String ss : s.split(\"[, ]\")) {\n            result.add(ss);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        if(s.length()==0) return new ArrayList<String>();\n        ArrayList<String> res = new ArrayList<String>();\n        String cur = \"\";\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i)==' ') {\n                if(cur.length()>0) {\n                    res.add(cur);\n                }\n                cur = \"\";\n            }\n            else if(s.charAt(i)==',' || s.charAt(i)==';') {\n                res.add(cur);\n                cur = \"\";\n            }\n            else {\n                cur += s.charAt(i);\n            }\n        }\n        if(cur.length()>0) {\n            res.add(cur);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        return new ArrayList<String>(Arrays.asList(s.split(\"[, ]\")));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String word : s.split(\"[ ,]+\")) {\n            result.add(word);\n        }\n        return result;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int n = string.length();\n        int m = substring.length();\n        long count = 0;\n        for (int i = 0; i <= n - m; i++) {\n            int j = 0;\n            while (j < m && string.charAt(i + j) == substring.charAt(j)) {\n                j++;\n            }\n            if (j == m) {\n                count++;\n                if (i + m == n) {\n                    break;\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long) string.split(substring, -1).length - 1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long) Arrays.stream(string.split(substring)).count() - 1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long result = 0l;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                result++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int substringLength = substring.length();\n        long times = 0;\n        for (int i = 0; i < string.length() - substringLength + 1; i++) {\n            if (string.substring(i, i + substringLength).equals(substring)) {\n                times++;\n            }\n        }\n        return times;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        int substringLength = substring.length();\n        for (int i = 0; i < string.length() - substringLength; i++) {\n            if (string.substring(i, i + substringLength).equals(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long total = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            String part = string.substring(i, i + substring.length());\n            if (part.equals(substring)) {\n                total++;\n            }\n        }\n        return total;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long) string.split(substring).length - 1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long counter = 0;\n        int size = substring.length();\n        int i;\n        for(i = 0; i <= string.length() - size; i++) {\n            if(string.substring(i, i + size).equals(substring))\n                counter++;\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        while (i < string.length()) {\n            i = string.indexOf(substring, i);\n            if (i == -1) {\n                break;\n            }\n            count++;\n            i += substring.length();\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for(int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if(string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if(string.length() < substring.length()) return 0;\n        long counter = 0;\n        for(int i = 0; i <= string.length() - substring.length(); i++) {\n            if(substring.equals(string.substring(i, i + substring.length()))) counter++;\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.length() < substring.length()) {\n            return 0;\n        } else if (string.length() == substring.length()) {\n            if (string.equals(substring)) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n        return string.length() - substring.length() + 1 - (string.replace(substring, \"\").length() / substring.length());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long result = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                result++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int len = string.length();\n        int lenSub = substring.length();\n        long count = 0;\n        if(lenSub <= len) {\n            int i = 0;\n            while(i + lenSub <= len) {\n                if(string.substring(i, i + lenSub).equals(substring)) {\n                    count++;\n                }\n                i++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return Long.valueOf(string.length() - string.replace(substring, \"\").length()) / substring.length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int substringLength = substring.length();\n        long counter = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                counter++;\n                index++;\n            }\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int index = 0;\n        long count = 0;\n        while (index < string.length()) {\n            int subIndex = 0;\n            index = string.indexOf(substring.charAt(0), index);\n            if (index != -1) {\n                while (subIndex < substring.length() && (index + subIndex) < string.length()) {\n                    if (string.charAt(index + subIndex) != substring.charAt(subIndex)) {\n                        break;\n                    }\n                    subIndex++;\n                }\n                if (subIndex == substring.length()) {\n                    count++;\n                    index++;\n                } else {\n                    index++;\n                }\n            } else {\n                break;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long)string.length() - string.replace(substring, \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long howManyTimes = 0l;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                howManyTimes++;\n            }\n        }\n        return howManyTimes;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if(string.length() < substring.length()) {\n            return 0L;\n        }\n        long count = 0L;\n        for(int i = 0; i <= string.length() - substring.length(); ++i) {\n            if(string.substring(i, i + substring.length()).equals(substring)) {\n                ++count;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.length() < substring.length()) {\n            return 0l;\n        }\n        int matchCount = 0;\n        int substrIndex = 0;\n        int strIndex = 0;\n        while (strIndex < string.length() - substring.length() + 1) {\n            substrIndex = 0;\n            while (substrIndex < substring.length()) {\n                if (string.charAt(strIndex + substrIndex) != substring.charAt(substrIndex)) {\n                    break;\n                }\n                substrIndex++;\n            }\n            if (substrIndex == substring.length()) {\n                matchCount++;\n                strIndex++;\n            } else {\n                strIndex++;\n            }\n        }\n        return matchCount;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for(int i = 0; i < string.length(); i++) {\n            for(int j = 0; j < substring.length(); j++) {\n                if(string.charAt(i) != substring.charAt(j)) {\n                    break;\n                }\n                if(j == substring.length() - 1) {\n                    count++;\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int stringSize = string.length();\n        int substringSize = substring.length();\n        if(stringSize < substringSize)\n            return 0;\n        return string.length() - substring.length() + 1L - Collections.frequency(Arrays.stream(string.substring(0, substring.length() - 1) + string.substring(substring.length())).map(Object::toString).collect(Collectors.toList()), substring);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long result = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                result++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long) string.length() - string.replace(substring, \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        if (string.length() < substring.length()) {\n            return count;\n        }\n        if (string.equals(substring)) {\n            return 1;\n        }\n        char[] str = string.toCharArray();\n        char[] sub = substring.toCharArray();\n        for (int i = 0; i < str.length - sub.length + 1; i++) {\n            if (Arrays.equals(Arrays.copyOfRange(str, i, i + sub.length), sub)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int substringLength = substring.length();\n        long count = 0;\n        for (int i = 0; i <= string.length() - substringLength; i++) {\n            if (string.substring(i, i + substringLength).equals(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long result = 0;\n        if (string.isEmpty() || substring.isEmpty()) {\n            return result;\n        }\n        long index = string.indexOf(substring);\n        while (index >= 0) {\n            result++;\n            index = string.indexOf(substring, index + substring.length());\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int substringLength = substring.length();\n        int times = 0;\n        for (int i = 0; i < string.length() - substringLength; i++) {\n            if (string.substring(i, i + substringLength).equals(substring)) {\n                times++;\n            }\n        }\n        return times;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        int index = string.indexOf(substring);\n        while (index >= 0) {\n            count++;\n            index = string.indexOf(substring, index + 1);\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string == \"\" || substring == \"\") { return 0; }\n        int howMany = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) { howMany++; }\n        }\n        return howMany;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long)string.length() - string.replace(substring, \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return string.replaceAll(\"(?=(\" + substring + \"))\", \"\").length() == 0l ? (long) string.length() / (long) substring.length() : (long) string.length() / (long) substring.length() + 1l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.length() == 0) return 0;\n        long times = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times++;\n            }\n        }\n        return times;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return string.length() == 0 ? 0 : (string.substring(0, string.length() - substring.length() + 1).contains(substring) ? 1 : 0) + howManyTimes(string.substring(1), substring);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int stringLength = string.length();\n        int substringLength = substring.length();\n        if (stringLength < substringLength) return 0l;\n        long count = 0l;\n        for (int i = 0; i <= stringLength - substringLength; i++) {\n            int j = 0;\n            while (j < substringLength) {\n                if (string.charAt(i + j) != substring.charAt(j)) break;\n                else j++;\n            }\n            if (j == substringLength) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long counter = 0;\n        for(int i = 0; i <= string.length() - substring.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring)) {\n                counter++;\n            }\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i < string.length(); ++i) {\n            if (string.substring(i, i + substring.length()) == substring) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0L;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\n                count++;\n        }\n        return (long) count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if(substring.isEmpty()) {\n            return 0l;\n        }\n        if(string.isEmpty()) {\n            return 0l;\n        }\n        long count = 0;\n        for(int i = 0; i <= string.length() - substring.length(); i++) {\n            String subString = string.substring(i, i + substring.length());\n            if(subString.equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        int substringLength = substring.length();\n        int stringLength = string.length();\n        for (int i = 0; i <= stringLength - substringLength; i++) {\n            if (string.substring(i, i + substringLength).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (substring.isEmpty()) return 0L;\n        return (long)string.length() - substring.length() + 1 - string.replace(substring, \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.length() < substring.length()) {\n            return 0l;\n        }\n        int substringLength = substring.length();\n        long count = 0l;\n        int index = 0;\n        while (index < string.length()) {\n            int substringIndex = 0;\n            while (string.charAt(index) == substring.charAt(substringIndex)) {\n                if (++substringIndex == substringLength) {\n                    count++;\n                    break;\n                }\n                index++;\n            }\n            index++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (substring.length() > string.length()) {\n            return 0;\n        }\n        // If the substring is longer than the string, there can be no overlaping case\n        // The logic works fine even if the substring is longer than the string,\n        // but there can be no overlaping case anyway.\n        long count = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            boolean isValid = true;\n            for (int j = 0; j < substring.length(); j++) {\n                if (substring.charAt(j) != string.charAt(i + j)) {\n                    isValid = false;\n                    break;\n                }\n            }\n            if (isValid) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long i = 0;\n        String str = string;\n        while (str.contains(substring)) {\n            str = str.substring(str.indexOf(substring) + 1);\n            i++;\n        }\n        return i;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long) string.length() - string.replace(substring, \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            int j = 0;\n            while (i + j < string.length() && string.charAt(i + j) == substring.charAt(j)) {\n                j++;\n            }\n            if (j == substring.length()) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int substringLength = substring.length();\n        if (string.length() < substringLength) return 0;\n        if (string.length() == substringLength) {\n            if (string.equals(substring)) return 1;\n            return 0;\n        }\n        return Long.valueOf(string.length() - substringLength + 1).longValue()\n                .intValue()\n                .stream()\n                .filter(index -> string.substring(index, index + substringLength).equals(substring))\n                .count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.isEmpty() || substring.isEmpty()) return 0;\n        int substringSize = substring.length();\n        long count = 0;\n        for (int i = 0; i <= string.length() - substringSize; i++) {\n            if (string.substring(i, i + substringSize).equals(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (substring.length() > string.length())\n            return 0;\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (substring.equals(string.substring(i, i + substring.length())))\n                count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string == null || substring == null) {\n            return 0;\n        }\n        long count = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            int j = 0;\n            while (j < substring.length()) {\n                if (string.charAt(i + j) != substring.charAt(j)) {\n                    break;\n                }\n                j++;\n            }\n            if (j == substring.length()) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (substring.length() == 0) {\n            return 0l;\n        }\n        long num = string.length() / substring.length();\n        if (string.length() % substring.length() == 0) {\n            return num;\n        }\n        return num + 1l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (substring.length() == 0) {\n            return string.length() + 1;\n        }\n        return string.length() - string.replaceAll(substring, \"\").length() + 1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int len = string.length();\n        int subLen = substring.length();\n        long count = 0;\n        for(int i = 0; i < len; i++) {\n            if(string.substring(i, i + subLen).equals(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if(string.length() == 0 || substring.length() == 0) {\n            return 0L;\n        }\n        else if(substring.length() > string.length()) {\n            return 0L;\n        }\n        else {\n            long result = 0L;\n            for(int i = 0; i <= string.length() - substring.length(); i++) {\n                if(string.substring(i, i + substring.length()).equals(substring)) {\n                    result++;\n                }\n            }\n            return result;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long answer = 0;\n        int substringLength = substring.length();\n        int stringLength = string.length();\n        if(stringLength == substringLength) return 1;\n        for(int i = 0; i < stringLength; i++) {\n            if(string.substring(i, i + substringLength).equals(substring)) {\n                answer += 1;\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (substring.length() > string.length()) {\n            return 0L;\n        } else {\n            return (long) string.length() - substring.length() + 1 - string.replace(substring, \"\").length();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.length() < substring.length())\n            return 0;\n        int lengthDifference = string.length() - substring.length();\n        int count = 0;\n        for (int i = 0; i <= lengthDifference; i++) {\n            if (string.substring(i, substring.length() + i).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return string.length() - string.replace(substring, \"\").length() + 1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int substringLength = substring.length();\n        int lastIndex = string.length() - substringLength;\n        long count = 0;\n        for (int i = 0; i <= lastIndex; ++i) {\n            if (string.substring(i, i + substringLength).equals(substring))\n                ++count;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        int len = substring.length();\n        int i = string.indexOf(substring);\n        while (i != -1) {\n            count++;\n            i = string.indexOf(substring, i + 1);\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return substring.length() == 0 ? 0L : (string.length() - string.replace(substring, \"\").length()) / substring.length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        int length = string.length();\n        for (int i = 0; i <= length - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.length() < substring.length())\n            return 0;\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return string.length() - string.replace(substring, \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int n = string.length(), m = substring.length();\n        long result = 0;\n        if (n >= m) {\n            int i = 0;\n            while (i <= n - m) {\n                if (string.substring(i, i + m).equals(substring)) {\n                    result++;\n                }\n                i++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.equals(\"\") || substring.equals(\"\")) return 0;\n        if (string.equals(substring)) return 1;\n        int times = 0;\n        int index = -1;\n        while (true) {\n            index = string.indexOf(substring, index + 1);\n            if (index == -1) break;\n            times++;\n        }\n        return times;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0L;\n        int index = 0;\n        while(index != -1) {\n            index = string.indexOf(substring, index);\n            if(index != -1) {\n                index += substring.length();\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long n = string.length();\n        long m = substring.length();\n        if (n == 0 || m == 0 || n < m) {\n            return 0;\n        }\n        return string.length() - string.replace(substring, \"\").length() + 1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (substring.length() > string.length()) {\n            return 0;\n        }\n        int substrIndex = -1;\n        int count = 0;\n        while ((substrIndex = string.indexOf(substring, substrIndex + 1)) >= 0) {\n            ++count;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int index = 0;\n        long counter = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1)\n                break;\n            index++;\n            counter++;\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for(int i = 0; i < string.length(); i++) {\n            if(string.substring(i, i+substring.length()).equals(substring)) {\n                count++;\n                i += substring.length() - 1;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return string.length() / substring.length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return string.length() == 0 ? 0 : substring.length() == 0 ? 0 : (string.length() - substring.length() + 1) * string.length() / substring.length() - howManyTimes(string.substring(0, string.length() - 1), substring) + howManyTimes(string.substring(0, string.length() - 1), substring.substring(1));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        int stringIndex = 0;\n        int substringIndex = 0;\n        while(stringIndex < string.length()) {\n            if(string.charAt(stringIndex) == substring.charAt(substringIndex)) {\n                if(substringIndex == substring.length()-1) {\n                    count++;\n                    stringIndex = substringIndex = 0;\n                    continue;\n                }\n                substringIndex++;\n            } else {\n                stringIndex = substringIndex = 0;\n            }\n            stringIndex++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long counter = 0;\n        int i = 0;\n        while (i < string.length()) {\n            int found = string.indexOf(substring, i);\n            if (found == -1) break;\n            else {\n                counter++;\n                i = found + substring.length();\n            }\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (substring.length() == 0) {\n            return 0;\n        }\n        long res = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            String tmp = string.substring(i, i + substring.length());\n            if (tmp.equals(substring)) {\n                res++;\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long counter = 0;\n        int start = 0;\n        while(start < string.length()) {\n            if(string.substring(start).startsWith(substring)) {\n                counter += 1;\n                start += substring.length();\n            } else {\n                start += 1;\n            }\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return string.length() - string.replace(substring, \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        int stringSize = string.length();\n        int substringSize = substring.length();\n        for (int i = 0; i < stringSize; i++) {\n            if (string.substring(i, i + substringSize).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int subLen = substring.length();\n        long result = 0;\n        int startPos = 0;\n        while (startPos < string.length()) {\n            int index = string.indexOf(substring, startPos);\n            if (index == -1) break;\n            startPos = index + 1;\n            result++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0l;\n        for(int i = 0; i <= string.length() - substring.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int idx = -1;\n        long count = 0;\n        while (true) {\n            idx = string.indexOf(substring, idx + 1);\n            if (idx < 0)\n                break;\n            ++count;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string == null || string.length() == 0) {\n            return 0;\n        }\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            int j = i;\n            while (string.length() - j >= substring.length() && j >= 0 && string.substring(j, j + substring.length()).equals(substring)) {\n                count++;\n                j--;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long i, count = 0;\n        for (i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long times = 0;\n        if (substring.length() == 0)\n            return string.length();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring))\n                times++;\n        }\n        return times;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for(int i = 0; i < string.length() - substring.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.length() < substring.length())\n            return 0l;\n        long count = 0l;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\n                count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        int index = 0;\n        while (true) {\n            index = string.indexOf(substring, index);\n            if (index == -1) break;\n            count++;\n            index += substring.length();\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int len = substring.length();\n        if (len == 0) {\n            return string.length() + 1;\n        }\n        int count = 0;\n        for (int i = 0; i <= string.length() - len; i++) {\n            if (string.substring(i, i + len).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long answer = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                answer++;\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long counter = 0L;\n        int i = 0;\n        while (i < string.length() - substring.length() + 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                counter++;\n                i += substring.length() - 1;\n            }\n            i++;\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int n = string.length();\n        int m = substring.length();\n        if (n < m) return 0;\n        int i = 0;\n        int count = 0;\n        while (i + m <= n) {\n            if (string.substring(i, i + m).equals(substring)) count++;\n            i++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.length() < substring.length()) {\n            return 0;\n        }\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int length = string.length() - substring.length() + 1;\n        long count = 0;\n        for (int i = 0; i < length; i++) {\n            int j = 0;\n            while (j < substring.length() && string.charAt(i + j) == substring.charAt(j)) {\n                j++;\n            }\n            if (j == substring.length()) {\n                count++;\n                i++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int occurences = 0;\n        int index = string.indexOf(substring);\n        while (index != -1) {\n            occurences++;\n            index = string.indexOf(substring, index + 1);\n        }\n        return occurences;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long result = 0;\n        for(int i = 0; i < string.length(); i++) {\n            if(string.substring(i).startsWith(substring)) {\n                result++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.length() == 0 || substring.length() == 0) {\n            return 0;\n        }\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int substringLength = substring.length();\n        long result = 0;\n        for (int i = 0; i <= string.length() - substringLength; i++) {\n            String currentSubstring = string.substring(i, i + substringLength);\n            if (currentSubstring.equals(substring)) {\n                result++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        // Your code here\n        int counter = 0;\n        for(int i = 0; i < string.length() - substring.length() + 1; i++){\n            if(string.substring(i, i + substring.length()).equals(substring)) counter++;\n        }\n        return (long)counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return string.length() - string.replace(substring, \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return string.length() == substring.length() ? 1 :\n        string.length() < substring.length() ? 0 :\n        string.substring(0, substring.length()).equals(substring) ? 1 + howManyTimes(string.substring(1), substring) :\n        howManyTimes(string.substring(1), substring);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\n                count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if(substring.length() > string.length())\n            return 0l;\n        if(substring.length() == string.length()) {\n            if(substring.equals(string))\n                return 1l;\n            else\n                return 0l;\n        }\n        long count = 0l;\n        for(int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\n                count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.equals(substring))\n            return 1;\n        else if (string.length() < substring.length())\n            return 0;\n        else {\n            long count = 0;\n            for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n                if (string.substring(i, i + substring.length()).equals(substring))\n                    count++;\n            }\n            return count;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return string.length() - substring.length() + 1 - substring.chars().distinct().count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long) substring.length() == 0 ? 0l : (string.length() == 0 ? 0l : (long) (string.length() - string.replaceAll(substring, \"\").length()) / (long) substring.length());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        // do something\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string == null || substring == null) return 0L;\n        int lenSub = substring.length();\n        if (lenSub == 0) return (long) string.length();\n        int lenStr = string.length();\n        if (lenStr < lenSub) return 0L;\n        int lenDif = lenStr - lenSub + 1;\n        if (lenDif == 1) return (string.equals(substring)) ? 1L : 0L;\n        long count = 0L;\n        for (int i = 0; i < lenDif; i++) {\n            String sub = string.substring(i, i + lenSub);\n            if (sub.equals(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long ans = 0L;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                ans++;\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        // longest common substring\n        // longest common subsequence\n        // longest common superstring\n        // longest common subsequence?\n        // longest common subtree\n        // longest common subarray\n        // longest common subgraph\n        // longest common subsequence\n        // longest common subsequence in biological sequences\n        // longest common subsequence in protein sequences\n        // longest common subsequence in genomic sequences\n        // longest common subgraph\n        // longest common submultigraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common subhypergraph\n        // longest common sub", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long) string.length() - string.replace(substring, \"\").length() + 1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for(int i = 0; i < string.length() - substring.length() + 1; ++i) {\n            boolean found = true;\n            for(int j = 0; j < substring.length(); ++j) {\n                if(string.charAt(i + j) != substring.charAt(j)) {\n                    found = false;\n                    break;\n                }\n            }\n            if(found)\n                ++count;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for(int i = 0; i < string.length(); i++){\n            String cut = string.substring(i);\n            if(cut.startsWith(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long total = 0;\n        for(int i = 0; i <= string.length() - substring.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring)) {\n                total++;\n            }\n        }\n        return total;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (substring.length() == 0)\n            return 0;\n        return string.length() - string.replaceAll(substring, \"\").length() + 1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int counter = 0;\n        int i = 0;\n        while (i < string.length()) {\n            if (string.substring(i, i + substring.length()).equals(substring))\n                counter++;\n            i++;\n        }\n        return (long) counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return substring.length() <= string.length() ? (long)string.length() - string.replace(substring, \"\").length() : 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int counter = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                counter++;\n            }\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return Stream.iterate(string.indexOf(substring), i -> string.indexOf(substring, i + 1)).takeWhile(i -> i >= 0).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int substringLength = substring.length();\n        long counter = 0;\n        for (int i = 0; i <= string.length() - substringLength; i++) {\n            if (string.substring(i, i + substringLength).equals(substring)) {\n                counter++;\n            }\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long counter = 0;\n        int len = string.length() - substring.length() + 1;\n        for (int i = 0; i < len; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                counter++;\n            }\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0L;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring)) {\n                count += 1L;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (substring.length() == 0) return string.length();\n        long count = 0;\n        int i = 0;\n        while (i < string.length() - substring.length() + 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n            i++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int len = substring.length();\n        int numSubstrings = (string.length() - len + 1);\n        long count = 0;\n        for (int i = 0; i < numSubstrings; i++) {\n            if (string.substring(i, i + len).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int len = substring.length();\n        long counter = 0;\n        for (int i = 0; i < string.length() - len + 1; i++) {\n            if (string.substring(i, i + len).equals(substring)) {\n                counter++;\n            }\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long result = 0;\n        int i = 0;\n        while (i < string.length()) {\n            if (string.substring(i).startsWith(substring)) {\n                result++;\n            }\n            i++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int k = 0, count = 0, m = substring.length();\n        for (int i = 0; i < string.length(); i++) {\n            k = i;\n            for (int j = 0; j < m; j++) {\n                if (string.charAt(k) != substring.charAt(j)) {\n                    break;\n                }\n                k++;\n                if (k - i == m) {\n                    count++;\n                }\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for(int i = 0; i < string.length() - substring.length() + 1; i++){\n            if(substring.equals(string.substring(i, i + substring.length()))){\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int count = 0, length = string.length();\n        int sublength = substring.length();\n        for (int i = 0; i <= length - sublength; i++) {\n            if (string.substring(i, i + sublength).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.isEmpty()) {\n            return 0l;\n        }\n        if (substring.isEmpty()) {\n            return 0l;\n        }\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            if (string.substring(index).startsWith(substring)) {\n                count++;\n                index += substring.length();\n            } else {\n                index++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        long stringLength = string.length();\n        long substringLength = substring.length();\n        for (long i = 0; i <= stringLength - substringLength; i++) {\n            if (string.substring(i, (i + substringLength)).equals(substring)) {\n                count += 1;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for(int i = 0; i <= string.length() - substring.length(); i++) {\n            String sub = string.substring(i, i + substring.length());\n            if(sub.equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (string.length() - string.replace(substring, \"\").length()) / substring.length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long result = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                result++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        int i = string.indexOf(substring);\n        while (i != -1) {\n            count += 1;\n            i = string.indexOf(substring, i + 1);\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return string.length() - string.replaceAll(substring, \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0L;\n        for(int i = 0; i <= string.length() - substring.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int i, count = 0;\n        for (i = 0; i < string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\n                count++;\n        }\n        if (string.length() >= substring.length() && string.substring(i, i + substring.length()).equals(substring))\n            count++;\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            int j = 0;\n            boolean flag = true;\n            while (flag && j < substring.length()) {\n                if (string.charAt(i + j) != substring.charAt(j)) {\n                    flag = false;\n                }\n                j++;\n            }\n            if (flag) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long times = 0;\n        if (string.length() < substring.length())\n            return 0;\n        for (int i = 0; i < string.length() - substring.length(); i++) {\n            String temp = string.substring(i, i + substring.length());\n            if (temp.equals(substring))\n                times++;\n        }\n        return times;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int len = string.length();\n        int subLen = substring.length();\n        if (subLen > len) return 0;\n        long count = 0;\n        for (int i = 0; i < len - subLen + 1; i++) {\n            if (string.substring(i, i + subLen).equals(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            int j = 0;\n            while (j < substring.length() && i + j < string.length() && string.charAt(i + j) == substring.charAt(j)) {\n                j++;\n            }\n            if (j == substring.length()) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0l;\n        int i = 0;\n        while (string.indexOf(substring, i) != -1) {\n            i = string.indexOf(substring, i) + 1;\n            count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long result = 0l;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                result++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long times = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) times++;\n        }\n        return times;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.equals(\"\")) return 0l;\n        return (long) string.split(substring, -1).length - 1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long result = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring)) {\n                result++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return string.length() == 0 || substring.length() == 0 ? 0 : string.length() - substring.length() + 1l < 0 ? 0 : substring.length() == 1 ? string.chars().filter(ch -> ch == substring.codePointAt(0)).count() : string.codePoints().filter(ch -> string.substring(ch - substring.codePointAt(0), ch).equals(substring)).count();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int len = string.length();\n        int subLen = substring.length();\n        long count = 0;\n        for(int i = 0; i <= len - subLen; i++) {\n            String sub = string.substring(i, i + subLen);\n            if (sub.equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return Long.valueOf(string.replaceAll(\"(?!(?:\"+substring+\"))\", \"\").length()/substring.length());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int window = substring.length();\n        long count = 0;\n        for (int i = 0; i < string.length() - window + 1; i++) {\n            if (string.substring(i, i + window).equals(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int count = 0;\n        for(int i = 0; i <= string.length() - substring.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring)) count++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (string.length() - string.replace(substring, \"\").length()) / substring.length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long) string.length() - string.replace(substring, \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int i = 0;\n        int count = 0;\n        while (string.substring(i).startsWith(substring)) {\n            count++;\n            i += substring.length();\n        }\n        return (long)count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long) string.length() - string.replace(substring, \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for(int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if(string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            int j = 0;\n            for (; j < substring.length(); j++) {\n                if (string.charAt(i + j) != substring.charAt(j)) {\n                    break;\n                }\n            }\n            if (j == substring.length()) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for(int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if(string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long) string.length() - string.replace(substring, \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long) string.length() - string.replace(substring, \"\").length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int total = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                total += 1;\n            }\n        }\n        return total;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return ((string.length() - string.replace(substring, \"\").length()) / substring.length());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return string.length() == 0 || substring.length() == 0 ? 0 : string.length() - string.replace(substring, \"\").length() + 1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long result = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            String checkString = string.substring(i, i + substring.length());\n            if (checkString.equals(substring)) {\n                result++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int substringLen = substring.length();\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i, Math.min(i + substringLen, string.length())).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            int j = 0;\n            while (i + j < string.length() && j < substring.length() && string.charAt(i + j) == substring.charAt(j)) {\n                j++;\n            }\n            if (j == substring.length()) {\n                count++;\n                i += j - 1;\n            }\n            i++;\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long result = 0;\n        int index = string.indexOf(substring);\n        while (index != -1) {\n            result++;\n            index = string.indexOf(substring, index + 1);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (long) (string.length() - string.replace(substring, \"\").length() / substring.length());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long result = 0l;\n        for(int i = 0; i <= string.length() - substring.length(); i++){\n            if(string.substring(i, i + substring.length()).equals(substring)) result++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (string.length() - string.replace(substring, \"\").length()) / substring.length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.length() < substring.length()) return 0L;\n        return (long) string.length() - substring.length() + 1L - Stream.of(Arrays.copyOfRange(string.split(substring), 1, Integer.MAX_VALUE)).count(x -> x.length() == 0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.length() == 0 || substring.length() == 0) {\n            return 0l;\n        }\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            String sub = string.substring(i, i + substring.length());\n            if (sub.equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n        long count = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return ((string.length() - string.replace(substring, \"\").length()) / substring.length());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int count = 0;\n        int pointer = 0;\n        while(pointer < string.length()) {\n            if(string.substring(pointer).startsWith(substring)) {\n                count++;\n                pointer += substring.length();\n            } else {\n                pointer++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        return (string.length() - string.replace(substring, \"\").length()) / substring.length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long counter = 0;\n        for(int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if(string.substring(i, i + substring.length()).equals(substring)) {\n                counter++;\n            }\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        if (string.length() <= 0 || substring.length() <= 0) {\n            return 0l;\n        }\n        return (long) (string.length() - string.replace(substring, \"\").length()) / substring.length();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        long counter = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                counter++;\n            }\n        }\n        return counter;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int substringLength = substring.length();\n        long numberOfSubstrings = string.length() / substringLength;\n        return numberOfSubstrings + (string.length() % substringLength == 0 ? 0l : 1l);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n        int substringLength = substring.length();\n        long substringCount = 0;\n        for(int i = 0; i <= string.length() - substringLength; i++) {\n            if(string.substring(i, i + substringLength).equals(substring)) {\n                substringCount++;\n            }\n        }\n        return substringCount;"]]