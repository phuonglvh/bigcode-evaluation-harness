["code translation\nPython:\ndef strlen(string: str) -> int:\n    return len(string)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long strlen(String string) {", "code translation\nPython:\ndef encrypt(s: str) -> str:\n    return s.translate(str.maketrans(\n        \"abcdefghijklmnopqrstuvwxyz\",\n        \"cdefghijklmnopqrstuvwxyzab\"\n    ))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String encrypt(String s) {", "code translation\nPython:\nfrom typing import Dict\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n    if len(dict) == 0:\n        return False\n    if all(x.islower() for x in dict.keys()):\n        return True\n    if all(x.isupper() for x in dict.keys()):\n        return True\n    return False\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkDictCase(HashMap<String,String> dict) {", "code translation\nPython:\nfrom typing import List\ndef add(lst: List[int]) -> int:\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0])\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long add(ArrayList<Long> lst) {", "code translation\nPython:\ndef fix_spaces(text: str) -> str:\n    # if text[-1] == ' ':\n    #     return fix_spaces(text[:-1]) + '_'\n    # if '  ' in text:\n    #     return fix_spaces(text.replace('  ', ' '))\n    # if ' ' in text:\n    #     return fix_spaces(text.replace(' ', '_'))\n    # return text\n    return text.replace('  ', '-').replace(' ', '_')\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String fixSpaces(String text) {", "code translation\nPython:\ndef fibfib(n: int) -> int:\n    if n <= 2:\n        return n - 2\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long fibfib(long n) {", "code translation\nPython:\nfrom typing import List\ndef double_the_difference(lst: List[float]) -> int:\n    sum = 0\n    for i in lst:\n        if i > 0 and int(i) == i:\n            if i % 2 != 0:\n                sum += i ** 2\n    return sum\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long doubleTheDifference(ArrayList<Float> lst) {", "code translation\nPython:\nfrom typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {", "code translation\nPython:\ndef car_race_collision(n: int) -> int:\n    return n * (n - 1) // 2\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long carRaceCollision(long n) {", "code translation\nPython:\nfrom typing import List\ndef parse_music(music_string: str) -> List[int]:\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> parseMusic(String music_string) {", "code translation\nPython:\ndef decimal_to_binary(decimal: int) -> str:\n    return \"db\" + bin(decimal)[2:] + \"db\"\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String decimalToBinary(long decimal) {", "code translation\nPython:\nfrom typing import List\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> allPrefixes(String string) {", "code translation\nPython:\ndef add(x: int, y: int) -> int:\n    return x + y\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long add(long x, long y) {", "code translation\nPython:\nfrom typing import List\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    if remaining < need:\n        return [remaining + number, 0]\n    else:\n        return [remaining + number, remaining - need]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> eat(long number, long need, long remaining) {", "code translation\nPython:\nfrom typing import List\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    # Find the maximum number of buckets that can be used to fill the wells\n    # with the given capacity.\n    # For each well, find the maximum number of buckets that can be used to fill\n    # the well with the given capacity.\n    # Return the minimum of the maximum number of buckets used to fill the wells\n    # for each well.\n    return min(max_fill_for_well(well, capacity) for well in grid)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {", "code translation\nPython:\nfrom typing import List\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {", "code translation\nPython:\ndef flip_case(string: str) -> str:\n    return ''.join(\n        char.lower() if char.isupper() else char.upper() for char in string\n    )\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String flipCase(String string) {", "code translation\nPython:\nfrom typing import List\ndef by_length(arr: List[int]) -> List[str]:\n    return [\n        \"One\",\n        \"Two\",\n        \"Three\",\n        \"Four\",\n        \"Five\",\n        \"Six\",\n        \"Seven\",\n        \"Eight\",\n        \"Nine\",\n    ][::-1][:len(arr)]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> byLength(ArrayList<Long> arr) {", "code translation\nPython:\nfrom typing import List\ndef factorize(n: int) -> List[int]:\n    if n <= 0:\n        raise ValueError(\"Input should be positive\")\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    i = 3\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 2\n    return factors\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> factorize(long n) {", "code translation\nPython:\nfrom typing import List\ndef count_up_to(n: int) -> List[int]:\n    if n <= 1:\n        return []\n    primes = [2]\n    for i in range(3, n, 2):\n        for j in primes:\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return primes\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> countUpTo(long n) {", "code translation\nPython:\nfrom typing import List\ndef unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> unique(ArrayList<Long> l) {", "code translation\nPython:\nfrom typing import List\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    if len(lst1) == 0:\n        return lst1\n    if len(lst2) == 0:\n        return lst2\n    if len(lst1) == len(lst2):\n        return lst1\n    if len(lst1) > len(lst2):\n        return lst1 if sum([len(i) for i in lst1]) < sum([len(i) for i in lst2]) else lst2\n    if len(lst1) < len(lst2):\n        return lst1 if sum([len(i) for i in lst1]) < sum([len(i) for i in lst2]) else lst2\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {", "code translation\nPython:\nfrom typing import List\ndef max_element(l: List[int]) -> int:\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxElement(ArrayList<Long> l) {", "code translation\nPython:\ndef is_nested(string: str) -> bool:\n    return is_nested_recursive(string, 0, 0)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isNested(String string) {", "code translation\nPython:\nfrom typing import Union\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    else:\n        return bin(round((n + m) / 2))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {", "code translation\nPython:\nfrom typing import List\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f\"the number of odd elements {len([x for x in lst[i] if int(x) % 2 == 1])}n the str{len([x for x in lst[i] if int(x) % 2 == 1])}ng {len([x for x in lst[i] if int(x) % 2 == 1])} of the {len([x for x in lst[i] if int(x) % 2 == 1])}nput.\" for i in range(len(lst))]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean moveOneBall(ArrayList<Long> arr) {", "code translation\nPython:\nfrom typing import List\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    if arr[-1] > arr[-2]:\n        return False\n    return True\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long> evenOddPalindrome(long n) {", "code translation\nPython:\nfrom typing import Tuple\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_palindrome = 0\n    odd_palindrome = 0\n    for i in range(1, n):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome += 1\n            else:\n                odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isEqualToSumEven(long n) {", "code translation\nPython:\ndef is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n % 4 == 0 and n // 4 >= 2\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> derivative(ArrayList<Long> xs) {", "code translation\nPython:\nfrom typing import List\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isSorted(ArrayList<Long> lst) {", "code translation\nPython:\nfrom typing import List\ndef is_sorted(lst: List[int]) -> bool:\n    # return lst == sorted(lst)\n    # return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n    return lst == sorted(set(lst))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String solve(String s) {", "code translation\nPython:\ndef solve(s: str) -> str:\n    # return s[::-1] if not any(c.isalpha() for c in s) else ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n    return s[::-1] if not any(c.isalpha() for c in s) else s.swapcase()\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> tri(long n) {", "code translation\nPython:\nfrom typing import List\ndef tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        trib = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                trib.append(1 + i / 2)\n            else:\n                trib.append(trib[i - 1] + trib[i - 2] + trib[i + 1])\n        return trib\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long fizzBuzz(long n) {", "code translation\nPython:\ndef fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count(\"7\")\n    return count\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> filterByPrefix(ArrayList<String> strings, String prefix) {", "code translation\nPython:\nfrom typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String solve(long N) {", "code translation\nPython:\ndef solve(N: int) -> str:\n    return bin(N).replace(\"0b\", \"\")\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {", "code translation\nPython:\nfrom typing import List\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    if not grid or not grid[0]:\n        return []\n    n = len(grid)\n    m = len(grid[0])\n    if n == 1 and m == 1:\n        return [grid[0][0]]\n    # Initialize the dp array\n    dp = [[float('inf') for _ in range(m)] for _ in range(n)]\n    dp[0][0] = 0\n    # Bottom-up approach\n    for i in range(n):\n        for j in range(m):\n            if i + 1 < n:\n                dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + grid[i + 1][j])\n            if j + 1 < m:\n                dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + grid[i][j + 1])\n    # Find the minimum path\n    min_path = []\n    i = n - 1\n    j = m - 1\n    while i >= 0 and j >= 0:\n        min_path.append(grid[i][j])\n        if i + 1 < n and dp[i + 1][j] < dp[i][j]:\n            i += 1\n        else:\n            j -= 1\n    return min_path[::-1]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countUpper(String s) {", "code translation\nPython:\ndef count_upper(s: str) -> int:\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {", "code translation\nPython:\nfrom typing import List\ndef maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long largestDivisor(long n) {", "code translation\nPython:\ndef largest_divisor(n: int) -> int:\n    i = int(n / 2)\n    while i >= 1:\n        if n % i == 0:\n            return i\n        i -= 1\n    return 1\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> sortArray(ArrayList<Long> array) {", "code translation\nPython:\nfrom typing import List\ndef sort_array(array: List[int]) -> List[int]:\n    if len(array) <= 1:\n        return array\n    def is_even(num: int) -> bool:\n        return num % 2 == 0\n    def is_odd(num: int) -> bool:\n        return not is_even(num)\n    def is_even_sum(num1: int, num2: int) -> bool:\n        return is_even(num1 + num2)\n    def is_odd_sum(num1: int, num2: int) -> bool:\n        return not is_even_sum(num1, num2)\n    def sort_ascending(array: List[int]) -> List[int]:\n        return sorted(array)\n    def sort_descending(array: List[int]) -> List[int]:\n        return sorted(array, reverse=True)\n    first_index = 0\n    last_index = len(array) - 1\n    if is_even_sum(array[first_index], array[last_index]):\n        return sort_ascending(array)\n    else:\n        return sort_descending(array)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(long n) {", "code translation\nPython:\nfrom typing import List\ndef f(n: int) -> List[int]:\n    return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean iscube(long a) {", "code translation\nPython:\ndef iscube(a: int) -> bool:\n    return int(a ** (1 / 3)) ** 3 == a\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String encode(String message) {", "code translation\nPython:\ndef encode(message: str) -> str:\n    vowels = 'aeiou'\n    vowels_dict = {\n        'a': 'c',\n        'e': 'g',\n        'i': 'i',\n        'o': 'k',\n        'u': 'm',\n    }\n    encoded_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            encoded_message += vowels_dict[letter.lower()]\n        else:\n            encoded_message += letter.lower() if letter.isupper() else letter.upper()\n    return encoded_message\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long isBored(String S) {", "code translation\nPython:\ndef is_bored(S: str) -> int:\n    return S.count('I')\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean pairsSumToZero(ArrayList<Long> l) {", "code translation\nPython:\nfrom typing import List\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(i + 1, len(l)):\n                if l[i] + l[j] == 0:\n                    return True\n        return False\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float triangleArea(long a, long b, long c) {", "code translation\nPython:\ndef triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    return -1\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> bf(String planet1, String planet2) {", "code translation\nPython:\nfrom typing import Tuple\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index < planet2_index:\n        return tuple(planets[planet1_index + 1: planet2_index])\n    else:\n        return tuple(planets[planet2_index + 1: planet1_index])\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long digits(long n) {", "code translation\nPython:\ndef digits(n: int) -> int:\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> wordsString(String s) {", "code translation\nPython:\nfrom typing import List\ndef words_string(s: str) -> List[str]:\n    return s.replace(',', ' ').split()\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long howManyTimes(String string, String substring) {", "code translation\nPython:\ndef how_many_times(string: str, substring: str) -> int:\n    return (len(string) - len(string.replace(substring, ''))) // len(substring)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String removeVowels(String text) {", "code translation\nPython:\nfrom typing import Union\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n    if a == b:\n        return None\n    if a > b:\n        return a\n    if b > a:\n        return b\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {", "code translation\nPython:\ndef remove_vowels(text: str) -> str:\n    vowels = \"aeiou\"\n    return \"\".join(letter for letter in text if letter.lower() not in vowels)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {", "code translation\nPython:\nfrom typing import List\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    result = [min(lst)]\n    while lst:\n        lst.pop(lst.index(max(lst)))\n        result.append(min(lst))\n    return result\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isSimplePower(long x, long n) {", "code translation\nPython:\nfrom typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    min_diff_pair = (float('inf'), float('inf'))\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff = abs(numbers[i] - numbers[i + 1])\n            min_diff_pair = (numbers[i], numbers[i + 1])\n    return min_diff_pair\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long primeFib(long n) {", "code translation\nPython:\ndef is_simple_power(x: int, n: int) -> bool:\n    return n ** int(x ** (1 / n)) == x\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {", "code translation\nPython:\ndef prime_fib(n: int) -> int:\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {", "code translation\nPython:\nfrom typing import List\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), x))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String makePalindrome(String string) {", "code translation\nPython:\nfrom typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String stringXor(String a, String b) {", "code translation\nPython:\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    # Find the longest palindromic suffix\n    for i in range(len(string) // 2, -1, -1):\n        if string[i:] == string[len(string) - i:][::-1]:\n            break\n    # Find the longest palindromic prefix\n    for j in range(i, len(string)):\n        if string[:j] == string[:j][::-1]:\n            break\n    return string + string[len(string) - i:j][::-1]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long specialFactorial(long n) {", "code translation\nPython:\ndef string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long addElements(ArrayList<Long> arr, long k) {", "code translation\nPython:\ndef special_factorial(n: int) -> int:\n    if n <= 0:\n        return 1\n    return n * special_factorial(n - 1)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long fib4(long n) {", "code translation\nPython:\nfrom typing import List\ndef add_elements(arr: List[int], k: int) -> int:\n    # Add the elements with at most two digits\n    sum_ = 0\n    for i in range(k):\n        num = str(arr[i])\n        if len(num) <= 2:\n            sum_ += arr[i]\n    return sum_\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {", "code translation\nPython:\ndef fib4(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n <= 3:\n        return 0\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> selectWords(String s, long n) {", "code translation\nPython:\nfrom typing import List\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted([x for x in x if not any(int(d) % 2 == 0 for d in str(x))])\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean willItFly(ArrayList<Long> q, long w) {", "code translation\nPython:\nfrom typing import List\ndef select_words(s: str, n: int) -> List[str]:\n    # CONSTANTS\n    VOWELS = \"aeiou\"\n    # VARIABLES\n    result = []\n    # ALGORITHM\n    if len(s) == 0:\n        return result\n    words = s.split()\n    for word in words:\n        consonants = 0\n        for char in word:\n            if char not in VOWELS:\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long fib(long n) {", "code translation\nPython:\nfrom typing import List\ndef will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 1:\n        return True\n    if sum(q) > w:\n        return False\n    if q == q[::-1]:\n        return True\n    return False\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String StrongestExtension(String class_name, ArrayList<String> extensions) {", "code translation\nPython:\ndef fib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String matchParens(ArrayList<String> lst) {", "code translation\nPython:\nfrom typing import List\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    strongest_extension = extensions[0]\n    strongest_extension_strength = (len([x for x in strongest_extension if x.isupper()]) - len([x for x in strongest_extension if x.islower()]))\n    for extension in extensions[1:]:\n        extension_strength = (len([x for x in extension if x.isupper()]) - len([x for x in extension if x.islower()]))\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return f'{class_name}.{strongest_extension}'\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {", "code translation\nPython:\nfrom typing import List\ndef match_parens(lst: List[str]) -> str:\n    return 'Yes' if match_parens_helper(lst) else 'No'\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean anyInt(float x, float y, float z) {", "code translation\nPython:\nfrom typing import List, Optional\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    if lst[0] == lst[1]:\n        return None\n    return lst[1]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float truncateNumber(float number) {", "code translation\nPython:\ndef any_int(x: float, y: float, z: float) -> bool:\n    return (x % 1 == 0 and y % 1 == 0 and z % 1 == 0 and (x + y == z or x + z == y or y + z == x))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> incrList(ArrayList<Long> l) {", "code translation\nPython:\ndef truncate_number(number: float) -> float:\n    return number - int(number)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long xOrY(long n, long x, long y) {", "code translation\nPython:\nfrom typing import List\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long modp(long n, long p) {", "code translation\nPython:\ndef x_or_y(n: int, x: int, y: int) -> int:\n    pass\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long> evenOddCount(long num) {", "code translation\nPython:\ndef modp(n: int, p: int) -> int:\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    return (modp(n // 2, p) ** 2 * 2) % p\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isHappy(String s) {", "code translation\nPython:\nfrom typing import Tuple\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long largestPrimeFactor(long n) {", "code translation\nPython:\ndef is_happy(s: str) -> bool:\n    return len(s) >= 3 and all(s[i] != s[i + 1] != s[i + 2] for i in range(len(s) - 2))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long digitSum(String s) {", "code translation\nPython:\ndef largest_prime_factor(n: int) -> int:\n    largest = 0\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {", "code translation\nPython:\ndef digitSum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long solution(ArrayList<Long> lst) {", "code translation\nPython:\nfrom typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the smallest number in the list\n    smallest = min(numbers)\n    # Find the largest number in the list\n    largest = max(numbers)\n    # Find the difference between the largest and smallest number in the list\n    difference = largest - smallest\n    # Find the new list of numbers\n    new_numbers = []\n    for number in numbers:\n        new_numbers.append((number - smallest) / difference)\n    return new_numbers\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> pluck(ArrayList<Long> arr) {", "code translation\nPython:\nfrom typing import List\ndef solution(lst: List[int]) -> int:\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1])\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long getMaxTriples(long n) {", "code translation\nPython:\nfrom typing import List\ndef pluck(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    evens = []\n    for i, x in enumerate(arr):\n        if x % 2 == 0:\n            evens.append([x, i])\n    if len(evens) == 0:\n        return []\n    return min(evens, key=lambda x: (x[0], x[1]))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {", "code translation\nPython:\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float median(ArrayList<Long> l) {", "code translation\nPython:\nfrom typing import List\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    # your code here\n    pass\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean primeLength(String string) {", "code translation\nPython:\nfrom typing import List\ndef median(l: List[int]) -> float:\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long smallestChange(ArrayList<Long> arr) {", "code translation\nPython:\ndef prime_length(string: str) -> bool:\n    if len(string) == 1:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumSquares(ArrayList<Float> lst) {", "code translation\nPython:\nfrom typing import List\ndef smallest_change(arr: List[int]) -> int:\n    if len(arr) == 0:\n        return 0\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n            if left > 0 and arr[left - 1] == arr[right]:\n                left -= 1\n            elif right < len(arr) - 1 and arr[right + 1] == arr[left]:\n                right += 1\n            else:\n                left += 1\n                right -= 1\n        else:\n            left += 1\n            right -= 1\n    return changes\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String fileNameCheck(String file_name) {", "code translation\nPython:\nfrom typing import List\ndef sum_squares(lst: List[float]) -> int:\n    return sum([int(i)**2 for i in lst])\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean triplesSumToZero(ArrayList<Long> l) {", "code translation\nPython:\ndef file_name_check(file_name: str) -> str:\n    return \"Yes\" if re.match(r\"^[a-zA-Z][a-zA-Z0-9]*(\\.[a-z]{3})$\", file_name) else \"No\"\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String intersection(Pair<Long, Long> interval1, Pair<Long, Long> interval2) {", "code translation\nPython:\nfrom typing import List\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> separateParenGroups(String paren_string) {", "code translation\nPython:\nfrom typing import Tuple\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0]:\n        interval1, interval2 = interval2, interval1\n    if interval1[1] < interval2[0]:\n        return \"NO\"\n    if interval1[1] <= interval2[1]:\n        return \"YES\" if is_prime(interval1[1] - interval2[0] + 1) else \"NO\"\n    return \"YES\" if is_prime(interval2[1] - interval2[0] + 1) else \"NO\"\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {", "code translation\nPython:\nfrom typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Hint: don't write any code before this line\n    # Your code goes here\n    # Hint: don't write any code after this line\n    return ['()', '(())', '(()())']\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long startsOneEnds(long n) {", "code translation\nPython:\nfrom typing import List\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(score - guess) for score, guess in zip(game, guess)]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkIfLastCharIsALetter(String txt) {", "code translation\nPython:\ndef starts_one_ends(n: int) -> int:\n    return 9 * 10 ** (n - 1) + 9 * 10 ** (n - 2)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean validDate(String date) {", "code translation\nPython:\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    return bool(txt) and txt[-1].isalpha() and txt[-1] != txt.rstrip()[-1]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countNums(ArrayList<Long> arr) {", "code translation\nPython:\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    try:\n        month, day, year = date.split('-')\n    except ValueError:\n        return False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month not in range(1, 13) or day not in range(1, 32) or year not in range(1, 10000):\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day not in range(1, 32):\n        return False\n    if month in [4, 6, 9, 11] and day not in range(1, 31):\n        return False\n    if month == 2 and day not in range(1, 29):\n        return False\n    return True\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String antiShuffle(String s) {", "code translation\nPython:\nfrom typing import List\ndef count_nums(arr: List[int]) -> int:\n    return len([x for x in arr if sum(map(int, str(x))) > 0])\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isPalindrome(String text) {", "code translation\nPython:\ndef anti_shuffle(s: str) -> str:\n    return \" \".join(sorted(s.split()))\n    # solution\n    # return \" \".join(map(lambda x: \"\".join(sorted(x)), s.split()))\n    # solution\n    # return \" \".join(sorted(s.split(), key=lambda x: \"\".join(sorted(x))))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String getClosestVowel(String word) {", "code translation\nPython:\ndef is_palindrome(text: str) -> bool:\n    return text == text[::-1]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isPrime(long n) {", "code translation\nPython:\ndef get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels:\n            return word[i]\n    return \"\"\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean simplify(String x, String n) {", "code translation\nPython:\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long hexKey(String num) {", "code translation\nPython:\ndef simplify(x: str, n: str) -> bool:\n    return eval(f\"{x} * {n}\") % 1 == 0\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String wordsInSentence(String sentence) {", "code translation\nPython:\ndef hex_key(num: str) -> int:\n    return sum(\n        int(hex_digit, 16) in {2, 3, 5, 7, 0xB, 0xD} for hex_digit in num\n    )\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> histogram(String test) {", "code translation\nPython:\ndef words_in_sentence(sentence: str) -> str:\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {", "code translation\nPython:\nfrom typing import Dict\ndef histogram(test: str) -> Dict[str, int]:\n    if test == '':\n        return {}\n    else:\n        test = test.split()\n        hist = {}\n        for i in test:\n            if i in hist:\n                hist[i] += 1\n            else:\n                hist[i] = 1\n        max_value = max(hist.values())\n        return {key: value for key, value in hist.items() if value == max_value}\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> getOddCollatz(long n) {", "code translation\nPython:\nfrom typing import List, Tuple\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    return sorted([(i, lst[i].index(x)) for i in range(len(lst)) if x in lst[i]], key=lambda x: (x[0], -x[1]))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long canArrange(ArrayList<Long> arr) {", "code translation\nPython:\nfrom typing import List\ndef get_odd_collatz(n: int) -> List[int]:\n    if n <= 0:\n        raise ValueError(\"n should be a positive integer.\")\n    if n == 1:\n        return [1]\n    odd_collatz = []\n    while n > 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    return odd_collatz\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String sortNumbers(String numbers) {", "code translation\nPython:\nfrom typing import List\ndef can_arrange(arr: List[int]) -> int:\n    # Find the maximum element in the array\n    max_element = max(arr)\n    # Create a frequency table for the array\n    freq_table = [0] * (max_element + 1)\n    for element in arr:\n        freq_table[element] += 1\n    # Find the index of the first element which is not greater than or equal\n    # to the element immediately preceding it\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String circularShift(long x, long shift) {", "code translation\nPython:\ndef sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: int(x[0])))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumSquares(ArrayList<Long> lst) {", "code translation\nPython:\ndef circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[shift:] + x_str[:shift]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long skjkasdkd(ArrayList<Long> lst) {", "code translation\nPython:\nfrom typing import List\ndef sum_squares(lst: List[int]) -> int:\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long> sumProduct(ArrayList<Long> numbers) {", "code translation\nPython:\nfrom typing import List\ndef skjkasdkd(lst: List[int]) -> int:\n    pass\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long chooseNum(long x, long y) {", "code translation\nPython:\nfrom typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum += i\n        product *= i\n    return sum, product\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {", "code translation\nPython:\ndef choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if x % 2 == 1:\n        x += 1\n    if y % 2 == 1:\n        y -= 1\n    if x > y:\n        return -1\n    return y\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countDistinctCharacters(String string) {", "code translation\nPython:\nfrom typing import List, Tuple, Optional\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    # Solution using list comprehension:\n    # largest_neg = max([x for x in lst if x < 0])\n    # smallest_pos = min([x for x in lst if x > 0])\n    # return largest_neg, smallest_pos\n    # Solution using filter:\n    largest_neg = max(filter(lambda x: x < 0, lst))\n    smallest_pos = min(filter(lambda x: x > 0, lst))\n    return largest_neg, smallest_pos\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> makeAPile(long n) {", "code translation\nPython:\ndef count_distinct_characters(string: str) -> int:\n    return len({c.lower() for c in string})\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<Long> prodSigns(ArrayList<Long> arr) {", "code translation\nPython:\nfrom typing import List\ndef make_a_pile(n: int) -> List[int]:\n    pile = [n]\n    while pile[-1] != 1:\n        pile.append(pile[-1] + 1 if pile[-1] % 2 else pile[-1] - 1)\n    return pile\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long minSubArraySum(ArrayList<Long> nums) {", "code translation\nPython:\nfrom typing import List, Optional\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    prod = 1\n    for i in arr:\n        prod *= i if i else 1\n    return sum(abs(i) for i in arr) * prod\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String stringSequence(long n) {", "code translation\nPython:\nfrom typing import List\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    left, right = 0, 0\n    cur_sum = 0\n    while right < len(nums):\n        cur_sum += nums[right]\n        min_sum = min(min_sum, cur_sum)\n        if cur_sum >= 0:\n            cur_sum = 0\n            left = right + 1\n        right += 1\n    return min_sum\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean cycpatternCheck(String a, String b) {", "code translation\nPython:\ndef string_sequence(n: int) -> str:\n    return \" \".join([str(i) for i in range(n + 1)])\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean monotonic(ArrayList<Long> l) {", "code translation\nPython:\ndef cycpattern_check(a: str, b: str) -> bool:\n    return any(b in a[i:] for i in range(len(a)))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<String> longest(ArrayList<String> strings) {", "code translation\nPython:\nfrom typing import List\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 2:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] < l[i - 1]:\n                return False\n    else:\n        for i in range(1, len(l)):\n            if l[i] > l[i - 1]:\n                return False\n    return True\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean belowThreshold(ArrayList<Long> l, long t) {", "code translation\nPython:\nfrom typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isMultiplyPrime(long a) {", "code translation\nPython:\nfrom typing import List\ndef below_threshold(l: List[int], t: int) -> bool:\n    for i in l:\n        if i >= t:\n            return False\n    return True\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> getPositive(ArrayList<Long> l) {", "code translation\nPython:\ndef is_multiply_prime(a: int) -> bool:\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    return False\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> sortThird(ArrayList<Long> l) {", "code translation\nPython:\nfrom typing import List\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> parseNestedParens(String paren_string) {", "code translation\nPython:\nfrom typing import List\ndef sort_third(l: List[int]) -> List[int]:\n    # l_copy = l.copy()\n    # l_copy[::3] = sorted(l[::3])\n    # return l_copy\n    return [x if i % 3 == 0 else sorted(l)[i // 3] for i, x in enumerate(l)]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float triangleArea(long a, long h) {", "code translation\nPython:\nfrom typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(0, len(x.split('(')) - len(x.split(')'))) for x in paren_string.split()]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long multiply(long a, long b) {", "code translation\nPython:\ndef triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {", "code translation\nPython:\ndef multiply(a: int, b: int) -> int:\n    return a * b\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {", "code translation\nPython:\nfrom typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate mean of input data\n    mean = sum(numbers) / len(numbers)\n    # Calculate absolute difference between each element and the mean\n    absolute_differences = [abs(x - mean) for x in numbers]\n    # Calculate mean of the absolute differences\n    return sum(absolute_differences) / len(absolute_differences)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String intToMiniRoman(long number) {", "code translation\nPython:\nfrom typing import List\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long fruitDistribution(String s, long n) {", "code translation\nPython:\ndef int_to_mini_roman(number: int) -> str:\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"Invalid input\")\n    roman_numeral_map = [\n        (1000, \"m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"),\n        (100, \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n        (40, \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n        (4, \"iv\"),\n        (1, \"i\"),\n    ]\n    roman_numeral = \"\"\n    for integer, roman_char in roman_numeral_map:\n        while number >= integer:\n            roman_numeral += roman_char\n            number -= integer\n    return roman_numeral.lower()\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {", "code translation\nPython:\ndef fruit_distribution(s: str, n: int) -> int:\n    if 'apples' in s:\n        apples = int(s.split('apples')[0])\n    else:\n        apples = 0\n    if 'oranges' in s:\n        oranges = int(s.split('oranges')[0].split(' ')[-1])\n    else:\n        oranges = 0\n    return n - apples - oranges\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long greatestCommonDivisor(long a, long b) {", "code translation\nPython:\nfrom typing import Tuple\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    # return (s.replace(c, ''), s.replace(c, '') == s.replace(c, '')[::-1])\n    # return (s.translate(str.maketrans('', '', c)), s.translate(str.maketrans('', '', c)) == s.translate(str.maketrans('', '', c))[::-1])\n    return (s.translate(str.maketrans('', '', c)), s.translate(str.maketrans('', '', c)) == s[::-1])\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {", "code translation\nPython:\ndef greatest_common_divisor(a: int, b: int) -> int:\n    if a == 0 or b == 0:\n        return max(a, b)\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String concatenate(ArrayList<String> strings) {", "code translation\nPython:\nfrom typing import Union, List\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 == 0)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {", "code translation\nPython:\nfrom typing import List\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {", "code translation\nPython:\nfrom typing import List\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long closestInteger(String value) {", "code translation\nPython:\nfrom typing import List\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    return sorted(filter(lambda x: len(x) % 2 == 0, lst), key=lambda x: (len(x), x))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long vowelsCount(String s) {", "code translation\nPython:\nfrom typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String findMax(ArrayList<String> words) {", "code translation\nPython:\ndef closest_integer(value: str) -> int:\n    return int(round(float(value)))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<String> stringToMd5(String text) {", "code translation\nPython:\ndef vowels_count(s: str) -> int:\n    vowels = 'aeiouy'\n    return sum(s.count(v) for v in vowels)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String changeBase(long x, long base) {", "code translation\nPython:\nfrom typing import List\ndef find_max(words: List[str]) -> str:\n    return max(words, key=lambda x: (len(set(x)), x))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean rightAngleTriangle(long a, long b, long c) {", "code translation\nPython:\nfrom typing import Optional\ndef string_to_md5(text: str) -> Optional[str]:\n    if text == '':\n        return None\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {", "code translation\nPython:\ndef change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result = \"\"\n    while x > 0:\n        result = digits[x % base] + result\n        x //= base\n    return result\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {", "code translation\nPython:\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a ** 2 + b ** 2 == c ** 2\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long specialFilter(ArrayList<Long> nums) {", "code translation\nPython:\nfrom typing import List\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumToN(long n) {", "code translation\nPython:\nfrom typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    return [numbers[0], delimeter] + intersperse(numbers[1:], delimeter)\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {", "code translation\nPython:\nfrom typing import List\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 != 0 and num // 10 % 2 != 0:\n            count += 1\n    return count\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> generateIntegers(long a, long b) {", "code translation\nPython:\ndef sum_to_n(n: int) -> int:\n    return (n * (n + 1)) // 2\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {", "code translation\nPython:\nfrom typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean belowZero(ArrayList<Long> operations) {", "code translation\nPython:\nfrom typing import List\ndef generate_integers(a: int, b: int) -> List[int]:\n    return sorted([i for i in range(a, b + 1) if not i % 2])\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long search(ArrayList<Long> lst) {", "code translation\nPython:\nfrom typing import List\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if len(numbers) == 0:\n        return []\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for number in numbers[1:]:\n        max_so_far = max(max_so_far, number)\n        result.append(max_so_far)\n    return result\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean correctBracketing(String brackets) {", "code translation\nPython:\nfrom typing import List\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> sortEven(ArrayList<Long> l) {", "code translation\nPython:\nfrom typing import List\ndef search(lst: List[int]) -> int:\n    # 1. Find the max value in the list\n    # 2. Check if the max value is greater than 0\n    # 3. If so, check if the max value is greater than or equal to the frequency of the max value\n    # 4. If so, return the max value\n    # 5. If not, return -1\n    # 6. If the max value is 0, return -1\n    # 7. If the list is empty, return -1\n    if len(lst) == 0:\n        return -1\n    max_value = max(lst)\n    if max_value == 0:\n        return -1\n    if lst.count(max_value) >= max_value:\n        return max_value\n    return -1\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean sameChars(String s0, String s1) {", "code translation\nPython:\ndef correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n        elif b == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\nJava:\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean correctBracketing(String brackets) {"]