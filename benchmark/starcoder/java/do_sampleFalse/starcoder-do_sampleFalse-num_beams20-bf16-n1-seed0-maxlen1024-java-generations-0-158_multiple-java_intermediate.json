[["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n    // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    public static long strlen(String string) {\n        return java.lang.Long.valueOf(string.length());"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    public static String encrypt(String s) {\n        return s.replace(\"a\", \"c\")\n                .replace(\"b\", \"d\")\n                .replace(\"c\", \"e\")\n                .replace(\"d\", \"f\")\n                .replace(\"e\", \"g\")\n                .replace(\"f\", \"h\")\n                .replace(\"g\", \"i\")\n                .replace(\"h\", \"j\")\n                .replace(\"i\", \"k\")\n                .replace(\"j\", \"l\")\n                .replace(\"k\", \"m\")\n                .replace(\"l\", \"n\")\n                .replace(\"m\", \"o\")\n                .replace(\"n\", \"p\")\n                .replace(\"o\", \"q\")\n                .replace(\"p\", \"r\")\n                .replace(\"q\", \"s\")\n                .replace(\"r\", \"t\")\n                .replace(\"s\", \"u\")\n                .replace(\"t\", \"v\")\n                .replace(\"u\", \"w\")\n                .replace(\"v\", \"x\")\n                .replace(\"w\", \"y\")\n                .replace(\"x\", \"z\")\n                .replace(\"y\", \"aa\")\n                .replace(\"z\", \"ab\")\n                .replace(\"aa\", \"ac\")\n                .replace(\"ab\", \"ad\")\n                .replace(\"ac\", \"ae\")\n                .replace(\"ad\", \"af\")\n                .replace(\"ae\", \"ag\")\n                .replace(\"af\", \"ah\")\n                .replace(\"ag\", \"ai\")\n                .replace(\"ah\", \"aj\")\n                .replace(\"ai\", \"ak\")\n                .replace(\"aj\", \"al\")\n                .replace(\"ak\", \"am\")\n                .replace(\"al\", \"an\")\n                .replace(\"am\", \"ao\")\n                .replace(\"an\", \"ap\")\n                .replace(\"ao\", \"aq\")\n                .replace(\"ap\", \"ar\")\n                .replace(\"aq\", \"as\")\n                .replace(\"ar\", \"at\")\n                .replace(\"as\", \"au\")\n                .replace(\"at\", \"av\")\n                .replace(\"au\", \"aw\")\n                .replace(\"av\", \"ax\")\n                .replace(\"aw\", \"ay\")\n                .replace(\"ax\", \"az\")\n                .replace(\"ay\", \"ba\")\n                .replace(\"az\", \"bb\")\n                .replace(\"ba\", \"bc\")\n                .replace(\"bb\", \"bd\")\n                .replace(\"bc\", \"be\")\n                .replace(\"bd\", \"bf\")\n                .replace(\"be\", \"bg\")\n                .replace(\"bf\", \"bh\")\n                .replace(\"bg\", \"bi\")\n                .replace(\"bh\", \"bj\")\n                .replace(\"bi\", \"bk\")\n                .replace(\"bj\", \"bl\")\n                .replace(\"bk\", \"bm\")\n                .replace(\"bl\", \"bn\")\n                .replace(\"bm\", \"bo\")\n                .replace(\"bn\", \"bp\")\n                .replace(\"bo\", \"bq\")\n                .replace(\"bp\", \"br\")\n                .replace(\"bq\", \"bs\")\n                .replace(\"br\", \"bt\")\n                .replace(\"bs\", \"bu\")\n                .replace(\"bt\", \"bv\")\n                .replace(\"bu\", \"bw\")\n                .replace(\"bv\", \"bx\")\n                .replace(\"bw\", \"by\")\n                .replace(\"bx\", \"bz\")\n                .replace(\"by\", \"ca\")\n                .replace(\"bz\", \"cb\")\n                .replace(\"ca\", \"cc\")\n                .replace(\"cb\", \"cd\")\n                .replace(\"cc\", \"ce\")\n                .replace(\"cd\", \"cf\")\n                .replace(\"ce\", \"cg\")\n                .replace(\"cf\", \"ch\")\n                .replace(\"cg\", \"ci\")\n                .replace(\"ch\", \"cj\")\n                .replace(\"ci\", \"ck\")\n                .replace(\"cj\", \"cl\")\n                .replace(\"ck\", \"cm\")\n                .replace(\"cl\", \"cn\")\n                .replace(\"cm\", \"co\")\n                .replace(\"cn\", \"cp\")\n                .replace(\"co\", \"cq\")\n                .replace(\"cp\", \"cr\")\n                .replace"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a hash map, return true if all keys are strings in lower \n    // case or all keys are strings in upper case, else return false.\n    // The function should return false is the given hash map is empty.\n    // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n    // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict) {\n        return dict.keySet().stream().allMatch(s -> s.equals(s.toLowerCase()) || s.equals(s.toUpperCase()));"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty array list of integers lst. add the even elements that are at odd indices..\n    // Examples:\n    // >>> add((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)6l, (long)7l))))\n    // (2l)\n    public static long add(ArrayList<Long> lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1) {\n                if (lst.get(i) % 2 == 0) {\n                    sum += lst.get(i);\n                }\n            }\n        }\n        return sum;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    public static String fixSpaces(String text) {\n        if (text == null || text.length() == 0) {\n            return text;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n                if (sb.length() > 0 && sb.charAt(sb.length() - 1) == '_') {\n                    continue;\n                }\n                if (sb.length() > 1 && sb.charAt(sb.length() - 1) == '-' && sb.charAt(sb.length() - 2) == '_') {\n                    continue;\n                }\n                if (sb.length() > 2 && sb.charAt(sb.length() - 1) == '-' && sb.charAt(sb.length() - 2) == '-' && sb.charAt(sb.length() - 3) == '_') {\n                    continue;\n                }\n                if (sb.length() > 3 && sb.charAt(sb.length() - 1) == '-' && sb.charAt(sb.length() - 2) == '-' && sb.charAt(sb.length() - 3) == '-' && sb.charAt(sb.length() - 4) == '_') {\n                    continue;\n                }\n                if (sb.length() > 4 && sb.charAt(sb.length() - 1) == '-' && sb.charAt(sb.length() - 2) == '-' && sb.charAt(sb.length() - 3) == '-' && sb.charAt(sb.length() - 4) == '-' && sb.charAt(sb.length() - 5) == '_') {\n                    continue;\n                }\n                if (sb.length() > 5 && sb.charAt(sb.length() - 1) == '-' && sb.charAt(sb.length() - 2) == '-' && sb.charAt(sb.length() - 3) == '-' && sb.charAt(sb.length() - 4) == '-' && sb.charAt(sb.length() - 5) == '-' && sb.charAt(sb.length() - 6) == '_') {\n                    continue;\n                }\n                if (sb.length() > 6 && sb.charAt(sb.length() - 1) == '-' && sb.charAt(sb.length() - 2) == '-' && sb.charAt(sb.length() - 3) == '-' && sb.charAt(sb.length() - 4) == '-' && sb.charAt(sb.length() - 5) == '-' && sb.charAt(sb.length() - 6) == '-' && sb.charAt(sb.length() - 7) == '_') {\n                    continue;\n                }\n                if (sb.length() > 7 && sb.charAt(sb.length() - 1) == '-' && sb.charAt(sb.length() - 2) == '-' && sb.charAt(sb.length() - 3) == '-' && sb.charAt(sb.length() - 4) == '-' && sb.charAt(sb.length() - 5) == '-' && sb.charAt(sb.length() - 6) == '-' && sb.charAt(sb.length() - 7) == '-' && sb.charAt(sb.length() - 8) == '_') {\n                    continue;\n                }\n                if (sb.length() > 8 && sb.charAt(sb.length() - 1) == '-' && sb.charAt(sb.length() - 2) == '-' && sb.charAt(sb.length() - 3) == '-' && sb.charAt(sb.length() - 4) == '-' && sb.charAt(sb.length() - 5) == '-' && sb.charAt(sb.length() - 6) == '-' && sb.charAt(sb.length() - 7) == '-' &&"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n    public static long fibfib(long n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        }"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of numbers, return the sum of squares of the numbers\n    // in the array list that are odd. Ignore numbers that are negative or not integers.\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)0l))))\n    // (10l)\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)-1l, (long)-2l, (long)0l))))\n    // (0l)\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)9l, (long)-2l))))\n    // (81l)\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)0l))))\n    // (0l)\n    // If the input array list is empty, return 0.\n    public static long doubleTheDifference(ArrayList<Float> lst) {\n        return 0;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter given array list of any javathon values only for integers\n    // >>> filterIntegers((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)3.14f, (String)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> filterIntegers((new ArrayList<Object>(Arrays.asList(1l, 2l, 3l, \"abc\", new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList())))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (Object value : values) {\n            if (value instanceof Long) {\n                result.add((Long)value);\n            } else if (value instanceof Integer) {\n                result.add(Long.valueOf((Integer)value));\n            } else if (value instanceof Short) {\n                result.add(Long.valueOf((Short)value));\n            } else if (value instanceof Byte) {\n                result.add(Long.valueOf((Byte)value));\n            } else if (value instanceof BigInteger) {\n                result.add(Long.valueOf(((BigInteger)value).longValue()));\n            } else if (value instanceof BigDecimal) {\n                result.add(Long.valueOf(((BigDecimal)value).longValue()));\n            }\n        }\n        return result;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    public static long carRaceCollision(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        if (n == 3) return 1;\n        if (n == 4) return 2;\n        if (n == 5) return 2;\n        if (n == 6) return 3;\n        if (n == 7) return 3;\n        if (n == 8) return 4;\n        if (n == 9) return 4;\n        if (n == 10) return 5;\n        if (n == 11) return 5;\n        if (n == 12) return 6;\n        if (n == 13) return 6;\n        if (n == 14) return 7;\n        if (n == 15) return 7;\n        if (n == 16) return 8;\n        if (n == 17) return 8;\n        if (n == 18) return 9;\n        if (n == 19) return 9;\n        if (n == 20) return 10;\n        if (n == 21) return 10;\n        if (n == 22) return 11;\n        if (n == 23) return 11;\n        if (n == 24) return 12;\n        if (n == 25) return 12;\n        if (n == 26) return 13;\n        if (n == 27) return 13;\n        if (n == 28) return 14;\n        if (n == 29) return 14;\n        if (n == 30) return 15;\n        if (n == 31) return 15;\n        if (n == 32) return 16;\n        if (n == 33) return 16;\n        if (n == 34) return 17;\n        if (n == 35) return 17;\n        if (n == 36) return 18;\n        if (n == 37) return 18;\n        if (n == 38) return 19;\n        if (n == 39) return 19;\n        if (n == 40) return 20;\n        if (n == 41) return 20;\n        if (n == 42) return 21;\n        if (n == 43) return 21;\n        if (n == 44) return 22;\n        if (n == 45) return 22;\n        if (n == 46) return 23;\n        if (n == 47) return 23;\n        if (n == 48) return 24;\n        if (n == 49) return 24;\n        if (n == 50) return 25;\n        if (n == 51) return 25;\n        if (n == 52) return 26;\n        if (n == 53) return 26;\n        if (n == 54) return 27;\n        if (n == 55) return 27;\n        if (n == 56) return 28;\n        if (n == 57) return 28;\n        if (n == 58) return 29;\n        if (n == 59) return 29;\n        if (n == "], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return array list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l, (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < music_string.length(); i++) {\n            if (music_string.charAt(i) == 'o') {\n                result.add(4l);\n            } else if (music_string.charAt(i) == 'o|') {\n                result.add(2l);\n            } else if (music_string.charAt(i) == '.|') {\n                result.add(1l);\n            }\n        }\n        return result;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a number in decimal form and your task is to convert it to\n    // binary format. The function should return a string, with each character representing a binary\n    // number. Each character in the string will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    // The extra characters are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\")\n    public static String decimalToBinary(long decimal) {\n        return \"db\" + Long.toBinaryString(decimal) + \"db\";"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return array list of all prefixes from shortest to longest of the input string\n    // >>> allPrefixes((\"abc\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"ab\", (String)\"abc\")))\n    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String> prefixes = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n    // >>> add((5l), (7l))\n    // (12l)\n    public static long add(long x, long y) {\n        return x + y;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    // but now you need to eat more carrots to complete the day's meals.\n    // you should return an array array list of [ total number of eaten carrots after your meals,\n    // the number of carrots left after your meals ]\n    // if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    // Example:\n    // >>> eat((5l), (6l), (10l))\n    // (new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))\n    // >>> eat((4l), (8l), (9l))\n    // (new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))\n    // >>> eat((1l), (10l), (10l))\n    // (new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))\n    // >>> eat((2l), (11l), (5l))\n    // (new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))\n    // Variables:\n    // @number : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n    // the number of carrots that you need to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number, long need, long remaining) {\n        return null