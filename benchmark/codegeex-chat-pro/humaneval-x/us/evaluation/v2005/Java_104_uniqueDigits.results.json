{
  "name": "Java_104_uniqueDigits",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n",
  "tests": "\n    }\n    public static void main(String[] args) {\n        Problem s = new Problem();\n        List<Boolean> correct = Arrays.asList(\n                s.uniqueDigits(Arrays.asList(15, 33, 1422, 1)).equals(Arrays.asList(1, 15, 33)),\n                s.uniqueDigits(Arrays.asList(152, 323, 1422, 10)).equals(List.of()),\n                s.uniqueDigits(Arrays.asList(12345, 2033, 111, 151)).equals(Arrays.asList(111, 151)),\n                s.uniqueDigits(Arrays.asList(135, 103, 31)).equals(Arrays.asList(31, 135))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}",
  "results": [
    {
      "program": "\n\nimport java.util.*;\nimport java.lang.*;\n\nclass Problem {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> oddDigitElements = new ArrayList<>();\n        for (int i : x) {\n            boolean allOdd = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((int) c % 2 == 0) {\n                    allOdd = false;\n                    break;\n                }\n            }\n            if (allOdd) {\n                oddDigitElements.add(i);\n            }\n        }\n        Collections.sort(oddDigitElements);\n        return oddDigitElements;\n\n    }\n    public static void main(String[] args) {\n        Problem s = new Problem();\n        List<Boolean> correct = Arrays.asList(\n                s.uniqueDigits(Arrays.asList(15, 33, 1422, 1)).equals(Arrays.asList(1, 15, 33)),\n                s.uniqueDigits(Arrays.asList(152, 323, 1422, 10)).equals(List.of()),\n                s.uniqueDigits(Arrays.asList(12345, 2033, 111, 151)).equals(Arrays.asList(111, 151)),\n                s.uniqueDigits(Arrays.asList(135, 103, 31)).equals(Arrays.asList(31, 135))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}",
      "timestamp": 1732201121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}