{"name": "Java_59_largestPrimeFactor", "language": "java", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n", "completions": ["\n\n// language: Java\nimport java.util.*;\nimport java.lang.*;\n\nclass Problem {\n    public int largestPrimeFactor(int n) {\n        boolean is_prime(int k) {\n            if (k < 2) {\n                return false;\n            }\n            for (int i = 2; i < k - 1; i++) {\n                if (k % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0 && is_prime(j)) {\n                largest = Math.max(largest, j);\n            }\n        }\n        return largest;"], "tests": "\n    }\n    public static void main(String[] args) {\n        Problem s = new Problem();\n        List<Boolean> correct = Arrays.asList(\n                s.largestPrimeFactor(15) == 5,\n                s.largestPrimeFactor(27) == 3,\n                s.largestPrimeFactor(63) == 7,\n                s.largestPrimeFactor(330) == 11,\n                s.largestPrimeFactor(13195) == 29\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}"}