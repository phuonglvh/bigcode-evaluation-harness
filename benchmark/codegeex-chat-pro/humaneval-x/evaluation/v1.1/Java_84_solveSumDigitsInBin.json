{"name": "Java_84_solveSumDigitsInBin", "language": "java", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solveSumDigitsInBin(int N) {\n", "completions": ["\nimport java.util.*;\nimport java.lang.*;\n\nclass Problem {\n    public String solve(int N) {\n        return Integer.toBinaryString(Arrays.stream(String.valueOf(N).split(\"\"))\n                                             .mapToInt(Integer::parseInt)\n                                             .sum());"], "tests": "\n    }\n    public static void main(String[] args) {\n        Problem s = new Problem();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solveSumDigitsInBin(1000), \"1\"),\n                Objects.equals(s.solveSumDigitsInBin(150), \"110\"),\n                Objects.equals(s.solveSumDigitsInBin(147), \"1100\"),\n                Objects.equals(s.solveSumDigitsInBin(333), \"1001\"),\n                Objects.equals(s.solveSumDigitsInBin(963), \"10010\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}"}