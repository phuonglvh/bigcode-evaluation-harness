{
  "name": "Java_88_sortArray",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n",
  "tests": "\n    }\n    public static void main(String[] args) {\n        Problem s = new Problem();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(List.of())).equals(List.of()),\n                s.sortArray(new ArrayList<>(List.of(5))).equals(List.of(5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5))).equals(Arrays.asList(0, 1, 2, 3, 4, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5, 6))).equals(Arrays.asList(6, 5, 4, 3, 2, 1, 0)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 1))).equals(Arrays.asList(1, 2)),\n                s.sortArray(new ArrayList<>(Arrays.asList(15, 42, 87, 32 ,11, 0))).equals(Arrays.asList(0, 11, 15, 32, 42, 87)),\n                s.sortArray(new ArrayList<>(Arrays.asList(21, 14, 23, 11))).equals(Arrays.asList(23, 21, 14, 11))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}",
  "results": [
    {
      "program": "\nimport java.util.*;\n\nclass Problem {\n    public List<Integer> sortArray(List<Integer> array) {\n        return array.isEmpty() ? new ArrayList<>() : (array.get(0) + array.get(array.size() - 1)) % 2 == 0 ? new ArrayList<>(array).stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()) : new ArrayList<>(array).stream().sorted().collect(Collectors.toList());\n\n    }\n    public static void main(String[] args) {\n        Problem s = new Problem();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(List.of())).equals(List.of()),\n                s.sortArray(new ArrayList<>(List.of(5))).equals(List.of(5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5))).equals(Arrays.asList(0, 1, 2, 3, 4, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5, 6))).equals(Arrays.asList(6, 5, 4, 3, 2, 1, 0)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 1))).equals(Arrays.asList(1, 2)),\n                s.sortArray(new ArrayList<>(Arrays.asList(15, 42, 87, 32 ,11, 0))).equals(Arrays.asList(0, 11, 15, 32, 42, 87)),\n                s.sortArray(new ArrayList<>(Arrays.asList(21, 14, 23, 11))).equals(Arrays.asList(23, 21, 14, 11))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}",
      "timestamp": 1731429888,
      "stdout": "",
      "stderr": "/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpzhn956jh.java:6: error: cannot find symbol\n        return array.isEmpty() ? new ArrayList<>() : (array.get(0) + array.get(array.size() - 1)) % 2 == 0 ? new ArrayList<>(array).stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()) : new ArrayList<>(array).stream().sorted().collect(Collectors.toList());\n                                                                                                                                                                                        ^\n  symbol:   variable Collectors\n  location: class Problem\n/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpzhn956jh.java:6: error: cannot find symbol\n        return array.isEmpty() ? new ArrayList<>() : (array.get(0) + array.get(array.size() - 1)) % 2 == 0 ? new ArrayList<>(array).stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()) : new ArrayList<>(array).stream().sorted().collect(Collectors.toList());\n                                                                                                                                                                                                                                                                ^\n  symbol:   variable Collectors\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}