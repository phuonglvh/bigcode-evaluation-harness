{"name": "Java_146_specialFilter", "language": "java", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n", "completions": ["\nimport java.util.*;\n\nclass Problem {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                int[] odd_digits = {1, 3, 5, 7, 9};\n                String number_as_string = String.valueOf(num);\n                if (Arrays.stream(odd_digits).anyMatch(i -> i == Character.getNumericValue(number_as_string.charAt(0))) &&\n                    Arrays.stream(odd_digits).anyMatch(i -> i == Character.getNumericValue(number_as_string.charAt(number_as_string.length() - 1)))) {\n                    count++;\n                }\n            }\n        }\n        return count;"], "tests": "\n    }\n    public static void main(String[] args) {\n        Problem s = new Problem();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFilter(Arrays.asList(5, -2, 1, -5)) == 0,\n                s.specialFilter(Arrays.asList(15, -73, 14, -15)) == 1,\n                s.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) == 2,\n                s.specialFilter(Arrays.asList(43, -12, 93, 125, 121, 109)) == 4,\n                s.specialFilter(Arrays.asList(71, -2, -33, 75, 21, 19)) == 3,\n                s.specialFilter(List.of(1)) == 0,\n                s.specialFilter(List.of()) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}"}