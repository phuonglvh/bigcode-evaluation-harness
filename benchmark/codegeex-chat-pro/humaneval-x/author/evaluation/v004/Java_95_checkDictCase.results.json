{
  "name": "Java_95_checkDictCase",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n",
  "tests": "\n    }\n    public static void main(String[] args) {\n        Problem s = new Problem();\n        Map<Object, Object> map1 = new HashMap<>();\n        map1.put(\"p\", \"pineapple\");\n        map1.put(\"b\", \"banana\");\n        Map<Object, Object> map2 = new HashMap<>();\n        map2.put(\"p\", \"pineapple\");\n        map2.put(\"A\", \"banana\");\n        map2.put(\"B\", \"banana\");\n        Map<Object, Object> map3 = new HashMap<>();\n        map3.put(\"p\", \"pineapple\");\n        map3.put(5, \"banana\");\n        map3.put(\"a\", \"banana\");\n        Map<Object, Object> map4 = new HashMap<>();\n        map4.put(\"Name\", \"John\");\n        map4.put(\"Age\", \"36\");\n        map4.put(\"City\", \"Houston\");\n        Map<Object, Object> map5 = new HashMap<>();\n        map5.put(\"STATE\", \"NC\");\n        map5.put(\"ZIP\", \"12345\");\n        Map<Object, Object> map6 = new HashMap<>();\n        map6.put(\"fruit\", \"Orange\");\n        map6.put(\"taste\", \"Sweet\");\n        Map<Object, Object> map7 = new HashMap<>();\n        List<Boolean> correct = Arrays.asList(\n                s.checkDictCase(map1),\n                !s.checkDictCase(map2),\n                !s.checkDictCase(map3),\n                !s.checkDictCase(map4),\n                s.checkDictCase(map5),\n                s.checkDictCase(map6),\n                !s.checkDictCase(map7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}",
  "results": [
    {
      "program": "\nimport java.util.Map;\n\nclass Problem {\n    public boolean checkDictCase(Map<String, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        } else {\n            String state = \"start\";\n            for (String key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                if (state.equals(\"start\")) {\n                    if (key.equals(key.toUpperCase())) {\n                        state = \"upper\";\n                    } else if (key.equals(key.toLowerCase())) {\n                        state = \"lower\";\n                    } else {\n                        break;\n                    }\n                } else if ((state.equals(\"upper\") && !key.equals(key.toUpperCase())) || (state.equals(\"lower\") && !key.equals(key.toLowerCase()))) {\n                    state = \"mixed\";\n                    break;\n                } else {\n                    break;\n                }\n            }\n            return state.equals(\"upper\") || state.equals(\"lower\");\n        }\n\n    }\n    public static void main(String[] args) {\n        Problem s = new Problem();\n        Map<Object, Object> map1 = new HashMap<>();\n        map1.put(\"p\", \"pineapple\");\n        map1.put(\"b\", \"banana\");\n        Map<Object, Object> map2 = new HashMap<>();\n        map2.put(\"p\", \"pineapple\");\n        map2.put(\"A\", \"banana\");\n        map2.put(\"B\", \"banana\");\n        Map<Object, Object> map3 = new HashMap<>();\n        map3.put(\"p\", \"pineapple\");\n        map3.put(5, \"banana\");\n        map3.put(\"a\", \"banana\");\n        Map<Object, Object> map4 = new HashMap<>();\n        map4.put(\"Name\", \"John\");\n        map4.put(\"Age\", \"36\");\n        map4.put(\"City\", \"Houston\");\n        Map<Object, Object> map5 = new HashMap<>();\n        map5.put(\"STATE\", \"NC\");\n        map5.put(\"ZIP\", \"12345\");\n        Map<Object, Object> map6 = new HashMap<>();\n        map6.put(\"fruit\", \"Orange\");\n        map6.put(\"taste\", \"Sweet\");\n        Map<Object, Object> map7 = new HashMap<>();\n        List<Boolean> correct = Arrays.asList(\n                s.checkDictCase(map1),\n                !s.checkDictCase(map2),\n                !s.checkDictCase(map3),\n                !s.checkDictCase(map4),\n                s.checkDictCase(map5),\n                s.checkDictCase(map6),\n                !s.checkDictCase(map7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}",
      "timestamp": 1732029066,
      "stdout": "",
      "stderr": "/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpswfmm34p.java:36: error: cannot find symbol\n        Map<Object, Object> map1 = new HashMap<>();\n                                       ^\n  symbol:   class HashMap\n  location: class Problem\n/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpswfmm34p.java:39: error: cannot find symbol\n        Map<Object, Object> map2 = new HashMap<>();\n                                       ^\n  symbol:   class HashMap\n  location: class Problem\n/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpswfmm34p.java:43: error: cannot find symbol\n        Map<Object, Object> map3 = new HashMap<>();\n                                       ^\n  symbol:   class HashMap\n  location: class Problem\n/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpswfmm34p.java:47: error: cannot find symbol\n        Map<Object, Object> map4 = new HashMap<>();\n                                       ^\n  symbol:   class HashMap\n  location: class Problem\n/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpswfmm34p",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}