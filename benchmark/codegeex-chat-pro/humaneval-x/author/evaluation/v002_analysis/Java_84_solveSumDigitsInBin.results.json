{
  "name": "Java_84_solveSumDigitsInBin",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solveSumDigitsInBin(int N) {\n",
  "tests": "\n    }\n    public static void main(String[] args) {\n        Problem s = new Problem();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solve(\"AsDf\"), \"aSdF\"),\n                Objects.equals(s.solve(\"1234\"), \"4321\"),\n                Objects.equals(s.solve(\"ab\"), \"AB\"),\n                Objects.equals(s.solve(\"#a@C\"), \"#A@c\"),\n                Objects.equals(s.solve(\"#AsdfW^45\"), \"#aSDFw^45\"),\n                Objects.equals(s.solve(\"#6@2\"), \"2@6#\"),\n                Objects.equals(s.solve(\"#$a^D\"), \"#$A^d\"),\n                Objects.equals(s.solve(\"#ccc\"), \"#CCC\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}",
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nimport java.util.*;\nimport java.lang.*;\n\nclass Problem {\n    public String solve(int N) {\n        return Integer.toBinaryString(Arrays.stream(String.valueOf(N).split(\"\"))\n                                             .mapToInt(Integer::parseInt)\n                                             .sum());\n\n    }\n    public static void main(String[] args) {\n        Problem s = new Problem();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solve(\"AsDf\"), \"aSdF\"),\n                Objects.equals(s.solve(\"1234\"), \"4321\"),\n                Objects.equals(s.solve(\"ab\"), \"AB\"),\n                Objects.equals(s.solve(\"#a@C\"), \"#A@c\"),\n                Objects.equals(s.solve(\"#AsdfW^45\"), \"#aSDFw^45\"),\n                Objects.equals(s.solve(\"#6@2\"), \"2@6#\"),\n                Objects.equals(s.solve(\"#$a^D\"), \"#$A^d\"),\n                Objects.equals(s.solve(\"#ccc\"), \"#CCC\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}",
      "timestamp": 1732065046,
      "stdout": "",
      "stderr": "/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpb4r4cgqa.java:22: error: incompatible types: String cannot be converted to int\n                Objects.equals(s.solve(\"AsDf\"), \"aSdF\"),\n                                       ^\n/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpb4r4cgqa.java:23: error: incompatible types: String cannot be converted to int\n                Objects.equals(s.solve(\"1234\"), \"4321\"),\n                                       ^\n/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpb4r4cgqa.java:24: error: incompatible types: String cannot be converted to int\n                Objects.equals(s.solve(\"ab\"), \"AB\"),\n                                       ^\n/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpb4r4cgqa.java:25: error: incompatible types: String cannot be converted to int\n                Objects.equals(s.solve(\"#a@C\"), \"#A@c\"),\n                                       ^\n/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpb4r4cgqa.java:26: error: incompatible types: String cannot b",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}