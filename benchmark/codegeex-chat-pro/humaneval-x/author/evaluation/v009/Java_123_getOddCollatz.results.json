{
  "name": "Java_123_getOddCollatz",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n",
  "tests": "\n    }\n    public static void main(String[] args) {\n        Problem s = new Problem();\n        List<Boolean> correct = Arrays.asList(\n                s.getOddCollatz(14).equals(Arrays.asList(1, 5, 7, 11, 13, 17)),\n                s.getOddCollatz(5).equals(Arrays.asList(1, 5)),\n                s.getOddCollatz(12).equals(Arrays.asList(1, 3, 5)),\n                s.getOddCollatz(1).equals(List.of(1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}",
  "results": [
    {
      "program": "\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass Problem {\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        if (n % 2 != 0) {\n            oddCollatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n                if (n % 2 != 0) {\n                    oddCollatz.add(n);\n                }\n            }\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n\n    }\n    public static void main(String[] args) {\n        Problem s = new Problem();\n        List<Boolean> correct = Arrays.asList(\n                s.getOddCollatz(14).equals(Arrays.asList(1, 5, 7, 11, 13, 17)),\n                s.getOddCollatz(5).equals(Arrays.asList(1, 5)),\n                s.getOddCollatz(12).equals(Arrays.asList(1, 3, 5)),\n                s.getOddCollatz(1).equals(List.of(1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}",
      "timestamp": 1732006039,
      "stdout": "",
      "stderr": "/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpageynjei.java:28: error: cannot find symbol\n        List<Boolean> correct = Arrays.asList(\n                                ^\n  symbol:   variable Arrays\n  location: class Problem\n/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpageynjei.java:29: error: cannot find symbol\n                s.getOddCollatz(14).equals(Arrays.asList(1, 5, 7, 11, 13, 17)),\n                                           ^\n  symbol:   variable Arrays\n  location: class Problem\n/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpageynjei.java:30: error: cannot find symbol\n                s.getOddCollatz(5).equals(Arrays.asList(1, 5)),\n                                          ^\n  symbol:   variable Arrays\n  location: class Problem\n/var/folders/lb/nqc5cbfd3yb2jjr65__gy1gm0000gn/T/tmpageynjei.java:31: error: cannot find symbol\n                s.getOddCollatz(12).equals(Arrays.asList(1, 3, 5)),\n                                           ^\n  symbol:   variable Arrays\n  location: class Probl",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}