[["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for(char c : text.toCharArray()) {\n            if(\"aeiou\".indexOf(c) == -1)\n                sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String output = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (!(vowels.contains(String.valueOf(text.charAt(i))))) {\n                output += text.charAt(i);\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return new String(text.chars().filter(i -> !\"aeiou\".contains(Character.toString((char) i))).toArray());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (\"aeiouAEIOU\".indexOf(c) < 0)\n                sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        char[] chars = text.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (vowels.indexOf(chars[i]) != -1) {\n                chars[i] = ' ';\n            }\n        }\n        return new String(chars).replaceAll(\"\\\\s+\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.chars().filter(c -> !\"aeiouAEIOU\".indexOf(c) >= 0).mapToObj(c -> (char)c).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String str1=\"\";\n        for(int i=0;i<text.length();i++){\n            char ch=text.charAt(i);\n            if(ch=='A' || ch=='a' || ch=='E' || ch=='e' || ch=='I' || ch=='i' || ch=='O' || ch=='o' || ch=='U' || ch=='u')\n                continue;\n            str1+=ch;\n        }\n        return str1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for(char c: text.toCharArray()) {\n            if(!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        char[] chars = text.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (char c : chars) {\n            if (!isVowel(c))\n                sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder output = new StringBuilder();\n        for (char c: text.toCharArray())\n            if (vowels.indexOf(c) == -1)\n                output.append(c);\n        return output.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // write code here\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != 'a' && text.charAt(i) != 'e' && text.charAt(i) != 'i' && text.charAt(i) != 'o' && text.charAt(i) != 'u' && text.charAt(i) != 'A' && text.charAt(i) != 'E' && text.charAt(i) != 'I' && text.charAt(i) != 'O' && text.charAt(i) != 'U') {\n                result += text.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String result = \"\";\n        int i;\n        int j = 0;\n        for (i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != 'a' && text.charAt(i) != 'e' && text.charAt(i) != 'i' && text.charAt(i) != 'o' && text.charAt(i) != 'u') {\n                result += text.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuilder newText = new StringBuilder();\n        for(int i = 0; i < text.length(); i++) {\n            if(vowels.indexOf(text.charAt(i)) == -1) {\n                newText.append(text.charAt(i));\n            }\n        }\n        return newText.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        String text_without_vowels = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                text_without_vowels += text.charAt(i);\n            }\n        }\n        return text_without_vowels;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        char[] textChar = text.toCharArray();\n        StringBuilder newText = new StringBuilder();\n        for(int i = 0; i < textChar.length; i++){\n            if(vowels.indexOf(textChar[i]) == -1) {\n                newText.append(textChar[i]);\n            }\n        }\n        return newText.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        char[] chars = text.toCharArray();\n        StringBuilder res = new StringBuilder();\n        for(char c : chars) {\n            boolean found = false;\n            for(char v : vowels) {\n                if(c == v) {\n                    found = true;\n                    break;\n                }\n            }\n            if(!found) {\n                res.append(c);\n            }\n        }\n        return res.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                builder.append(text.charAt(i));\n            }\n        }\n        return builder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // HINT: use 'for' and 'if' to get all the letters and check if it's a vowel\n        String answer = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (!isVowel(text.substring(i, i + 1))) {\n                answer += text.substring(i, i + 1);\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (!text.charAt(i) == 'a' || !text.charAt(i) == 'e' || !text.charAt(i) == 'i' || !text.charAt(i) == 'o' || !text.charAt(i) == 'u') {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        if (text.equals(\"\")) {\n            return \"\";\n        }\n        return text.replace(\"a\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"o\", \"\").replace(\"u\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuilder output = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                output.append(text.charAt(i));\n            }\n        }\n        return output.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // return text.replaceAll(\"[aeiou]\", \"\");\n        return text.replaceAll(\"[aeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuffer result = new StringBuffer(\"\");\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == 'a' || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' || text.charAt(i) == 'u') {\n                result.append(\"\");\n            } else {\n                result.append(text.charAt(i));\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String r = \"\";\n        String vowels = \"aeiou\";\n        for (char c : text.toCharArray()) {\n            if (!vowels.contains(c + \"\"))\n                r += c;\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        char[] c = text.toCharArray();\n        for(int i = 0; i < c.length; i++){\n            if(c[i] == 'a' || c[i] == 'e' || c[i] == 'i' || c[i] == 'o' || c[i] == 'u' || c[i] == 'A' || c[i] == 'E' || c[i] == 'I' || c[i] == 'O' || c[i] == 'U'){\n                c[i] = ' ';\n            }\n        }\n        return new String(c).replace(\" \", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String ret = \"\";\n        for (char c : text.toCharArray()) {\n            if (\"aeiou\".indexOf(c) < 0) {\n                ret += c;\n            }\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if(!(\"aeiouAEIOU\".contains(String.valueOf(c))))\n                sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == 'a' || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' || text.charAt(i) == 'u') {\n                continue;\n            } else {\n                result += text.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String result = \"\";\n        for (char c : text.toCharArray()) {\n            if (!\"aeiou\".contains(c + \"\")) result += c;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.chars().filter(x -> {\n            char c = (char)x;\n            return c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u';\n        }).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuffer res = new StringBuffer();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1)\n                res.append(text.charAt(i));\n        }\n        return res.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // write your code here\n        String ans = \"\";\n        String s = \"aeiouAEIOU\";\n        for (int i = 0; i < text.length(); i++) {\n            if (s.indexOf(text.charAt(i)) == -1) {\n                ans += text.charAt(i);\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"AEIOUaeiou\";\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) < 0) {\n                res.append(text.charAt(i));\n            }\n        }\n        return res.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder b = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                b.append(c);\n            }\n        }\n        return b.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String res = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1)\n                res += text.charAt(i);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // Deliberate error to allow submission with an error.\n        // return \"\";\n        String output = \"\";\n        for (char ch : text.toCharArray()) {\n            if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u') {\n                output += ch;\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        if (text == null || text.length() == 0) {\n            return text;\n        }\n        text = text.toLowerCase();\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != 'a' && text.charAt(i) != 'e' && text.charAt(i) != 'i' && text.charAt(i) != 'o' && text.charAt(i) != 'u') {\n                result.append(text.charAt(i));\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (char c : text.toCharArray()) {\n            if (vowels.indexOf(c) == -1) {\n                result = result + c;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            boolean found = false;\n            for (int j = 0; j < vowels.length; j++) {\n                if (text.charAt(i) == vowels[j].charAt(0)) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                result += String.valueOf(text.charAt(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        if (text.length() == 0) return \"\";\n        char[] chars = text.toCharArray();\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char ch = chars[i];\n            if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u' && ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U') {\n                result += ch;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder newText = new StringBuilder();\n        for (char i : text.toCharArray()) {\n            if (vowels.indexOf(i) == -1) {\n                newText.append(i);\n            }\n        }\n        return newText.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder out = new StringBuilder(text.length());\n        for(int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            if(ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u')\n                out.append(ch);\n        }\n        return out.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (vowels.indexOf(c) == -1) result.append(c);\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String result = \"\";\n        char[] textArray = text.toCharArray();\n        for (int i = 0; i < textArray.length; i++) {\n            if (textArray[i] == 'a' || textArray[i] == 'e' || textArray[i] == 'i' || textArray[i] == 'o' || textArray[i] == 'u' || textArray[i] == 'A' || textArray[i] == 'E' || textArray[i] == 'I' || textArray[i] == 'O' || textArray[i] == 'U') {\n                continue;\n            }\n            result += textArray[i];\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        char[] charList = text.toCharArray();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == 'a' || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' || text.charAt(i) == 'u' || text.charAt(i) == 'A' || text.charAt(i) == 'E' || text.charAt(i) == 'I' || text.charAt(i) == 'O' || text.charAt(i) == 'U') {\n                charList[i] = ' ';\n            }\n        }\n        return new String(charList).replace(\" \", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder vowels = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowels.append(c);\n            }\n        }\n        return text.replace(vowels.toString(), \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (Arrays.binarySearch(vowels, c) < 0)\n                result.append(c);\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder ans = new StringBuilder();\n        for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                continue;\n            } else {\n                ans.append(c);\n            }\n        }\n        return ans.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == 'a' || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' || text.charAt(i) == 'u') {\n                continue;\n            }\n            sb.append(text.charAt(i));\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        text = text.replace(\"a\", \"\");\n        text = text.replace(\"e\", \"\");\n        text = text.replace(\"i\", \"\");\n        text = text.replace(\"o\", \"\");\n        text = text.replace(\"u\", \"\");\n        text = text.replace(\"A\", \"\");\n        text = text.replace(\"E\", \"\");\n        text = text.replace(\"I\", \"\");\n        text = text.replace(\"O\", \"\");\n        text = text.replace(\"U\", \"\");\n        return text;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String newString = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == 'a' || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' || text.charAt(i) == 'u' || text.charAt(i) == 'A' || text.charAt(i) == 'E' || text.charAt(i) == 'I' || text.charAt(i) == 'O' || text.charAt(i) == 'U') {\n                newString += \"\";\n            } else {\n                newString += text.charAt(i);\n            }\n        }\n        return newString;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return \"\" + text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // Write your code here.\n        StringBuffer result = new StringBuffer();\n        for(int i = 0; i < text.length(); i++){\n            char ch = text.charAt(i);\n            if(ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u' && ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U'){\n                result.append(ch);\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1)\n                sb.append(text.charAt(i));\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder builder = new StringBuilder(text);\n        for(int i = 0; i < builder.length(); ++i)\n            if(isVowel(builder.charAt(i)))\n                builder.deleteCharAt(i--);\n        return builder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u') {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        char[] c = text.toCharArray();\n        int i = 0;\n        for (char a : c) {\n            if ((a == 'a') || (a == 'e') || (a == 'i') || (a == 'o') || (a == 'u') || (a == 'A') || (a == 'E') || (a == 'I') || (a == 'O') || (a == 'U')) {\n                continue;\n            }\n            c[i] = a;\n            i++;\n        }\n        return new String(c, 0, i);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        char[] c = text.toCharArray();\n        StringBuffer b = new StringBuffer();\n        for (char ch : c) {\n            if ((ch != 'a') && (ch != 'e') && (ch != 'i') && (ch != 'o') && (ch != 'u'))\n                b.append(ch);\n        }\n        return b.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder newString = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (!isVowel(text.charAt(i))) {\n                newString.append(text.charAt(i));\n            }\n        }\n        return newString.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"AEIOUaeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (!(text.charAt(i) == 'a' || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' || text.charAt(i) == 'u')) {\n                result += text.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuffer newText = new StringBuffer();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) != -1) {\n            } else {\n                newText.append(text.charAt(i));\n            }\n        }\n        return newText.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return \"\" + text.chars().filter(ch -> \"aeiou\".indexOf(ch) < 0).mapToObj(ch -> (char) ch).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return \"\" + new StringBuffer(text).replaceAll(\"[aeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        text = text.replaceAll(\"[aeiou]\", \"\");\n        return text;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                result = result + c;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if(vowels.indexOf(c) == -1) sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result.append(c);\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        for (int i = 0; i < vowels.length(); i++) {\n            text = text.replaceAll(\"[\" + vowels.charAt(i) + \"]\", \"\");\n        }\n        return text;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return Arrays.stream(text.split(\"\")).filter(c -> !c.matches(\"[aeiou]\")).reduce(\"\", String::concat);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String res = \"\";\n        for (char ch: text.toCharArray()) {\n            if (!(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')) {\n                res += ch;\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        char[] ch = text.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < ch.length; i++) {\n            if (ch[i] != 'a' && ch[i] != 'e' && ch[i] != 'i' && ch[i] != 'o' && ch[i] != 'u' && ch[i] != 'A' && ch[i] != 'E' && ch[i] != 'I' && ch[i] != 'O' && ch[i] != 'U') {\n                sb.append(ch[i]);\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"(?i)[aeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result.append(c);\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // filter out vowels\n        return text.chars().filter(ch -> !\"aeiou\".contains(new String(new char[]{(char)ch}))).mapToObj(ch -> (char)ch).map(String::valueOf).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        int text_length = text.length();\n        String vowels = \"aeiouAEIOU\";\n        String final_text = \"\";\n        for (int i = 0; i < text_length; i++) {\n            if (vowels.indexOf(text.charAt(i)) < 0) {\n                final_text += text.charAt(i);\n            }\n        }\n        return final_text;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        int i = 0;\n        int j = 0;\n        String n = \"\";\n        while (i <= text.length()-1) {\n            if (text.charAt(i) == 'a' || text.charAt(i) == 'A') {\n                i++;\n                j++;\n            }\n            else if (text.charAt(i) == 'e' || text.charAt(i) == 'E') {\n                i++;\n                j++;\n            }\n            else if (text.charAt(i) == 'i' || text.charAt(i) == 'I') {\n                i++;\n                j++;\n            }\n            else if (text.charAt(i) == 'o' || text.charAt(i) == 'O') {\n                i++;\n                j++;\n            }\n            else if (text.charAt(i) == 'u' || text.charAt(i) == 'U') {\n                i++;\n                j++;\n            }\n            else {\n                n = n + text.charAt(i);\n                i++;\n            }\n        }\n        return n;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == 'a' || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' || text.charAt(i) == 'u') {\n                continue;\n            }\n            sb.append(text.charAt(i));\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiou]\",\"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\",\"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n                sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        if (text.length() == 0)\n            return \"\";\n        StringBuilder sb = new StringBuilder();\n        for (char ch: text.toCharArray())\n            if (!(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U'))\n                sb.append(ch);\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // Your code here\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++){\n            if (!isVowel(text.charAt(i))){\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuffer ans = new StringBuffer();\n        for(char c: text.toCharArray()) {\n            if(vowels.indexOf(c) == -1) ans.append(c);\n        }\n        return ans.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return Arrays.stream(text.split(\"\")).filter(x -> !Arrays.asList('a', 'e', 'i', 'o', 'u').contains(x.charAt(0))).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        int i = 0;\n        for (; i < text.length(); i++) {\n            if (\"aeiou\".contains(text.substring(i, 1))) break;\n        }\n        if (i == text.length()) return text;\n        else return text.substring(0, i) + removeVowels(text.substring(i + 1));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // BEGIN\n        char[] chars = text.toLowerCase().toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (char ch : chars) {\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                continue;\n            } else {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n        // END", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String ans = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n                ans += c;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String ret = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!vowels.contains(Character.toString(c))) {\n                ret += c;\n            }\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u' &&\n                ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U') {\n                res.append(ch);\n            }\n        }\n        return res.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for(int i = 0; i < text.length(); i++) {\n            if(vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // Write your code here\n        String vowels = \"aeiou\";\n        StringBuffer stringBuffer = new StringBuffer(text.length());\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                stringBuffer.append(text.charAt(i));\n            }\n        }\n        return stringBuffer.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        char[] chars = text.toCharArray();\n        StringBuilder ans = new StringBuilder();\n        for (char c : chars) {\n            if (vowels.indexOf(c) == -1) {\n                ans.append(c);\n            }\n        }\n        return ans.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        char[] charArray = text.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            for (int j = 0; j < vowels.length(); j++) {\n                if (vowels.charAt(j) == charArray[i]) {\n                    charArray[i] = ' ';\n                }\n            }\n        }\n        text = new String(charArray);\n        return text.replace(\" \", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return new String(text.chars().filter(c -> \"aeiou\".indexOf(text.charAt(c)) == -1).mapToObj(c -> text.charAt(c)).toArray(Character[]::new));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray())\n            if (!isVowel(c))\n                result.append(c);\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // put your code here\n        return text.replaceAll(\"[aeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        return Stream.of(text.split(\"\")).filter(x -> !vowels.contains(x)).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!vowels.contains(String.valueOf(c).toLowerCase())) {\n                result.append(c);\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < text.length(); ++i) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n                res.append(c);\n        }\n        return res.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                continue;\n            }\n            sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        return text.replaceAll(\"[\" + vowels + \"]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (! (\"aeiouAEIOU\".indexOf(c) > -1)) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder res = new StringBuilder();\n        for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if(!isVowel(c)) {\n                res.append(c);\n            }\n        }\n        return res.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == 'a' || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' || text.charAt(i) == 'u' || text.charAt(i) == 'A' || text.charAt(i) == 'E' || text.charAt(i) == 'I' || text.charAt(i) == 'O' || text.charAt(i) == 'U') {\n                continue;\n            }\n            result += text.charAt(i);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) sb.append(text.charAt(i));\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder temp = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != 'a' && text.charAt(i) != 'e' && text.charAt(i) != 'i' && text.charAt(i) != 'o' && text.charAt(i) != 'u') {\n                temp.append(text.charAt(i));\n            }\n        }\n        return temp.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (!Arrays.asList('a', 'e', 'i', 'o', 'u').contains(text.charAt(i))) {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        char[] textChars = text.toCharArray();\n        String result = \"\";\n        for (int i = 0; i < textChars.length; i++) {\n            if (!(\"aeiou\".contains(textChars[i] + \"\"))) {\n                result += textChars[i];\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"AEIOUaeiou\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1)\n                sb.append(text.charAt(i));\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        StringBuilder sb = new StringBuilder(text);\n        for (int i = 0; i < text.length(); i++) {\n            for (int j = 0; j < vowels.length; j++) {\n                if (sb.charAt(i) == vowels[j]) {\n                    sb.deleteCharAt(i);\n                    break;\n                }\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuilder result = new StringBuilder();\n        for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if(vowels.indexOf(c) == -1) {\n                result.append(c);\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String pattern = \"[aeiouAEIOU]\";\n        String output = text.replaceAll(pattern, \"\");\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        if (text.isEmpty()) {\n            return text;\n        } else {\n            String temp = text.substring(1);\n            if (isVowel(text.charAt(0))) {\n                return removeVowels(temp);\n            } else {\n                return text.charAt(0) + removeVowels(temp);\n            }\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String new_text = \"\";\n        for(int i=0; i<text.length(); i++) {\n            if(text.charAt(i) == 'a' || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' || text.charAt(i) == 'u') {\n                continue;\n            }\n            new_text += text.charAt(i);\n        }\n        return new_text;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // start writing your code here\n        // remove all vowels\n        String s = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (!isVowel(text.charAt(i))) {\n                s = s + text.charAt(i);\n            }\n        }\n        return s;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        text = text.replace(\"a\", \"\");\n        text = text.replace(\"A\", \"\");\n        text = text.replace(\"e\", \"\");\n        text = text.replace(\"E\", \"\");\n        text = text.replace(\"i\", \"\");\n        text = text.replace(\"I\", \"\");\n        text = text.replace(\"o\", \"\");\n        text = text.replace(\"O\", \"\");\n        text = text.replace(\"u\", \"\");\n        text = text.replace(\"U\", \"\");\n        return text;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for(int i=0;i<text.length();i++){\n            if(vowels.indexOf(text.charAt(i))==-1) result+=text.charAt(i);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        for (char c: text.toCharArray()) {\n            if (! Arrays.asList(vowels).contains(c))\n                sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder newText = new StringBuilder(text);\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.contains(String.valueOf(text.charAt(i)))) {\n                newText.deleteCharAt(i);\n            }\n        }\n        return newText.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<text.length();i++){\n            if(text.charAt(i) != 'a' && text.charAt(i) != 'e' && text.charAt(i) != 'i' && text.charAt(i) != 'o' && text.charAt(i) != 'u'){\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        text = text.replaceAll(\"[aeiouAEIOU]\", \"\");\n        return text;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String filteredText = \"\";\n        for(int i = 0; i < text.length(); i++) {\n            String currentChar = \"\" + text.charAt(i);\n            if(!vowels.contains(currentChar)) filteredText += currentChar;\n        }\n        return filteredText;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // Write your code here\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!(\"aeiou\".contains(c + \"\"))) {\n                result.append(c);\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        StringBuilder output = new StringBuilder(\"\");\n        for (char c : text.toCharArray())\n            if (!Arrays.asList(vowels).contains(c))\n                output.append(c);\n        return output.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result.append(text.charAt(i));\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder textBuilder = new StringBuilder(text);\n        for (char c : text.toCharArray()) {\n            if (isVowel(c)) {\n                textBuilder.deleteCharAt(textBuilder.indexOf(c));\n            }\n        }\n        return textBuilder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String newText = \"\";\n        for(int i = 0; i < text.length(); i++) {\n            if(!isVowel(text.charAt(i))) {\n                newText += text.charAt(i);\n            }\n        }\n        return newText;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuffer newSentence = new StringBuffer();\n        for(int i = 0; i < text.length(); i++) {\n            if(text.charAt(i) == 'a' || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' || text.charAt(i) == 'u' || text.charAt(i) == 'A' || text.charAt(i) == 'E' || text.charAt(i) == 'I' || text.charAt(i) == 'O' || text.charAt(i) == 'U') {\n                continue;\n            }\n            else {\n                newSentence.append(text.charAt(i));\n            }\n        }\n        return newSentence.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // Remove vowels from text.\n        text = text.replace(\"a\", \"\");\n        text = text.replace(\"e\", \"\");\n        text = text.replace(\"i\", \"\");\n        text = text.replace(\"o\", \"\");\n        text = text.replace(\"u\", \"\");\n        text = text.replace(\"A\", \"\");\n        text = text.replace(\"E\", \"\");\n        text = text.replace(\"I\", \"\");\n        text = text.replace(\"O\", \"\");\n        text = text.replace(\"U\", \"\");\n        return text;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\",\"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        return text.replaceAll(\"[\" + vowels + \"]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (!vowels.contains(text.substring(i, i + 1)))\n                sb.append(text.substring(i, i + 1));\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder newString = new StringBuilder(text);\n        String vowels = \"aeiouAEIOU\";\n        for (int i = 0; i < text.length(); i++) {\n            char currentChar = newString.charAt(i);\n            if (vowels.contains(\"\" + currentChar)) {\n                newString = newString.deleteCharAt(i);\n                i--;\n            }\n        }\n        return newString.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String result = \"\";\n        for(int i = 0; i < text.length(); i++) {\n            if(!isVowel(text.substring(i, i + 1))) result += text.substring(i, i + 1);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (isVowel(text.charAt(i))) {\n                result += \"\";\n            } else {\n                result += text.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // Replace \"return \" with your code\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String res = \"\";\n        for(int i = 0; i < text.length(); i++) {\n            if(!vowels.contains(String.valueOf(text.charAt(i)))) {\n                res += String.valueOf(text.charAt(i));\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String output = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            if (ch == 'a' || ch == 'A' || ch == 'e' || ch == 'E' || ch == 'i' || ch == 'I' || ch == 'o' || ch == 'O' || ch == 'u' || ch == 'U') {\n            } else {\n                output += ch;\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        char[] textChars = text.toCharArray();\n        List<Character> vowels = new ArrayList<>(Arrays.asList('a','e','i','o','u','A','E','I','O','U'));\n        String res = \"\";\n        for(int i = 0; i < textChars.length; i++) {\n            char c = textChars[i];\n            if(!vowels.contains(c)) {\n                res += c;\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == 'a' || text.charAt(i) == 'A' || text.charAt(i) == 'e' || text.charAt(i) == 'E' || text.charAt(i) == 'i' || text.charAt(i) == 'I' || text.charAt(i) == 'o' || text.charAt(i) == 'O' || text.charAt(i) == 'u' || text.charAt(i) == 'U')\n                result += \"\";\n            else\n                result += text.charAt(i);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[AEIOUaeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder newString = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char letter = text.charAt(i);\n            if (letter != 'a' && letter != 'e' && letter != 'i' && letter != 'o' && letter != 'u' && letter != 'A' && letter != 'E' && letter != 'I' && letter != 'O' && letter != 'U') {\n                newString.append(letter);\n            }\n        }\n        return newString.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuffer newText = new StringBuffer();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                newText.append(text.charAt(i));\n            }\n        }\n        return newText.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String ret = \"\";\n        for (int i = 0; i < text.length(); i++)\n        {\n            if (!(\"aeiouAEIOU\").contains(Character.toString(text.charAt(i))))\n                ret += text.charAt(i);\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result.append(c);\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for(int i=0; i<text.length(); i++) {\n            char c = text.charAt(i);\n            if(vowels.indexOf(c) == -1) {\n                result += c;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U') {\n            }\n            else {\n                result = result + c;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String withoutVowels = \"\";\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                withoutVowels += c;\n            }\n        }\n        return withoutVowels;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String str = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (!(\"aeiou\".contains(text.substring(i, i + 1)))) {\n                str += text.substring(i, i + 1);\n            }\n        }\n        return str;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        text = text.replaceAll(\"[aeiouAEIOU]\", \"\");\n        return text;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < text.length(); i++)\n            if (vowels.indexOf(text.charAt(i)) == -1)\n                res.append(text.charAt(i));\n        return res.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sBuilder = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char letter = text.charAt(i);\n            if (letter != 'a' && letter != 'e' && letter != 'i' && letter != 'o' && letter != 'u') {\n                sBuilder.append(letter);\n            }\n        }\n        return sBuilder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        String[] arr = text.split(\"\");\n        StringBuffer ans = new StringBuffer();\n        for(int i=0; i<arr.length; i++) {\n            if(vowels.indexOf(arr[i]) == -1) {\n                ans.append(arr[i]);\n            }\n        }\n        return ans.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiou]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (\"aeiou\".indexOf(c) == -1)\n                sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String ret = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == 'a' || text.charAt(i) == 'A' || text.charAt(i) == 'e' || text.charAt(i) == 'E' || text.charAt(i) == 'i' || text.charAt(i) == 'I' || text.charAt(i) == 'o' || text.charAt(i) == 'O' || text.charAt(i) == 'u' || text.charAt(i) == 'U') {\n                continue;\n            }\n            ret += text.charAt(i);\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for (int i = 0; i < text.length(); i++) {\n            for (int j = 0; j < vowels.length; j++) {\n                if (text.charAt(i) == vowels[j]) {\n                    text = text.substring(0, i) + text.substring(i + 1);\n                    i--;\n                    break;\n                }\n            }\n        }\n        return text;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        text = text.toLowerCase();\n        StringBuilder ans = new StringBuilder(\"\");\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == 'a' || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' || text.charAt(i) == 'u') {\n                continue;\n            }\n            ans.append(text.charAt(i));\n        }\n        return ans.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String res = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != 'a' && text.charAt(i) != 'e' && text.charAt(i) != 'i' && text.charAt(i) != 'o' && text.charAt(i) != 'u') {\n                res += text.charAt(i);\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        return new StringBuilder(text).chars().filter(i -> \"aeiou\".indexOf((char)i) == -1).mapToObj(i -> (char)i).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (vowels.indexOf(c) < 0) {\n                result = result + c;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        char[] myArray = text.toLowerCase().toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (char c : myArray) {\n            if (!(vowels.contains(String.valueOf(c)))) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        // insert your code here\n        String ans = \"\";\n        for(char c : text.toCharArray()){\n            if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'){\n                ans += c;\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder stringBuilder = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')) {\n                stringBuilder.append(c);\n            }\n        }\n        return stringBuilder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!vowels.contains(String.valueOf(c))) {\n                result.append(c);\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String newtext = \"\";\n        for(int i = 0; i < text.length(); i++){\n            if(vowels.indexOf(text.charAt(i)) < 0)\n                newtext += text.charAt(i);\n        }\n        return newtext;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n        StringBuilder ans = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')) {\n                ans.append(c);\n            }\n        }\n        return ans.toString();"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) {\n            return lst;\n        }\n        ArrayList<Long> arr = new ArrayList<Long>();\n        int index = 0;\n        while (index < lst.size()) {\n            int min = 0;\n            for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(min) > lst.get(i)) {\n                    min = i;\n                }\n            }\n            arr.add(lst.remove(min));\n            index++;\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        if (lst.size() == 0) return res;\n        ArrayList<Long> copy = new ArrayList<Long>(lst);\n        ArrayList<Long> temp = new ArrayList<Long>();\n        int size = copy.size();\n        int j = 0;\n        while (j < size) {\n            temp.add(Collections.min(copy));\n            copy.remove(Collections.min(copy));\n            j++;\n        }\n        size = temp.size();\n        j = 0;\n        while (j < size) {\n            res.add(Collections.max(temp));\n            temp.remove(Collections.max(temp));\n            j++;\n        }\n        while (j < size) {\n            res.add(Collections.min(temp));\n            temp.remove(Collections.min(temp));\n            j++;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newList = new ArrayList<>();\n        if (lst.isEmpty()) {\n            return lst;\n        }\n        int length = lst.size();\n        newList.add(Collections.min(lst));\n        for (int i = 1; i < length / 2; i++) {\n            newList.add(Collections.max(lst));\n        }\n        if (length % 2 == 1) {\n            newList.add(Collections.max(lst));\n        }\n        for (int i = length / 2; i < length; i++) {\n            newList.add(Collections.min(lst));\n        }\n        return newList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) {\n            return lst;\n        }\n        ArrayList<Long> answer = new ArrayList<Long>();\n        while (lst.size() != 1) {\n            Long min = lst.stream().min(Comparator.comparingLong(i -> i)).get();\n            lst.remove(min);\n            answer.add(min);\n            Long max = lst.stream().max(Comparator.comparingLong(i -> i)).get();\n            lst.remove(max);\n            answer.add(max);\n        }\n        answer.add(lst.stream().max(Comparator.comparingLong(i -> i)).get());\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new ArrayList<>();\n        int i = 0;\n        while (i < lst.size()) {\n            long min = Long.MAX_VALUE;\n            long max = Long.MIN_VALUE;\n            for (Long val : lst) {\n                if (val < min) {\n                    min = val;\n                }\n                if (val > max) {\n                    max = val;\n                }\n            }\n            sorted.add(min);\n            lst.remove(lst.indexOf(min));\n            sorted.add(max);\n            lst.remove(lst.indexOf(max));\n            i += 2;\n        }\n        return sorted;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n            return lst;\n        }\n        ArrayList<Long> ret = new ArrayList<Long>();\n        ret.add(Collections.min(lst));\n        while (lst.size() > 1) {\n            ret.add(Collections.max(lst));\n            lst.remove(Collections.max(lst));\n            ret.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newLst = new ArrayList<Long>();\n        for(int i = 1; i <= lst.size(); i += 2) {\n            newLst.add(lst.stream().filter(n -> n == Collections.min(lst)).findFirst().get());\n            lst.remove(Collections.min(lst));\n            if(lst.size() == 0) {\n                break;\n            }\n            newLst.add(lst.stream().filter(n -> n == Collections.max(lst)).findFirst().get());\n            lst.remove(Collections.max(lst));\n        }\n        return newLst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        int n = lst.size();\n        for (int i = 0; i < n / 2 + 1; i++) {\n            res.add(lst.get(i % 2 == 0 ? i : n - i - 1));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        while (lst.size() > 0) {\n            Long min = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i) < min) {\n                    min = lst.get(i);\n                }\n            }\n            res.add(min);\n            lst.remove(lst.indexOf(min));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (lst.size() <= 1) {\n            return lst;\n        }\n        else {\n            int k = 1;\n            for (int i = 0; i < lst.size(); i += 2) {\n                if (i + 1 < lst.size()) {\n                    result.add(lst.get(i + k));\n                }\n                result.add(lst.get(i));\n                k = -k;\n            }\n            return result;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (int i = 0; i < lst.size() / 2; i++) {\n            res.add(lst.stream().min(Long::compare).get());\n            res.add(lst.stream().max(Long::compare).get());\n        }\n        if (lst.size() % 2 == 1) {\n            res.add(lst.stream().min(Long::compare).get());\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        int i = 0;\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (lst.size() > 0) {\n            Long min = Long.MAX_VALUE;\n            for (Long a : lst) {\n                if (a < min) {\n                    min = a;\n                }\n            }\n            lst.remove(lst.indexOf(min));\n            result.add(min);\n            i++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> output = new ArrayList<>();\n        while (lst.size() > 0) {\n            output.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        while (lst.size() > 0) {\n            output.add(Collections.max(lst));\n            lst.remove(Collections.max(lst));\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size() == 0) return lst;\n        if(lst.size() == 1) return lst;\n        ArrayList<Long> res = new ArrayList<Long>();\n        res.add(Collections.min(lst));\n        while(lst.size() != 0) {\n            lst.remove((long)Collections.max(lst));\n            res.add(Collections.min(lst));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) {\n            return lst;\n        }\n        ArrayList<Long> ret = new ArrayList<>();\n        ret.add(Collections.min(lst));\n        ArrayList<Long> rest = new ArrayList<>(lst);\n        rest.remove(rest.indexOf(ret.get(0)));\n        while (!rest.isEmpty()) {\n            ret.add(Collections.max(rest));\n            rest.remove(rest.indexOf(ret.get(ret.size() - 1)));\n            ret.add(Collections.min(rest));\n            rest.remove(rest.indexOf(ret.get(ret.size() - 1)));\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newLst = new ArrayList<Long>();\n        while (!lst.isEmpty()) {\n            long min = lst.get(0);\n            long max = lst.get(0);\n            for (long i : lst) {\n                if (i < min) {\n                    min = i;\n                } else if (i > max) {\n                    max = i;\n                }\n            }\n            newLst.add(min);\n            lst.remove(lst.indexOf(min));\n            newLst.add(max);\n            lst.remove(lst.indexOf(max));\n        }\n        return newLst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sortedList = new ArrayList<>(lst);\n        if (lst.size() == 0) return sortedList;\n        ArrayList<Long> reversedList = new ArrayList<>();\n        ArrayList<Long> outputList = new ArrayList<>();\n        // Reverse the list\n        int index = 0;\n        while (lst.size() != 0) {\n            reversedList.add(lst.get(lst.size() - 1));\n            lst.remove(lst.size() - 1);\n            index++;\n        }\n        // Sort the list\n        Collections.sort(reversedList);\n        // Get the minimum value\n        Long minValue = reversedList.get(0);\n        // Iterate over the reversedList and add it to outputList\n        for (Long value : reversedList) {\n            if (value != minValue) {\n                outputList.add(value);\n            }\n        }\n        // Add the minimumValue\n        outputList.add(minValue);\n        return outputList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> out = new ArrayList<Long>();\n        while (lst.size() > 0) {\n            out.add(lst.stream().min(Long::compareTo).get());\n            lst.remove(lst.indexOf(lst.stream().min(Long::compareTo).get()));\n            out.add(lst.stream().max(Long::compareTo).get());\n            lst.remove(lst.indexOf(lst.stream().max(Long::compareTo).get()));\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n        while(lst.size() != 0) {\n            sorted.add(lst.stream().min(Comparator.naturalOrder()).get());\n            lst.remove(lst.stream().min(Comparator.naturalOrder()).get());\n        }\n        return sorted;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> rtn = new ArrayList<Long>();\n        if (lst.size() == 0) {\n            return rtn;\n        }\n        if (lst.size() == 1) {\n            rtn.add(lst.get(0));\n            return rtn;\n        }\n        Long min = lst.stream().min(Long::compareTo).get();\n        Long max = lst.stream().max(Long::compareTo).get();\n        rtn.add(min);\n        rtn.add(max);\n        lst.remove(min);\n        lst.remove(max);\n        while (lst.size() > 0) {\n            min = lst.stream().min(Long::compareTo).get();\n            max = lst.stream().max(Long::compareTo).get();\n            rtn.add(min);\n            rtn.add(max);\n            lst.remove(min);\n            lst.remove(max);\n        }\n        return rtn;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(Collections.min(lst));\n        lst.remove(Collections.min(lst));\n        while(lst.size() > 0) {\n            result.add(Collections.max(lst));\n            lst.remove(Collections.max(lst));\n            result.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // Start coding here\n        ArrayList<Long> sorted = new ArrayList<>(lst);\n        sorted.sort(null);\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (i % 2 == 0) {\n                result.add(sorted.get(i));\n            } else {\n                result.add(sorted.get(sorted.size() - 1 - i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> ret = new ArrayList<>();\n        while(lst.size() != 0){\n            ret.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> l = new ArrayList<>();\n        l.addAll(lst);\n        long min = Collections.min(l);\n        ArrayList<Long> r = new ArrayList<>();\n        r.add(min);\n        l.remove(l.indexOf(min));\n        while(!l.isEmpty()) {\n            long max = Collections.max(l);\n            r.add(max);\n            l.remove(l.indexOf(max));\n            min = Collections.min(l);\n            r.add(min);\n            l.remove(l.indexOf(min));\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sortedList = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n        int position = 0;\n        while (lst.size() > 0) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i) > max) {\n                    max = lst.get(i);\n                    position = i;\n                }\n            }\n            sortedList.add(lst.get(position));\n            lst.remove(position);\n            max = Long.MIN_VALUE;\n            position = 0;\n        }\n        return sortedList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> out = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); ++i) {\n            int idx = i;\n            long max = lst.get(idx);\n            for (int j = i; j < lst.size(); ++j) {\n                if (lst.get(j) < max) {\n                    max = lst.get(j);\n                    idx = j;\n                }\n            }\n            out.add(max);\n            lst.remove(idx);\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // Put your code here\n        // Set up the arraylist, and use .get and .set to change the order\n        // of the arraylist.\n        ArrayList<Long> newLst = new ArrayList<Long>();\n        while(lst.size() > 0){\n            long min = Long.MAX_VALUE;\n            for(long x : lst){\n                if(x < min){\n                    min = x;\n                }\n            }\n            lst.remove(new Integer(lst.indexOf(min)));\n            newLst.add(min);\n        }\n        return newLst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(lst.size() == 0) return result;\n        ArrayList<Long> copy = (ArrayList<Long>)lst.clone();\n        int curMax = Collections.max(copy);\n        int curMin = Collections.min(copy);\n        while(!copy.isEmpty()){\n            result.add(Long.valueOf(curMin));\n            copy.remove(Long.valueOf(curMin));\n            result.add(Long.valueOf(curMax));\n            copy.remove(Long.valueOf(curMax));\n            curMin = Collections.min(copy);\n            curMax = Collections.max(copy);\n        }\n        return result;\n    }    \n}\n\nclass Solution {\n\n    public static void main(String[] args) {\n        \n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        ArrayList<Long> unsorted = new ArrayList<Long>();\n        for(int unsorted_i=0; unsorted_i < n; unsorted_i++){\n            unsorted.add(in.nextLong());\n        }\n        ArrayList<Long> result = Problem.strangeSortList(unsorted);\n        for(Long i: result){\n            System.out.print(i+\" \");\n        }\n        System.out.println(\"\");\n        in.close();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size() == 0) return lst;\n        ArrayList<Long> ans = new ArrayList<Long>();\n        ans.add(Collections.min(lst));\n        while(lst.size() > 0){\n            ArrayList<Long> tmp = new ArrayList<Long>();\n            for(long i : lst) tmp.add(i);\n            tmp.removeAll(ans);\n            ans.add(Collections.max(tmp));\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (lst.size() > 0) {\n            result.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        while (result.size() > 0) {\n            result.add(Collections.max(result));\n            result.remove(Collections.max(result));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(lst.size() == 0){\n            return result;\n        }\n        for(int i = 0; i < lst.size()/2+1; i++){\n            result.add(lst.get(lst.size()-i-1));\n            result.add(lst.get(i));\n        }\n        if(lst.size()%2 != 0){\n            result.add(lst.get(lst.size()/2));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        if (lst.size() == 1) {\n            return lst;\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(Collections.min(lst));\n        while (lst.size() > 1) {\n            lst.remove(Collections.min(lst));\n            result.add(Collections.max(lst));\n            lst.remove(Collections.max(lst));\n            result.add(Collections.min(lst));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> new_lst = new ArrayList<Long>();\n        int num = 0;\n        int index = 0;\n        while (num < lst.size()) {\n            int temp = 0;\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i) < lst.get(index)) {\n                    temp = i;\n                }\n            }\n            new_lst.add(lst.get(temp));\n            index = temp;\n            lst.remove(temp);\n            num++;\n        }\n        return new_lst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size() < 2) {\n            return lst;\n        }\n        ArrayList<Long> sorted = new ArrayList<Long>();\n        sorted.add(Collections.min(lst));\n        while(lst.size() > 0) {\n            lst.remove(Collections.max(lst));\n            sorted.add(Collections.min(lst));\n        }\n        return sorted;\n    }    \n}\n", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < lst.size(); i++) {\n            result.add(0l, lst.get(lst.indexOf(lst.stream().min((i1, i2) -> Long.compare(i1, i2)).get())));\n            lst.remove(lst.indexOf(lst.stream().min((i1, i2) -> Long.compare(i1, i2)).get()));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ListIterator<Long> iter = lst.listIterator();\n        ArrayList<Long> rtn = new ArrayList<>();\n        while(iter.hasNext()) {\n            iter.next();\n            iter.remove();\n        }\n        while(!lst.isEmpty()) {\n            Long min = Collections.min(lst);\n            rtn.add(min);\n            lst.remove(min);\n        }\n        return rtn;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size() == 0) return lst;\n        else if(lst.size() == 1) return lst;\n        else {\n            ArrayList<Long> outList = new ArrayList<Long>();\n            Long firstLargest = Collections.max(lst);\n            outList.add(Collections.min(lst));\n            outList.add(firstLargest);\n            lst.remove(Collections.max(lst));\n            lst.remove(Collections.min(lst));\n            while(!(lst.isEmpty())) {\n                outList.add(Collections.max(lst));\n                outList.add(Collections.min(lst));\n                lst.remove(Collections.max(lst));\n                lst.remove(Collections.min(lst));\n            }\n            return outList;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n        for (Long i : lst) {\n            min = Math.min(min, i);\n            max = Math.max(max, i);\n        }\n        ArrayList<Long> min_lst = new ArrayList<>();\n        ArrayList<Long> max_lst = new ArrayList<>();\n        for (Long i : lst) {\n            if (i == min) {\n                min_lst.add(i);\n            } else if (i == max) {\n                max_lst.add(i);\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                res.add(min_lst.get(i / 2));\n            } else {\n                res.add(max_lst.get(i / 2));\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> ret = new ArrayList<Long>(lst);\n        if(ret.size()==1) return ret;\n        ArrayList<Long> min=new ArrayList<Long>();\n        ArrayList<Long> max=new ArrayList<Long>();\n        ArrayList<Long> rest=new ArrayList<Long>();\n        long minm=ret.get(0);\n        long maxx=ret.get(0);\n        for(int i=0;i<lst.size();i++){\n            long num=ret.get(i);\n            if(num<minm){\n                min.add(num);\n                minm=num;\n            }\n            if(num>maxx){\n                max.add(num);\n                maxx=num;\n            }\n            else\n                rest.add(num);\n        }\n        ret.clear();\n        if(max.size()>0) ret.add(max.get(0));\n        if(min.size()>1) ret.add(min.get(1));\n        if(min.size()>0) ret.add(min.get(0));\n        if(rest.size()>0) ret.add(rest.get(0));\n        for(int i=1;i<rest.size();i++){\n            ret.add(max.get(0));\n            ret.add(min.get(0));\n            ret.add(min.get(1));\n            ret.add(rest.get(i));\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // Sort the list in reverse order and return it.\n        Collections.sort(lst);\n        Collections.reverse(lst);\n        return lst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> temp = new ArrayList<Long>();\n        while(lst.size() > 0) {\n            temp.add(Collections.min(lst));\n            lst.remove((int)Collections.min(lst));\n        }\n        while(temp.size() > 0) {\n            lst.add(Collections.max(temp));\n            temp.remove((int)Collections.max(temp));\n        }\n        while(lst.size() > 0) {\n            temp.add(Collections.min(lst));\n            lst.remove((int)Collections.min(lst));\n        }\n        while(temp.size() > 0) {\n            lst.add(Collections.max(temp));\n            temp.remove((int)Collections.max(temp));\n        }\n        return lst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // your code here\n        ArrayList<Long> out=new ArrayList<>();\n        long min=lst.stream().min(Comparator.naturalOrder()).get();\n        while(lst.size()>0){\n            out.add(min);\n            lst.remove(lst.indexOf(min));\n            if(lst.size()>0){\n                long max=lst.stream().max(Comparator.naturalOrder()).get();\n                out.add(max);\n                lst.remove(lst.indexOf(max));\n            }\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> remaining = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++) {\n            remaining.add(lst.get(i));\n        }\n        while (remaining.size() > 0) {\n            result.add(Collections.min(remaining));\n            remaining.remove((Collections.min(remaining)));\n            if (remaining.size() > 0) {\n                result.add(Collections.max(remaining));\n                remaining.remove((Collections.max(remaining)));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        int size = lst.size();\n        if (size == 0)\n            return lst;\n        else {\n            ArrayList<Long> res = new ArrayList<Long>();\n            res.add(Collections.min(lst));\n            while (lst.size() != 1) {\n                Long max = Collections.max(lst);\n                lst.remove(max);\n                res.add(max);\n                Long min = Collections.min(lst);\n                lst.remove(min);\n                res.add(min);\n            }\n            res.add(lst.get(0));\n            return res;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1) return lst;\n        ArrayList<Long> result = new ArrayList<Long>(lst.size());\n        // step 1: initialize the result\n        for (int i = 0; i < lst.size(); i++) result.add((long)0);\n        // step 2: perform the sorting\n        for (int i = 0; i < lst.size(); i++) {\n            // find the minimum value\n            Long minimum = lst.stream().min((a, b) -> a.compareTo(b)).get();\n            // remove the minimum value from the lst\n            lst.remove(lst.indexOf(minimum));\n            // add it to the result\n            result.set(i, minimum);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size() == 0) return lst;\n        ArrayList<Long> new_lst = new ArrayList<Long>();\n        int n = lst.size();\n        int count = 1;\n        while(n>0){\n            int min_i = 0;\n            int max_i = 0;\n            for(int i = 0; i < lst.size(); i++){\n                if(lst.get(i) < lst.get(min_i)) min_i = i;\n                if(lst.get(i) > lst.get(max_i)) max_i = i;\n            }\n            if(count % 2 == 1){\n                new_lst.add(lst.get(min_i));\n            }\n            else{\n                new_lst.add(lst.get(max_i));\n            }\n            lst.remove(min_i);\n            lst.remove(max_i);\n            count++;\n            n -= 2;\n        }\n        return new_lst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size()<2){\n            return lst;\n        }\n        ArrayList<Long> tmp=new ArrayList<>(lst);\n        tmp.sort(null);\n        lst.clear();\n        boolean check=true;\n        while(tmp.size()>0){\n            if(check){\n                lst.add(tmp.get(0));\n                tmp.remove(0);\n                check=false;\n            }else{\n                lst.add(tmp.get(tmp.size()-1));\n                tmp.remove(tmp.size()-1);\n                check=true;\n            }\n        }\n        return lst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> toSort = new ArrayList<>(lst);\n        ArrayList<Long> sorted = toSort.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n        for (int i = 0; i < toSort.size() && i < sorted.size(); i++) {\n            result.add(sorted.get(i));\n            sorted.remove(i);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> out = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i += 2) {\n            out.add(Collections.min(lst));\n            lst.removeAll(Collections.singletonList(Collections.min(lst)));\n            if (lst.size() > 0) {\n                out.add(Collections.max(lst));\n                lst.removeAll(Collections.singletonList(Collections.max(lst)));\n            }\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n        while (lst.size() > 0) {\n            sorted.add(min(lst));\n            sorted.add(max(lst));\n            lst.remove(min(lst));\n            lst.remove(max(lst));\n        }\n        return sorted;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        while (lst.size() > 0) {\n            long min = Long.MAX_VALUE;\n            for (Long aLong : lst) {\n                if (aLong < min) {\n                    min = aLong;\n                }\n            }\n            lst.remove((Long)min);\n            output.add(min);\n            if (lst.size() > 0) {\n                long max = Long.MIN_VALUE;\n                for (Long aLong : lst) {\n                    if (aLong > max) {\n                        max = aLong;\n                    }\n                }\n                lst.remove((Long)max);\n                output.add(max);\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        while(lst.size() > 0) {\n            output.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n            if(lst.size() == 0) break;\n            output.add(Collections.max(lst));\n            lst.remove(Collections.max(lst));\n        }\n        return output;\n    }    \n}\n\npublic class Solution {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int testCases = Integer.parseInt(in.nextLine());\n        for(int i = 0; i < testCases; i++) {\n            int n = in.nextInt();\n            ArrayList<Long> lst = new ArrayList<Long>();\n            for(int j = 0; j < n; j++) {\n                lst.add(in.nextLong());\n            }\n            for(int k : Problem.strangeSortList(lst)) {\n                System.out.print(k + \" \");\n            }\n            System.out.println(\"\");\n        }\n        in.close();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // Your code here\n        if(lst.size() < 2) return lst;\n        ArrayList<Long> res = new ArrayList<>();\n        res.add(Collections.min(lst));\n        while(res.size() < lst.size()){\n            res.add(Collections.max(lst));\n            res.add(Collections.min(lst));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newLst = new ArrayList<Long>();\n        while(!lst.isEmpty()){\n            newLst.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        while(!newLst.isEmpty()){\n            newLst.add(Collections.max(newLst));\n            newLst.remove(Collections.max(newLst));\n        }\n        return newLst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(Collections.min(lst));\n            }\n            else {\n                result.add(Collections.max(lst));\n            }\n            lst.remove(Collections.min(lst));\n            lst.remove(Collections.max(lst));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n        while (!lst.isEmpty()) {\n            sorted.add(lst.stream().min(Comparator.naturalOrder()).get());\n            lst.remove(lst.indexOf(lst.stream().min(Comparator.naturalOrder()).get()));\n            sorted.add(lst.stream().max(Comparator.naturalOrder()).get());\n            lst.remove(lst.indexOf(lst.stream().max(Comparator.naturalOrder()).get()));\n        }\n        return sorted;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() < 2) return lst;\n        long min = lst.get(0), max = lst.get(0);\n        for (long i : lst) {\n            min = Math.min(min, i);\n            max = Math.max(max, i);\n        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n        while (min < max) {\n            ans.add(min);\n            lst.remove((long)min);\n            max = lst.get(0);\n            min = lst.get(0);\n            for (long i : lst) {\n                min = Math.min(min, i);\n                max = Math.max(max, i);\n            }\n        }\n        ans.add(min);\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) return lst;\n        List<Long> result = new ArrayList<>();\n        List<Long> temp = new ArrayList<>(lst);\n        result.add(Collections.min(temp));\n        temp.remove(Collections.min(temp));\n        while(!temp.isEmpty()){\n            result.add(Collections.max(temp));\n            temp.remove(Collections.max(temp));\n            result.add(Collections.min(temp));\n            temp.remove(Collections.min(temp));\n        }\n        return (ArrayList<Long>)result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) {\n            return lst;\n        }\n        int i = 1;\n        ListIterator<Long> it = lst.listIterator();\n        while (it.hasNext()) {\n            it.next();\n            if (i % 2 == 1) {\n                it.set((long)lst.stream().mapToLong(x -> x).min().getAsLong());\n            } else {\n                it.set((long)lst.stream().mapToLong(x -> x).max().getAsLong());\n            }\n            i++;\n        }\n        return lst;\n    }    \n}\n\npublic class Solution {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        String line;\n        while ((line = in.readLine()) != null) {\n            ArrayList<Long> lst = new ArrayList<Long>();\n            String[] lstItr = line.split(\" \");\n            for (int lstItrItr = 0; lstItrItr < lstItr.length; lstItrItr++) {\n                long lstItrItem = Long.parseLong(lstItr[lstItrItr]);\n                lst.add(lstItrItem);\n            }\n            ArrayList<Long> result = Problem.strangeSortList(lst);\n            for (int resultItr = 0; resultItr < result.size(); resultItr++) {\n                System.out.print(result.get(resultItr) + (resultItr != result.size() - 1 ? \" \" : \"\"));\n            }\n            System.out.println();\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new ArrayList<>();\n        while (!lst.isEmpty()) {\n            long min = lst.stream().min(Long::compare).get();\n            sorted.add(min);\n            lst.remove((int)lst.indexOf(min));\n        }\n        return sorted;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n        ArrayList<Long> rv = new ArrayList<Long>();\n        if (sorted.isEmpty()) {\n            return rv;\n        }\n        rv.add(sorted.get(0));\n        for (int i = 1; i < sorted.size(); i += 2) {\n            rv.add(sorted.get(sorted.size() - i));\n        }\n        if (sorted.size() % 2 == 1) {\n            rv.add(sorted.get(sorted.size() - 1));\n        }\n        return rv;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> a = new ArrayList<>();\n        ArrayList<Long> b = new ArrayList<>();\n        ArrayList<Long> c = new ArrayList<>();\n        if(lst.size() == 0) {\n            return a;\n        }\n        a.add(lst.get(0));\n        lst.remove(0);\n        for(int i = 0; i < lst.size() - 1; i++) {\n            if(lst.get(i) < lst.get(i + 1)) {\n                b.add(lst.get(i));\n                c.add(lst.get(i + 1));\n            } else {\n                c.add(lst.get(i));\n                b.add(lst.get(i + 1));\n            }\n            lst.remove(i);\n            lst.remove(i);\n        }\n        if(lst.size() != 0) {\n            if(lst.get(0) < lst.get(1)) {\n                b.add(lst.get(0));\n                c.add(lst.get(1));\n            } else {\n                c.add(lst.get(0));\n                b.add(lst.get(1));\n            }\n        }\n        return a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> answer = new ArrayList<Long>();\n        if (lst.size() == 0) return answer;\n        else {\n            long min = Collections.min(lst);\n            answer.add(min);\n            lst.remove(lst.indexOf(min));\n            long max = Collections.max(lst);\n            answer.add(max);\n            lst.remove(lst.indexOf(max));\n            while (lst.size() != 0) {\n                min = Collections.min(lst);\n                answer.add(min);\n                lst.remove(lst.indexOf(min));\n            }\n            return answer;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n        if(lst.isEmpty() || lst.size()==1){\n            return lst;\n        }\n        else if(lst.size()==2){\n            if(lst.get(0)<lst.get(1)){\n                res.add(lst.get(0));\n                res.add(lst.get(1));\n            }\n            else{\n                res.add(lst.get(1));\n                res.add(lst.get(0));\n            }\n        }\n        else{\n            res.add(Collections.min(lst));\n            res.add(Collections.max(lst));\n            ArrayList<Long> temp = new ArrayList<>(lst);\n            temp.removeAll(Arrays.asList(res.get(0),res.get(1)));\n            return strangeSortList(temp);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n        ArrayList<Long> result = new ArrayList<>();\n        while(!sorted.isEmpty()) {\n            result.add(sorted.get(0));\n            sorted.remove(0);\n            if(!sorted.isEmpty()) {\n                result.add(sorted.get(sorted.size() - 1));\n                sorted.remove(sorted.size() - 1);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        List<Long> t = new ArrayList<Long>();\n        if(lst.size() == 0){\n            return lst;\n        }\n        else if(lst.size() == 1){\n            return lst;\n        }\n        else{\n            t.add(Collections.min(lst));\n            int k = 0;\n            while(lst.size() > 1){\n                t.add(Collections.max(lst));\n                lst.remove(Collections.max(lst));\n                t.add(Collections.min(lst));\n                lst.remove(Collections.min(lst));\n            }\n            return new ArrayList<Long>(t);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) return lst;\n        ArrayList<Long> result = new ArrayList<Long>();\n        ListIterator<Long> iter = lst.listIterator();\n        Long min = iter.next();\n        Long max = iter.next();\n        while (iter.hasNext()) {\n            result.add(iter.next());\n        }\n        result.add(min);\n        result.add(max);\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> out = new ArrayList<Long>();\n        if (lst.size() == 0) return out;\n        ArrayList<Long> copy = (ArrayList<Long>)lst.clone();\n        copy.sort(Collections.reverseOrder());\n        for (int i = 0; i < copy.size(); i += 2) {\n            out.add(copy.get(i));\n        }\n        for (int i = 1; i < copy.size(); i += 2) {\n            out.add(copy.get(i));\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n        ArrayList<Long> even = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even.add(lst.get(i));\n            } else {\n                odd.add(lst.get(i));\n            }\n        }\n        Collections.sort(even);\n        Collections.sort(odd, Collections.reverseOrder());\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                ret.add(even.get(0));\n                even.remove(0);\n            } else {\n                ret.add(odd.get(0));\n                odd.remove(0);\n            }\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // Check if the list is empty, if so return empty list.\n        if (lst.size() == 0) return lst;\n        // Sort the list using java's sort method.\n        lst.sort(Comparator.comparingLong(Long::longValue));\n        // Set the output variable to an empty list.\n        ArrayList<Long> output = new ArrayList<Long>();\n        // Set the first index to 0.\n        int index = 0;\n        // While there are still elements in the list.\n        while (lst.size() > 0) {\n            // Set the current value to the minimum value in the list.\n            long currentValue = lst.stream().min(Comparator.comparingLong(Long::longValue)).get();\n            // Add the minimum value to the output list.\n            output.add(currentValue);\n            // Remove the minimum value from the list.\n            lst.remove(currentValue);\n            // If the list is not empty.\n            if (lst.size() > 0) {\n                // Set the current value to the maximum value in the list.\n                currentValue = lst.stream().max(Comparator.comparingLong(Long::longValue)).get();\n                // Add the maximum value to the output list.\n                output.add(currentValue);\n                // Remove the maximum value from the list.\n                lst.remove(currentValue);\n            }\n        }\n        // Return the output list.\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        if(lst.size() <= 1) return lst;\n        //if(lst.size() >= 2) {\n        ArrayList<Long> l = new ArrayList<Long>();\n        ArrayList<Long> h = new ArrayList<Long>();\n        Long m = lst.get(0);\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > m) {\n                h.add(lst.get(i));\n            } else if(lst.get(i) < m) {\n                l.add(lst.get(i));\n            }\n        }\n        ans.add(m);\n        if(l.size() == 0 && h.size() != 0) {\n            ans.add(h.get(0));\n            ans.add(m);\n            for(int i = 1; i < h.size(); i++) {\n                ans.add(h.get(i));\n            }\n        } else if(h.size() == 0 && l.size() != 0) {\n            ans.add(l.get(0));\n            ans.add(m);\n            for(int i = 1; i < l.size(); i++) {\n                ans.add(l.get(i));\n            }\n        } else if(l.size() == 0 && h.size() == 0) {\n            return ans;\n        } else {\n            ans.add(h.get(0));\n            for(int i = 0; i < l.size(); i++) {\n                ans.add(l.get(i));\n            }\n            ans.add(m);\n            for(int i = 1; i < h.size(); i++) {\n                ans.add(h.get(i));\n            }\n        }\n        return ans;\n        //}", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        int n = lst.size();\n        ArrayList<Long> res = new ArrayList<>();\n        while (n > 0) {\n            long min = lst.stream().min(Long::compare).get();\n            res.add(min);\n            lst.remove((Object)min);\n            if (lst.size() != 0) {\n                long max = lst.stream().max(Long::compare).get();\n                res.add(max);\n                lst.remove((Object)max);\n            }\n            n -= 2;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        if (lst.size() == 0) {\n            return ans;\n        }\n        if (lst.size() == 1) {\n            return lst;\n        }\n        while (lst.size() > 1) {\n            ans.add(Collections.min(lst));\n            ans.add(Collections.max(lst));\n            lst.remove(Collections.min(lst));\n            lst.remove(Collections.max(lst));\n        }\n        ans.add(Collections.min(lst));\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> rtn = new ArrayList<Long>();\n        if (lst.isEmpty()) return rtn;\n        ArrayList<Long> minLst = new ArrayList<Long>();\n        ArrayList<Long> maxLst = new ArrayList<Long>();\n        Long min = (long)lst.get(0);\n        Long max = (long)lst.get(0);\n        for (long i : lst) {\n            if (i >= max) max = i;\n            if (i <= min) min = i;\n        }\n        for (long i : lst) {\n            if (i == min) minLst.add(i);\n            else maxLst.add(i);\n        }\n        rtn.add(min);\n        for (long i = 0; i < maxLst.size(); i++) {\n            rtn.add(maxLst.get(i));\n        }\n        if (minLst.size() == 1) {\n            rtn.add(minLst.get(0));\n        } else {\n            for (long i = 0; i < minLst.size(); i++) {\n                rtn.add(minLst.get(i));\n            }\n        }\n        return rtn;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        int size = lst.size();\n        if (size == 0) return res;\n        ArrayList<Long> maxList = new ArrayList<Long>();\n        for (int i = 0; i < size; i++) {\n            long val = lst.get(i);\n            maxList.add(val);\n            res.add(val);\n        }\n        for (int i = 1; i < size; i += 2) {\n            long max = Collections.max(maxList);\n            maxList.remove((Integer)Collections.max(maxList));\n            res.set(i, max);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size() == 0) return lst;\n        ArrayList<Long> newLst = new ArrayList<Long>(lst);\n        newLst.sort(null);\n        ArrayList<Long> retLst = new ArrayList<Long>();\n        for(int i = 0; i < newLst.size(); i++){\n            if(i % 2 == 0){\n                retLst.add(newLst.get(i));\n            }\n            else{\n                retLst.add(0, newLst.get(i));\n            }\n        }\n        return retLst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() < 2) {\n            return lst;\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        res.add(Collections.min(lst));\n        res.add(Collections.max(lst));\n        for (int i = 0; i < lst.size() - 2; i++) {\n            res.add(Collections.min(lst));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        int len = lst.size();\n        if (len == 0)\n            return lst;\n        long[] a = new long[len];\n        ArrayList<Long> ret = new ArrayList<Long>(len);\n        for (int i = 0; i < len; i++)\n            a[i] = lst.get(i);\n        Arrays.sort(a);\n        for (int i = 0; i < len; i++) {\n            ret.add(a[len - 1 - i % 2]);\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        ret.add(Collections.min(lst));\n        while(lst.size() > 1){\n            ret.add(Collections.max(lst));\n            lst.remove(Collections.max(lst));\n            ret.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n        if (lst.size() == 0) return res;\n        ArrayList<Long> sortedLst = lst.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n        int i = 0;\n        while (i < lst.size()) {\n            res.add(sortedLst.get(i));\n            res.add(sortedLst.get(sortedLst.size() - i - 1));\n            i += 2;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>(lst);\n        Collections.sort(result);\n        ArrayList<Long> finalResult = new ArrayList<Long>();\n        for(int i = 0; i < lst.size(); i += 2) {\n            finalResult.add(result.get(i));\n        }\n        for(int i = 1; i < lst.size(); i += 2) {\n            finalResult.add(result.get(i));\n        }\n        return finalResult;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) return lst;\n        List<Long> rest = lst.stream().limit(lst.size()-1).collect(Collectors.toList());\n        List<Long> res = new ArrayList<>();\n        for (int i=0; i < lst.size(); i++) {\n            if (i%2==0) {\n                res.add(Collections.min(rest));\n                rest.remove(Collections.min(rest));\n            } else {\n                res.add(Collections.max(rest));\n                rest.remove(Collections.max(rest));\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size()==0){\n            return lst;\n        }\n        ArrayList<Long> ans=new ArrayList<>();\n        Long[] a=lst.toArray(new Long[0]);\n        Arrays.sort(a);\n        for(int i=0;i<a.length;i=i+2){\n            ans.add(a[i]);\n        }\n        for(int i=a.length-1;i>=0;i=i-2){\n            ans.add(a[i]);\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        while(lst.size() > 0) {\n            result.add(lst.stream().min(Comparator.naturalOrder()).get());\n            lst.remove(lst.stream().min(Comparator.naturalOrder()).getAsInt());\n            result.add(lst.stream().max(Comparator.naturalOrder()).get());\n            lst.remove(lst.stream().max(Comparator.naturalOrder()).getAsInt());\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n        while(lst.size() > 0){\n            res.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) return lst;\n        ArrayList<Long> temp = new ArrayList<Long>(lst);\n        temp.sort(Collections.reverseOrder());\n        int counter = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (counter % 2 == 0) {\n                lst.set(i, temp.get(i));\n            } else {\n                lst.set(i, temp.get(lst.size() - 1 - i));\n            }\n            counter++;\n        }\n        return lst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // for each element in lst, remove the element and add to new list\n        ArrayList<Long> new_lst = new ArrayList<Long>();\n        int i = 0;\n        while (lst.size() > 0) {\n            Long min = lst.stream().reduce((a, b) -> {\n                if (a.compareTo(b) <= 0) {\n                    return a;\n                } else {\n                    return b;\n                }\n            }).get();\n            new_lst.add(min);\n            lst.remove(lst.indexOf(min));\n            if (i % 2 == 1) {\n                new_lst.addAll(lst);\n                break;\n            }\n            i++;\n        }\n        return new_lst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n            return lst;\n        }\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n        for (long l : lst) {\n            if (l < min) {\n                min = l;\n            }\n            if (l > max) {\n                max = l;\n            }\n        }\n        ArrayList<Long> ret = new ArrayList<Long>();\n        while (lst.size() > 0) {\n            ret.add(min);\n            lst.remove((Long)min);\n            if (lst.size() > 0) {\n                ret.add(max);\n                lst.remove((Long)max);\n            }\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size() == 0)\n            return lst;\n        ArrayList<Long> result = new ArrayList<Long>();\n        // IMPLEMENT THIS FUNCTION\n        result.add(Collections.min(lst));\n        while(result.size() != lst.size()){\n            result.add(Collections.max(lst));\n            lst.remove(Collections.max(lst));\n            result.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++) {\n            sorted.add((long)0);\n        }\n        int min = 0;\n        int max = lst.size() - 1;\n        int index = 0;\n        while (index < lst.size()) {\n            sorted.set(index, lst.get(min));\n            min = minValue(lst, min);\n            index += 1;\n        }\n        index = 0;\n        while (index < lst.size()) {\n            sorted.set(index, lst.get(max));\n            max = maxValue(lst, max);\n            index += 1;\n        }\n        return sorted;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) return lst;\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(Collections.min(lst));\n        while (lst.size() != 1) {\n            lst.remove((Long)result.get(result.size() - 1));\n            result.add(Collections.max(lst));\n        }\n        result.add(lst.get(0));\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newLst = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n        for (Long l : lst) {\n            min = Math.min(min, l);\n        }\n        newLst.add(min);\n        while (!lst.isEmpty()) {\n            newLst.add(Long.max(lst.stream().reduce(0L, (a, b) -> a > b ? a : b)));\n            lst.remove((Long)Long.max(lst.stream().reduce(0L, (a, b) -> a > b ? a : b)));\n            newLst.add(min);\n            lst.remove(min);\n            if (!lst.isEmpty()) {\n                min = Long.MAX_VALUE;\n                for (Long l : lst) {\n                    min = Math.min(min, l);\n                }\n            }\n        }\n        return newLst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        while(!lst.isEmpty()){\n            result.add(Collections.min(lst));\n            lst.removeAll(Collections.singleton(Collections.max(lst)));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n        for(int i = 0; i < lst.size(); i++) {\n            sorted.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        return sorted;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        int count = 0;\n        while (lst.size() > 0) {\n            count++;\n            long min = Long.MAX_VALUE;\n            int min_i = -1;\n            long max = Long.MIN_VALUE;\n            int max_i = -1;\n            for (int i = 0; i < lst.size(); i++) {\n                long val = lst.get(i);\n                if (val < min) {\n                    min = val;\n                    min_i = i;\n                }\n                if (val > max) {\n                    max = val;\n                    max_i = i;\n                }\n            }\n            result.add(min);\n            lst.remove(min_i);\n            if (count % 2 == 1) {\n                result.add(max);\n                lst.remove(max_i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> al = new ArrayList<Long>();\n        if (lst.isEmpty()) {\n            return al;\n        }\n        while (lst.size() > 0) {\n            al.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n            if (lst.size() > 0) {\n                al.add(Collections.max(lst));\n                lst.remove(Collections.max(lst));\n            }\n        }\n        return al;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n        while(!lst.isEmpty()){\n            sorted.add(lst.stream().min(Long::compare).get());\n            lst.remove(lst.stream().min(Long::compare).getAsInt());\n        }\n        lst = sorted;\n        sorted = new ArrayList<Long>();\n        while(!lst.isEmpty()){\n            sorted.add(lst.stream().max(Long::compare).get());\n            lst.remove(lst.stream().max(Long::compare).getAsInt());\n        }\n        lst = sorted;\n        sorted = new ArrayList<Long>();\n        while(!lst.isEmpty()){\n            sorted.add(lst.stream().min(Long::compare).get());\n            lst.remove(lst.stream().min(Long::compare).getAsInt());\n        }\n        return sorted;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1) return lst;\n        ArrayList<Long> res = new ArrayList<Long>();\n        res.add(Collections.min(lst));\n        while (lst.size() > 1) {\n            lst.remove(Collections.min(lst));\n            res.add(Collections.max(lst));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> arr = new ArrayList<Long>();\n        ArrayList<Long> left = new ArrayList<Long>();\n        ArrayList<Long> right = new ArrayList<Long>();\n        long minimum = 0, maximum = 0;\n        if (lst.size() == 0) {\n            return arr;\n        }\n        if (lst.size() == 1) {\n            arr.add(lst.get(0));\n            return arr;\n        }\n        for (long i : lst) {\n            if (i < minimum) {\n                left.add(i);\n                continue;\n            }\n            if (i > maximum) {\n                right.add(i);\n                continue;\n            }\n        }\n        minimum = left.get(0);\n        maximum = right.get(0);\n        if (left.size() == 1) {\n            arr.add(minimum);\n            arr.add(maximum);\n            return arr;\n        }\n        for (long i : left) {\n            if (i < minimum) {\n                minimum = i;\n                continue;\n            }\n            if (i > maximum) {\n                maximum = i;\n                continue;\n            }\n        }\n        arr.add(minimum);\n        arr.add(maximum);\n        for (long i : left) {\n            if (i < minimum) {\n                continue;\n            }\n            if (i > maximum) {\n                continue;\n            }\n            arr.add(i);\n        }\n        for (long i : right) {\n            if (i < minimum) {\n                continue;\n            }\n            if (i > maximum) {\n                continue;\n            }\n            arr.add(i);\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!lst.isEmpty()) {\n            result.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = lst;\n        // write your code here\n        return sorted;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        while(lst.size() > 0){\n            res.add(Collections.min(lst));\n            lst.remove((Long)Collections.min(lst));\n        }\n        while(lst.size() > 0){\n            res.add(Collections.max(lst));\n            lst.remove((Long)Collections.max(lst));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newLst = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n        for(long i : lst) {\n            if(min > i) min = i;\n            if(max < i) max = i;\n        }\n        while(!lst.isEmpty()) {\n            newLst.add(min);\n            lst.remove((long)min);\n            if(!lst.isEmpty()) newLst.add(max);\n            lst.remove((long)max);\n            if(!lst.isEmpty()) min = Long.MAX_VALUE;\n            if(!lst.isEmpty()) max = Long.MIN_VALUE;\n            for(long i : lst) {\n                if(min > i) min = i;\n                if(max < i) max = i;\n            }\n        }\n        return newLst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) {\n            return lst;\n        } else if (lst.size() == 1) {\n            return lst;\n        } else {\n            ArrayList<Long> sorted = new ArrayList<Long>(lst);\n            sorted.sort(null);\n            ArrayList<Long> result = new ArrayList<Long>();\n            int i = 0;\n            while (sorted.size() > 0) {\n                result.add(sorted.get(sorted.size() - 1));\n                sorted.remove(sorted.size() - 1);\n                i++;\n                if (i % 2 == 0) {\n                    result.add(sorted.get(sorted.size() - 1));\n                    sorted.remove(sorted.size() - 1);\n                }\n            }\n            return result;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) {\n            return lst;\n        }\n        else {\n            ArrayList<Long> lst2 = new ArrayList<Long>(lst);\n            lst2.remove(lst2.indexOf(lst.stream().min(Long::compareTo).get()));\n            ArrayList<Long> output = new ArrayList<Long>();\n            output.add(lst.stream().min(Long::compareTo).get());\n            while (lst2.size() != 0) {\n                output.add(lst2.stream().max(Long::compareTo).get());\n                lst2.remove(lst2.indexOf(lst2.stream().max(Long::compareTo).get()));\n                output.add(lst2.stream().min(Long::compareTo).get());\n                lst2.remove(lst2.indexOf(lst2.stream().min(Long::compareTo).get()));\n            }\n            return output;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int size = lst.size();\n        // If the list is empty, return the empty list\n        if (size == 0)\n            return result;\n        // Otherwise, get the minimum and maximum of the list\n        long min = Collections.min(lst);\n        long max = Collections.max(lst);\n        // Add min to the result list\n        result.add(min);\n        // If the list has only one element, return the result list\n        if (size == 1)\n            return result;\n        // Otherwise, remove the min and max from the list and\n        // add max and min to the result list\n        lst.remove((Long)min);\n        lst.remove((Long)max);\n        result.add(max);\n        // If the list has two elements, return the result list\n        if (size == 2)\n            return result;\n        // Otherwise, keep repeating this process until the list is empty\n        while (lst.size() > 0) {\n            // Get the minimum and maximum of the remaining integers\n            min = Collections.min(lst);\n            max = Collections.max(lst);\n            // Add min and max to the result list\n            result.add(min);\n            result.add(max);\n            // Remove min and max from the list\n            lst.remove((Long)min);\n            lst.remove((Long)max);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size() < 2){\n            return lst;\n        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n        TreeSet<Long> set = new TreeSet<Long>();\n        for(Long i : lst){\n            set.add(i);\n        }\n        while(set.size() > 0){\n            ans.add(set.first());\n            set.remove(set.first());\n            if(set.size() > 0){\n                ans.add(set.last());\n                set.remove(set.last());\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n            return lst;\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n        ArrayList<Long> rev = new ArrayList<>(sorted);\n        Collections.reverse(rev);\n        int i = 0;\n        while (result.size() < lst.size()) {\n            if (i % 2 == 0) {\n                result.add(sorted.get(0));\n                sorted.remove(0);\n            } else {\n                result.add(rev.get(0));\n                rev.remove(0);\n            }\n            i++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        int n = lst.size();\n        ArrayList<Long> ans = new ArrayList<Long>(n);\n        for (int i = 0; i < n; i++) {\n            ans.add(lst.get(i));\n            lst.remove(i);\n        }\n        Collections.sort(ans);\n        ArrayList<Long> tmp = new ArrayList<Long>(n);\n        int cur = 0;\n        while (cur < n) {\n            tmp.add(ans.get(n - 1 - cur));\n            cur += 2;\n        }\n        if (cur != n) {\n            tmp.addAll(ans.subList(0, n - cur));\n        }\n        return tmp;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        int len = lst.size();\n        if (len == 0) {\n            return lst;\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        int i = 0;\n        while (i < len) {\n            int min = -1;\n            int max = -1;\n            for (int j = i; j < len; j++) {\n                if (min == -1 || lst.get(j) < lst.get(min)) {\n                    min = j;\n                }\n                if (max == -1 || lst.get(j) > lst.get(max)) {\n                    max = j;\n                }\n            }\n            if (min != -1) {\n                res.add(lst.get(min));\n            }\n            if (max != -1) {\n                res.add(lst.get(max));\n            }\n            i += 2;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) return lst;\n        if (lst.size() == 1) return lst;\n        ArrayList<Long> result = new ArrayList<Long>(lst);\n        ArrayList<Long> minList = new ArrayList<Long>();\n        ArrayList<Long> maxList = new ArrayList<Long>();\n        Long min = Long.MAX_VALUE;\n        Long max = Long.MIN_VALUE;\n        for (Long i : result) {\n            if (i < min) {\n                min = i;\n            }\n            if (i > max) {\n                max = i;\n            }\n        }\n        for (Long i : result) {\n            if (i == min) {\n                minList.add(i);\n            } else {\n                maxList.add(i);\n            }\n        }\n        int minListIndex = 0;\n        int maxListIndex = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (i % 2 == 0) {\n                result.set(i, minList.get(minListIndex));\n                minListIndex++;\n            } else {\n                result.set(i, maxList.get(maxListIndex));\n                maxListIndex++;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> r = new ArrayList<Long>();\n        ArrayList<Long> r1 = lst;\n        while(r1.size()>1) {\n            ArrayList<Long> r2 = new ArrayList<Long>();\n            for(int i = 0; i < r1.size(); i+=2) {\n                r2.add(r1.get(i));\n            }\n            r.add(r2.stream().min(Long::compareTo).get());\n            r1 = r2;\n            ArrayList<Long> r3 = new ArrayList<Long>();\n            for(int i = 1; i < r1.size(); i+=2) {\n                r3.add(r1.get(i));\n            }\n            r.add(r3.stream().max(Long::compareTo).get());\n            r1 = r3;\n        }\n        r.addAll(r1);\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // lst.sort(null);\n        // List<Long> sorted = lst.stream().sorted().collect(Collectors.toList());\n        // ArrayList<Long> result = new ArrayList<Long>();\n        // if (lst.size() == 1) {\n        //     return lst;\n        // }\n        // for (int i = 0; i < lst.size(); i+=2) {\n        //     if (i % 2 == 0) {\n        //         result.add(sorted.get(0));\n        //     } else {\n        //         result.add(sorted.get(sorted.size() - 1));\n        //     }\n        // }\n        // return result;\n        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> sorted = new ArrayList<Long>(lst);\n        sorted.sort(null);\n        if (lst.size() == 1) return lst;\n        int flag = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (flag == 0) {\n                result.add(sorted.get(0));\n                sorted.remove(0);\n                flag = 1;\n            } else {\n                result.add(sorted.get(sorted.size()-1));\n                sorted.remove(sorted.size()-1);\n                flag = 0;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        if(lst.size() == 0) {\n            return res;\n        }\n        else {\n            res.add(lst.stream().min((a, b) -> (int)(a - b)).get());\n            res.addAll(lst.stream().filter((a) -> a != res.get(0)).max((a, b) -> (int)(a - b)).get().equals(res.get(0)) ?\n                        lst.stream().filter((a) -> a != res.get(0)).filter((a) -> a != res.get(1)).max((a, b) -> (int)(a - b)).get().equals(res.get(1)) ?\n                        lst.stream().filter((a) -> a != res.get(0)).filter((a) -> a != res.get(1)).filter((a) -> a != res.get(2)).max((a, b) -> (int)(a - b)).get().equals(res.get(2)) ?\n                        lst.stream().filter((a) -> a != res.get(0)).filter((a) -> a != res.get(1)).filter((a) -> a != res.get(2)).filter((a) -> a != res.get(3)).max((a, b) -> (int)(a - b)).get().equals(res.get(3)) ?\n                        lst.stream().filter((a) -> a != res.get(0)).filter((a) -> a != res.get(1)).filter((a) -> a != res.get(2)).filter((a) -> a != res.get(3)).filter((a) -> a != res.get(4)).max((a, b) -> (int)(a - b)).get().equals(res.get(4)) ?\n                        lst.stream().filter((a) -> a != res.get(0)).filter((a) -> a != res.get(1)).filter((a) -> a != res.get(2)).filter((a) -> a != res.get(3)).filter((a) -> a != res.get(4)).filter((a) -> a != res.get(5)).max((a, b) -> (int)(a - b)).get().equals(res.get(5)) ?\n                        lst.stream().filter((a) -> a != res.get(0)).filter((a) -> a != res.get(1)).filter((a) -> a != res.get(2)).filter((a) -> a != res.get(3)).filter((a) -> a != res.get(4)).filter((a) -> a != res.get(5)).filter((a) -> a != res.get(6)).max((a, b) -> (int)(a - b)).get().equals(res.get(6)) ?\n                        lst.stream().filter((a) -> a != res.get(0)).filter((a) -> a != res.get(1)).filter((a) -> a != res.get(2)).filter((", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() < 2) {\n            return lst;\n        }\n        ArrayList<Long> sorted = lst.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++) {\n            result.add(sorted.get((lst.size() - 1) - i));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newList = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>(lst);\n        while(!temp.isEmpty()){\n            newList.add(temp.stream().min(Long::compareTo).get());\n            temp.remove(temp.stream().min(Long::compareTo).get());\n            if(!temp.isEmpty())\n                newList.add(temp.stream().max(Long::compareTo).get());\n        }\n        return newList;\n    }    \n}\n", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(lst.size() == 0){\n            return result;\n        }\n        while(lst.size() != 1){\n            result.add(lst.stream().min(Comparator.naturalOrder()).get());\n            lst.removeAll(Collections.singletonList(lst.stream().min(Comparator.naturalOrder()).get()));\n            result.add(lst.stream().max(Comparator.naturalOrder()).get());\n            lst.removeAll(Collections.singletonList(lst.stream().max(Comparator.naturalOrder()).get()));\n        }\n        result.add(lst.get(0));\n        return result;\n    }    \n}\n", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size()==0)\n            return new ArrayList<Long>();\n        ArrayList<Long> lst1 = new ArrayList<Long>();\n        ArrayList<Long> lst2 = new ArrayList<Long>();\n        long temp;\n        int i,j;\n        for(i=0;i<lst.size();i++){\n            for(j=0;j<lst.size();j++)\n                if(lst.get(i)>lst.get(j))\n                    lst1.add(lst.get(j));\n                else\n                    lst2.add(lst.get(j));\n            temp=lst1.get(0);\n            lst1.set(0,lst.get(i));\n            lst.set(i,temp);\n            lst1.clear();\n            lst2.clear();\n        }\n        return lst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        int n = lst.size();\n        ArrayList<Long> res = new ArrayList<Long>(n);\n        if (n <= 1) return res;\n        if (n > 1) {\n            // Do the strangesort\n            ArrayList<Long> temp = new ArrayList<Long>();\n            // Save the original array\n            temp = lst;\n            int min = 0, max = 0, pos = 0;\n            for (int i = 0; i < n; i++) {\n                // Find the minimum value\n                min = temp.get(0);\n                // Find the maximum value\n                max = temp.get(0);\n                for (int j = 1; j < temp.size(); j++) {\n                    if (temp.get(j) < min)\n                        min = temp.get(j);\n                    if (temp.get(j) > max)\n                        max = temp.get(j);\n                }\n                // Add the minimum value to the result\n                res.add(min);\n                // Remove the minimum value from the array\n                temp.remove(min);\n                // Add the maximum value to the result\n                res.add(max);\n                // Remove the maximum value from the array\n                temp.remove(max);\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n        if(lst.size() == 0) return res;\n        lst.sort(null);\n        int r = lst.size() % 2 == 0 ? lst.size()/2 : lst.size()/2 + 1;\n        for(int i = 0; i < r; i++){\n            res.add(lst.get(0));\n            lst.remove(0);\n            lst.sort(null);\n            lst = (ArrayList<Long>)lst.stream().sorted((a, b) -> -b.compareTo(a)).collect(Collectors.toList());\n            res.add(lst.get(0));\n            lst.remove(0);\n        }\n        return res;\n    }    \n}\n\npublic class Solution {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        ArrayList<Long> arr = new ArrayList<Long>(n);\n        for(int arr_i=0; arr_i < n; arr_i++){\n            arr.add(in.nextLong());\n        }\n        ArrayList<Long> result = Problem.strangeSortList(arr);\n        for(int i = 0; i < result.size(); i++){\n            System.out.print(result.get(i) + (i != result.size()-1 ? \" \" : \"\"));\n        }\n        System.out.println(' ');\n        in.close();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                Long min = getMin(lst);\n                result.add(min);\n                lst.remove(min);\n            }\n            else {\n                Long max = getMax(lst);\n                result.add(max);\n                lst.remove(max);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> arr = new ArrayList<Long>();\n        int len = lst.size();\n        while (len > 0) {\n            // take minimum element and add to array\n            int min_i = 0;\n            for (int i = 0; i < len; i++) {\n                if (lst.get(i) < lst.get(min_i)) {\n                    min_i = i;\n                }\n            }\n            arr.add(lst.get(min_i));\n            lst.remove(min_i);\n            // take maximum element and add to array\n            int max_i = 0;\n            for (int i = 0; i < len; i++) {\n                if (lst.get(i) > lst.get(max_i)) {\n                    max_i = i;\n                }\n            }\n            arr.add(lst.get(max_i));\n            lst.remove(max_i);\n            len -= 2;\n        }\n        return arr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> output = new ArrayList<>();\n        if(lst.size() == 0){\n            return output;\n        }\n        ArrayList<Long> tempLst = new ArrayList<>(lst);\n        while(tempLst.size() != 0){\n            output.add(Collections.min(tempLst));\n            tempLst.remove(Collections.min(tempLst));\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newList = new ArrayList<Long>();\n        while (lst.size() > 0) {\n            Long min = Collections.min(lst);\n            lst.remove(Collections.min(lst));\n            newList.add(min);\n        }\n        return newList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(lst.size() == 0) {\n            return result;\n        } else {\n            while(lst.size() != 0) {\n                Long min = lst.stream().min(Long::compareTo).get();\n                lst.remove(min);\n                result.add(min);\n                Long max = lst.stream().max(Long::compareTo).get();\n                lst.remove(max);\n                result.add(max);\n            }\n            return result;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // lst = list of integers\n        if (lst.size() <= 1) {\n            return lst;\n        }\n        ArrayList<Long> sorted = new ArrayList<Long>(lst);\n        Collections.sort(sorted);\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(sorted.get(0));\n                sorted.remove(0);\n            } else {\n                result.add(sorted.get(sorted.size() - 1));\n                sorted.remove(sorted.size() - 1);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        List<Long> al = new ArrayList<>();\n        while (lst.size() > 0) {\n            al.add(lst.stream().min(Comparator.naturalOrder()).get());\n            lst.remove(lst.indexOf(lst.stream().min(Comparator.naturalOrder()).get()));\n            al.add(lst.stream().max(Comparator.naturalOrder()).get());\n            lst.remove(lst.indexOf(lst.stream().max(Comparator.naturalOrder()).get()));\n        }\n        return new ArrayList<>(al);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < lst.size(); i++) {\n            result.add(min(lst));\n            result.add(max(lst));\n            removeAll(lst, min(lst));\n            removeAll(lst, max(lst));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1) return lst;\n        ArrayList<Long> sorted = lst.stream().sorted().collect(ArrayList::new);\n        ArrayList<Long> output = new ArrayList<Long>();\n        int s = 0;\n        int e = lst.size() - 1;\n        while (s != e) {\n            output.add(sorted.get(s));\n            output.add(sorted.get(e));\n            s++;\n            e--;\n        }\n        output.add(sorted.get(s));\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // sort list\n        // iterate through list\n        // when min is encountered, find max of remaining numbers\n        // add min and max to new list\n        // remove min and max from old list\n        // repeat until no numbers remain\n        // return new list\n        ArrayList<Long> newList = new ArrayList<Long>();\n        ArrayList<Long> oldList = lst;\n        // sort list\n        Collections.sort(oldList);\n        // iterate through list\n        int i = 0;\n        while (oldList.size() > 0) {\n            // when min is encountered, find max of remaining numbers\n            Long min = oldList.get(0);\n            Long max = null;\n            for (Long j : oldList) {\n                if (j > min && j != max) {\n                    max = j;\n                }\n            }\n            // add min and max to new list\n            newList.add(min);\n            newList.add(max);\n            // remove min and max from old list\n            oldList.remove(0);\n            if (oldList.contains(max)) {\n                oldList.remove(max);\n            }\n        }\n        return newList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size() == 0) {\n            return lst;\n        }\n        if(lst.size() == 1) {\n            return lst;\n        }\n        if(lst.size() == 2) {\n            return (ArrayList<Long>)Stream.of(lst.stream().sorted().collect(Collectors.toList())).collect(Collectors.toList());\n        }\n        ArrayList<Long> newList = new ArrayList<Long>();\n        ArrayList<Long> sortedList = (ArrayList<Long>)Stream.of(lst.stream().sorted().collect(Collectors.toList())).collect(Collectors.toList());\n        ArrayList<Long> resultList = new ArrayList<Long>();\n        int numberOfSwaps = 0;\n        while(newList.size() != lst.size()) {\n            if(numberOfSwaps % 2 == 0) {\n                newList.add(sortedList.get(0));\n                sortedList.remove(0);\n            } else {\n                newList.add(sortedList.get(sortedList.size() - 1));\n                sortedList.remove(sortedList.size() - 1);\n            }\n            numberOfSwaps++;\n        }\n        for(int i = 0; i < newList.size(); i++) {\n            resultList.add(newList.get(i));\n        }\n        return resultList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        ArrayList<Long> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(sorted.get(0));\n        while (sorted.size() > 1) {\n            result.add(sorted.get(sorted.size() - 1));\n            sorted.remove(sorted.size() - 1);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.isEmpty()) return new ArrayList<Long>();\n        ArrayList<Long> sorted = new ArrayList<Long>(lst);\n        Collections.sort(sorted);\n        ArrayList<Long> finalLst = new ArrayList<Long>();\n        finalLst.add(sorted.get(0));\n        sorted.remove(0);\n        while(!sorted.isEmpty()){\n            finalLst.add(sorted.get(sorted.size()-1));\n            sorted.remove(sorted.size()-1);\n        }\n        return finalLst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // 1. Write a function that takes an array list of integers,\n        // returns a sorted list of integers in descending order.\n        // 2. Create a new list for the output, and start with the\n        // minimum value in the original list.\n        // 3. Find the maximum value in the remaining values of the\n        // original list, and add it to the new list.\n        // 4. Find the minimum value of the remaining values, and\n        // repeat.\n        // 5. Return the new list.\n        ArrayList<Long> newList = new ArrayList<Long>();\n        if (lst.isEmpty()) return newList;\n        Long minimum = Collections.min(lst);\n        Long maximum = Collections.max(lst);\n        while (!lst.isEmpty()) {\n            newList.add(minimum);\n            lst.remove(minimum);\n            newList.add(maximum);\n            lst.remove(maximum);\n            minimum = Collections.min(lst);\n            maximum = Collections.max(lst);\n        }\n        return newList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (lst.size() > 0) {\n            long min = lst.stream().min(Comparator.naturalOrder()).get();\n            res.add(min);\n            lst.remove(lst.indexOf(min));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<>();\n        while (lst.size() > 0) {\n            result.add(lst.stream().min(Long::compareTo).get());\n            lst.remove(lst.stream().min(Long::compareTo).getAsInt());\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> output = new ArrayList<Long>(lst);\n        if(lst.size() <= 1) {\n            return output;\n        }\n        output.remove((long)lst.stream().min(Long::compareTo).get());\n        output.add((long)lst.stream().max(Long::compareTo).get());\n        return strangeSortList(output);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new ArrayList<Long>();\n        while (lst.size() > 0) {\n            Long min = Collections.min(lst);\n            lst.remove(min);\n            sorted.add(min);\n            if (lst.size() > 0) {\n                Long max = Collections.max(lst);\n                lst.remove(max);\n                sorted.add(max);\n            }\n        }\n        return sorted;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        // write your code here\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        ArrayList<Long> sorted = new ArrayList<Long>();\n        int counter = 0;\n        int len = lst.size();\n        while (sorted.size() < len) {\n            if (counter % 2 == 0) {\n                sorted.add(Collections.min(lst));\n                lst.remove(Collections.min(lst));\n            } else {\n                sorted.add(Collections.max(lst));\n                lst.remove(Collections.max(lst));\n            }\n            counter++;\n        }\n        return sorted;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int[] indexes = new int[lst.size()];\n        for (int i = 0; i < lst.size(); i++) {\n            indexes[i] = i;\n        }\n        if (lst.size() == 1) {\n            return lst;\n        }\n        if (lst.size() == 2) {\n            if (lst.get(0) > lst.get(1)) {\n                result.add(lst.get(1));\n                result.add(lst.get(0));\n                return result;\n            }\n            result.add(lst.get(0));\n            result.add(lst.get(1));\n            return result;\n        }\n        if (lst.size() == 3) {\n            if (lst.get(0) > lst.get(1) && lst.get(0) < lst.get(2)) {\n                result.add(lst.get(0));\n                result.add(lst.get(2));\n                result.add(lst.get(1));\n                return result;\n            }\n            if (lst.get(1) > lst.get(2) && lst.get(1) < lst.get(0)) {\n                result.add(lst.get(1));\n                result.add(lst.get(0));\n                result.add(lst.get(2));\n                return result;\n            }\n            if (lst.get(2) > lst.get(0) && lst.get(2) < lst.get(1)) {\n                result.add(lst.get(2));\n                result.add(lst.get(1));\n                result.add(lst.get(0));\n                return result;\n            }\n            result.add(lst.get(0));\n            result.add(lst.get(1));\n            result.add(lst.get(2));\n            return result;\n        }\n        Collections.sort(lst);\n        List<Integer> minList = new ArrayList<Integer>();\n        List<Integer> maxList = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                minList.add(indexes[i]);\n            } else {\n                maxList.add(indexes[i]);\n            }\n        }\n        for (int i = 0; i < minList.size(); i++) {\n            result.add(lst.get(minList.get(i)));\n        }\n        for (int i = 0; i < maxList.size(); i++) {\n            result.add(lst.get(maxList.get(i)));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        Queue<Long> minQueue = new LinkedList<Long>();\n        Queue<Long> maxQueue = new LinkedList<Long>();\n        for (Long i : lst) {\n            if (i >= 0) {\n                maxQueue.add(i);\n            } else {\n                minQueue.add(i);\n            }\n        }\n        while (maxQueue.size() != 0 && minQueue.size() != 0) {\n            result.add(maxQueue.remove());\n            result.add(minQueue.remove());\n        }\n        if (maxQueue.size() == 0) {\n            while (minQueue.size() != 0) {\n                result.add(minQueue.remove());\n            }\n        } else {\n            while (maxQueue.size() != 0) {\n                result.add(maxQueue.remove());\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n            return lst;\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        ListIterator<Long> iter = lst.listIterator();\n        long current = lst.get(0);\n        long max = lst.get(1);\n        int count = 0;\n        while (iter.hasNext()) {\n            count++;\n            if (count % 2 != 0) {\n                result.add(iter.next());\n            }\n        }\n        result.add(current);\n        result.add(max);\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size()==0) return lst;\n        int n = lst.size();\n        ArrayList<Long> res = new ArrayList<Long>();\n        ArrayList<Long> copy = new ArrayList<Long>(lst);\n        Collections.sort(copy);\n        for(int i = 0; i < n; i++) {\n            if(i%2==0)\n                res.add(copy.get(copy.size()-1));\n            else\n                res.add(copy.get(0));\n            copy.remove((int)res.get(res.size()-1));\n        }\n        return res;\n    }    \n}\n", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n        ArrayList<Long> even = new ArrayList<Long>();\n        if(lst.size() == 0) return result;\n        result.add(Collections.min(lst));\n        lst.remove((int)Collections.min(lst));\n        ArrayList<Long> l;\n        if(lst.size() % 2 == 0){\n            l = even;\n        } else {\n            l = odd;\n        }\n        for(int i = 0; i < lst.size(); i++){\n            if(i % 2 == 0){\n                l.add(Collections.max(lst));\n                lst.remove(Collections.max(lst));\n            } else {\n                l.add(Collections.min(lst));\n                lst.remove(Collections.min(lst));\n            }\n        }\n        result.addAll(l);\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0)\n            return lst;\n        long min = Collections.min(lst);\n        long max = Collections.max(lst);\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0)\n                result.add(min);\n            else\n                result.add(max);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newList = new ArrayList<Long>();\n        ArrayList<Long> odds = new ArrayList<Long>();\n        ArrayList<Long> evens = new ArrayList<Long>();\n        for(long x: lst) {\n            if(lst.indexOf(x) % 2 == 0) {\n                evens.add(x);\n            } else {\n                odds.add(x);\n            }\n        }\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                newList.add(evens.get(0));\n                evens.remove(0);\n            } else {\n                newList.add(odds.get(0));\n                odds.remove(0);\n            }\n        }\n        return newList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(lst.size() == 0){\n            return result;\n        }\n        ArrayList<Long> minList = new ArrayList<Long>();\n        ArrayList<Long> maxList = new ArrayList<Long>();\n        ArrayList<Long> minValue = new ArrayList<Long>();\n        ArrayList<Long> maxValue = new ArrayList<Long>();\n        int minValueC = 0;\n        int maxValueC = 0;\n        int len = lst.size();\n        for(int i = 0; i < len; i++){\n            Long val = lst.get(i);\n            if(i == 0){\n                minValueC++;\n                minValue.add(val);\n            }\n            if(i == 1){\n                if(minValue.get(0) > val){\n                    minValueC++;\n                    minValue.add(val);\n                }else{\n                    maxValueC++;\n                    maxValue.add(val);\n                }\n            }\n            if(i > 1){\n                if(minValue.get(minValueC - 1) < val){\n                    minValueC++;\n                    minValue.add(val);\n                }else if(maxValue.get(maxValueC - 1) > val){\n                    maxValueC++;\n                    maxValue.add(val);\n                }else{\n                    minList.add(val);\n                }\n            }\n        }\n        int temp = 0;\n        for(int i = 0; i < minValueC; i++){\n            result.add(minValue.get(i));\n            temp++;\n        }\n        for(int i = 0; i < maxValueC; i++){\n            result.add(maxValue.get(i));\n            temp++;\n        }\n        while(temp < len){\n            result.add(minList.get(0));\n            minList.remove(0);\n            temp++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        ArrayList<Long> sortedList = new ArrayList<Long>(lst);\n        sortedList.sort(null);\n        int minMaxSize = sortedList.size() / 2;\n        ArrayList<Long> minList = sortedList.stream().limit(minMaxSize).collect(Collectors.toCollection(ArrayList::new));\n        ArrayList<Long> maxList = sortedList.stream().skip(minMaxSize).collect(Collectors.toCollection(ArrayList::new));\n        ArrayList<Long> resList = new ArrayList<Long>();\n        int i = 0;\n        while (!minList.isEmpty()) {\n            resList.add(minList.get(0));\n            minList.remove(0);\n        }\n        i = 0;\n        while (!maxList.isEmpty()) {\n            resList.add(maxList.get(maxList.size() - 1));\n            maxList.remove(maxList.size() - 1);\n        }\n        return resList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (lst.size() != 0) {\n            long min = 0;\n            for (long i : lst) {\n                if (i < min) {\n                    min = i;\n                }\n            }\n            result.add(min);\n            lst.remove((int)lst.indexOf(min));\n        }\n        for (int i = 0; i < result.size(); i++) {\n            if (i % 2 == 0) {\n                result.set(i, result.get(i) * -1);\n            }\n        }\n        for (long i : result) {\n            i *= -1;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> al = new ArrayList<Long>();\n        while(lst.size()>0){\n            al.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        while(al.size()>0){\n            lst.add(Collections.max(al));\n            al.remove(Collections.max(al));\n        }\n        return lst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        int n = lst.size();\n        ArrayList<Long> res = new ArrayList<>();\n        int count = 0;\n        int min;\n        int max;\n        while (count < n) {\n            min = lst.get(0);\n            max = lst.get(0);\n            for (int i = 1; i < n; i++) {\n                if (lst.get(i) < min) {\n                    min = lst.get(i);\n                }\n                if (lst.get(i) > max) {\n                    max = lst.get(i);\n                }\n            }\n            for (int j = 0; j < n; j++) {\n                if (lst.get(j) == min) {\n                    res.add(lst.get(j));\n                }\n            }\n            count += n - 1;\n            lst.removeAll(Collections.singleton(min));\n            for (int k = 0; k < lst.size(); k++) {\n                if (lst.get(k) == max) {\n                    res.add(lst.get(k));\n                }\n            }\n            lst.removeAll(Collections.singleton(max));\n            n = lst.size();\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // Your code here\n        ArrayList<Long> result = new ArrayList<>();\n        int n = lst.size();\n        int i = 0;\n        while(i < n){\n            if(lst.size() == 1) break;\n            if(i == 0){\n                result.add(Collections.min(lst));\n                lst.remove(Collections.min(lst));\n            } else if(i%2 == 0){\n                result.add(Collections.max(lst));\n                lst.remove(Collections.max(lst));\n            } else {\n                result.add(Collections.min(lst));\n                lst.remove(Collections.min(lst));\n            }\n            i++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newList = new ArrayList<Long>();\n        int listSize = lst.size();\n        if(listSize==0) return lst;\n        int minIndex = 0;\n        long minValue = lst.get(0);\n        int maxIndex = 0;\n        long maxValue = lst.get(0);\n        for(int i=0; i<listSize; i++) {\n            if(lst.get(i)<minValue) {\n                minValue = lst.get(i);\n                minIndex = i;\n            }\n            if(lst.get(i)>maxValue) {\n                maxValue = lst.get(i);\n                maxIndex = i;\n            }\n        }\n        newList.add(minValue);\n        if(minIndex<maxIndex) lst.remove(minIndex);\n        else lst.remove(maxIndex);\n        if(lst.size()!=0) newList.add(lst.get(0));\n        if(lst.size()!=0) lst.remove(0);\n        return strangeSortList(lst).addAll(newList);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        res.add(Collections.min(lst));\n        res.add(Collections.max(lst));\n        lst.remove((long)Collections.min(lst));\n        lst.remove((long)Collections.max(lst));\n        while (lst.size() > 0) {\n            res.add(Collections.min(lst));\n            res.add(Collections.max(lst));\n            lst.remove((long)Collections.min(lst));\n            lst.remove((long)Collections.max(lst));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int n = lst.size();\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                int minIndex = -1;\n                for (int j = 0; j < lst.size(); j++) {\n                    if (minIndex == -1) {\n                        minIndex = j;\n                    } else if (lst.get(j) < lst.get(minIndex)) {\n                        minIndex = j;\n                    }\n                }\n                result.add(lst.get(minIndex));\n                lst.remove(minIndex);\n            } else {\n                int maxIndex = -1;\n                for (int j = 0; j < lst.size(); j++) {\n                    if (maxIndex == -1) {\n                        maxIndex = j;\n                    } else if (lst.get(j) > lst.get(maxIndex)) {\n                        maxIndex = j;\n                    }\n                }\n                result.add(lst.get(maxIndex));\n                lst.remove(maxIndex);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<>();\n        List<Long> copy = new ArrayList<>(lst);\n        while(!copy.isEmpty()) {\n            long min = Collections.min(copy);\n            copy.remove((int) min);\n            result.add(min);\n            if(!copy.isEmpty()) {\n                long max = Collections.max(copy);\n                copy.remove((int) max);\n                result.add(max);\n            }\n        }\n        return result;\n    }    \n}\n\npublic class Solution {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        ArrayList<Long> arr = new ArrayList<Long>();\n        for(int a0_i=0; a0_i < n; a0_i++){\n            long a0_temp = in.nextLong();\n            arr.add(a0_temp);\n        }\n        ArrayList<Long> result = Problem.strangeSortList(arr);\n        for(Long num:result){\n            System.out.println(num);\n        }\n        in.close();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0)\n            return lst;\n        ArrayList<Long> r = new ArrayList<>();\n        int n = lst.size();\n        r.add(Collections.min(lst));\n        for (int i = 0; i < n / 2; i++) {\n            r.add(Collections.max(lst));\n            lst.remove(Collections.max(lst));\n            r.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        if (n % 2 == 1)\n            r.add(Collections.max(lst));\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> out = new ArrayList<Long>();\n        if(lst.size() == 0) {\n            return out;\n        } else {\n            for(int i = 0; i < lst.size(); i += 2) {\n                if(i == 0) {\n                    out.add(Collections.min(lst));\n                } else {\n                    out.add(Collections.max(lst));\n                }\n                lst.remove(Collections.min(lst));\n                lst.remove(Collections.max(lst));\n            }\n            return out;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // ArrayList<Long> tmp = new ArrayList<Long>();\n        // ArrayList<Long> ret = new ArrayList<Long>();\n        // if (lst.size() == 0){\n        //     return ret;\n        // }\n        // ret.add(lst.get(0));\n        // for (int i = 1; i < lst.size(); i++) {\n        //     tmp.add(lst.get(i));\n        // }\n        // while (tmp.size() != 0) {\n        //     ret.add(tmp.get(tmp.size() - 1));\n        //     tmp.remove(tmp.size() - 1);\n        // }\n        // return ret;\n        ArrayList<Long> ret = new ArrayList<Long>();\n        while (lst.size() != 0) {\n            ret.add(lst.get(0));\n            lst.remove(0);\n        }\n        while (lst.size() != 0) {\n            ret.add(lst.get(lst.size() - 1));\n            lst.remove(lst.size() - 1);\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < lst.size() / 2; i++) {\n            result.add(lst.stream().min(Long::compareTo).get());\n            lst.remove(lst.stream().min(Long::compareTo).get());\n            result.add(lst.stream().max(Long::compareTo).get());\n            lst.remove(lst.stream().max(Long::compareTo).get());\n        }\n        if (lst.size() % 2 == 1) {\n            result.add(lst.get(0));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        while (lst.size() > 0) {\n            res.add(Collections.min(lst));\n            lst.remove((long)Collections.min(lst));\n            res.add(Collections.max(lst));\n            lst.remove((long)Collections.max(lst));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        ArrayList<Long> sorted = new ArrayList<Long>(lst);\n        Collections.sort(sorted);\n        int index = 0;\n        ArrayList<Long> final_lst = new ArrayList<Long>(lst);\n        while (final_lst.size() > 0) {\n            final_lst.set(index, sorted.get(0));\n            sorted.remove(0);\n            index++;\n            if (sorted.size() > 0) {\n                sorted.remove(sorted.size() - 1);\n            }\n        }\n        return final_lst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> list = new ArrayList<Long>(lst.size());\n        int size = lst.size();\n        if(size == 0){\n            return list;\n        }\n        for(int i = 0; i < size; i += 2){\n            long max = Long.MIN_VALUE;\n            long min = Long.MAX_VALUE;\n            for(int j = 0; j < size; j++){\n                if(lst.get(j) > max){\n                    max = lst.get(j);\n                }else if(lst.get(j) < min){\n                    min = lst.get(j);\n                }\n            }\n            if(i == 0){\n                list.add(min);\n                lst.remove((int) (lst.indexOf(min)));\n                size--;\n            }else{\n                list.add(max);\n                lst.remove((int) (lst.indexOf(max)));\n                size--;\n            }\n        }\n        return list;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.isEmpty()) return lst;\n        ArrayList<Long> out = new ArrayList<Long>();\n        out.add(Collections.min(lst));\n        while(out.size() < lst.size()){\n            out.add(Collections.max(lst));\n            lst.remove(Collections.max(lst));\n            out.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        // Iterate over input list and add minimum and maximum values to result array.\n        // After every iteration remove minimum and maximum from input list.\n        while(lst.size() > 0) {\n            // Find min and max values in input list.\n            long min = Long.MAX_VALUE;\n            long max = Long.MIN_VALUE;\n            for(Long val : lst) {\n                if(val < min) {\n                    min = val;\n                }\n                if(val > max) {\n                    max = val;\n                }\n            }\n            // Add min and max values to result array.\n            res.add(min);\n            res.add(max);\n            // Remove min and max values from input list.\n            lst.remove((Long)min);\n            lst.remove((Long)max);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new ArrayList<Long>(lst);\n        Collections.sort(sorted);\n        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> tmp = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                tmp.add(sorted.get(i));\n            } else {\n                tmp.add(sorted.get(lst.size() - 1 - i));\n            }\n        }\n        return tmp;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        int n = lst.size();\n        ArrayList<Long> res = new ArrayList<>();\n        for (int i = 0; i < n / 2; i++) {\n            int min_ind = 0;\n            for (int j = 0; j < n - i * 2; j++) {\n                if (lst.get(j) < lst.get(min_ind)) min_ind = j;\n            }\n            res.add(lst.remove(min_ind));\n            if (n - 2 * i - 1 != 0) {\n                int max_ind = 0;\n                for (int j = 0; j < n - i * 2; j++) {\n                    if (lst.get(j) > lst.get(max_ind)) max_ind = j;\n                }\n                res.add(lst.remove(max_ind));\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size() == 0) {\n            return lst;\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        res.add(Collections.min(lst));\n        lst.remove(Collections.min(lst));\n        res.add(Collections.max(lst));\n        lst.remove(Collections.max(lst));\n        for(int i = 0; i < lst.size(); i += 2) {\n            res.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> out = new ArrayList<Long>();\n        if (lst.size() == 0) {\n            return lst;\n        }\n        int minIndex = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(minIndex) > lst.get(i)) {\n                minIndex = i;\n            }\n            if (lst.get(maxIndex) < lst.get(i)) {\n                maxIndex = i;\n            }\n        }\n        out.add(lst.get(minIndex));\n        out.add(lst.get(maxIndex));\n        lst.remove(minIndex);\n        lst.remove(maxIndex);\n        while (!lst.isEmpty()) {\n            minIndex = 0;\n            maxIndex = 0;\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(minIndex) > lst.get(i)) {\n                    minIndex = i;\n                }\n                if (lst.get(maxIndex) < lst.get(i)) {\n                    maxIndex = i;\n                }\n            }\n            out.add(lst.get(minIndex));\n            out.add(lst.get(maxIndex));\n            lst.remove(minIndex);\n            lst.remove(maxIndex);\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        ArrayList<Long> sortedLst = new ArrayList<>(lst);\n        sortedLst.sort(null);\n        ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n        temp.add(sortedLst.get(0));\n        sortedLst.remove(0);\n        for (int i = 1; i < lst.size() + 1; i++) {\n            if (i % 2 == 0) {\n                result.add(temp.get(0));\n                temp.clear();\n            } else {\n                result.add(sortedLst.get(0));\n                sortedLst.remove(0);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> lst1 = new ArrayList<>();\n        ArrayList<Long> lst2 = new ArrayList<>();\n        while(!lst.isEmpty()){\n            Long min = Collections.min(lst);\n            lst1.add(min);\n            lst.remove(min);\n        }\n        while(!lst1.isEmpty()){\n            Long max = Collections.max(lst1);\n            lst2.add(max);\n            lst1.remove(max);\n        }\n        int i=0;\n        while(i<lst2.size()){\n            lst1.add(lst2.get(i));\n            i++;\n        }\n        return lst1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        if(lst.size() < 1) return res;\n        PriorityQueue<Long> pq = new PriorityQueue<>(new Comparator<Long>() {\n            public int compare(Long a, Long b) {\n                return b.compareTo(a);\n            }\n        });\n        for(int i = 0; i < lst.size(); i++) pq.offer(lst.get(i));\n        int i = 0;\n        while(pq.size() > 0) {\n            if(i % 2 == 0) {\n                res.add(pq.poll());\n            } else {\n                res.add(0, pq.poll());\n            }\n            i++;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (lst.isEmpty()) return result;\n        Queue<Long> maxQueue = new PriorityQueue<>(Collections.reverseOrder());\n        Queue<Long> minQueue = new PriorityQueue<>();\n        for (Long i : lst) {\n            maxQueue.add(i);\n            minQueue.add(i);\n        }\n        long max = maxQueue.poll();\n        long min = minQueue.poll();\n        result.add(max);\n        while (!maxQueue.isEmpty() || !minQueue.isEmpty()) {\n            if (maxQueue.isEmpty()) {\n                result.add(min);\n                min = minQueue.poll();\n            } else if (minQueue.isEmpty()) {\n                result.add(max);\n                max = maxQueue.poll();\n            } else {\n                if (max < min) {\n                    result.add(max);\n                    max = maxQueue.poll();\n                } else {\n                    result.add(min);\n                    min = minQueue.poll();\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        return lst.isEmpty() ? lst : new ArrayList<Long>(Stream.of(Collections.min(lst), Collections.max(new ArrayList<Long>(lst))).flatMap(e -> {\n            lst.remove(e);\n            return Stream.of(e, lst.isEmpty() ? null : (long)Collections.max(lst));\n        }).filter(e -> e != null).collect(Collectors.toList()));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // if list is empty\n        if (lst.size() == 0) {\n            return lst;\n        }\n        // if list has one element\n        if (lst.size() == 1) {\n            return lst;\n        }\n        // if list has two elements\n        if (lst.size() == 2) {\n            // if the first element is the minimum of two elements\n            if (lst.get(0) < lst.get(1)) {\n                ArrayList<Long> newList = new ArrayList<Long>();\n                newList.add(lst.get(0));\n                newList.add(lst.get(1));\n                return newList;\n            } else {\n                ArrayList<Long> newList = new ArrayList<Long>();\n                newList.add(lst.get(1));\n                newList.add(lst.get(0));\n                return newList;\n            }\n        }\n        ArrayList<Long> newList = new ArrayList<Long>();\n        long min = lst.get(0);\n        long max = lst.get(0);\n        // find maximum and minimum of the list\n        for (long element : lst) {\n            if (element < min) {\n                min = element;\n            } else if (element > max) {\n                max = element;\n            }\n        }\n        newList.add(min);\n        newList.add(max);\n        lst.remove(max);\n        lst.remove(min);\n        // find maximum and minimum of the rest of the list\n        while (lst.size() != 0) {\n            long minElement = lst.get(0);\n            long maxElement = lst.get(0);\n            // find maximum and minimum of the list\n            for (long element : lst) {\n                if (element < minElement) {\n                    minElement = element;\n                } else if (element > maxElement) {\n                    maxElement = element;\n                }\n            }\n            newList.add(minElement);\n            newList.add(maxElement);\n            lst.remove(maxElement);\n            lst.remove(minElement);\n        }\n        return newList;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        while(!lst.isEmpty()){\n            res.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n        }\n        while(!lst.isEmpty()){\n            res.add(Collections.max(lst));\n            lst.remove(Collections.max(lst));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        // Sort the list\n        Collections.sort(lst);\n        // Find the minimum value\n        long minVal = lst.get(0);\n        // Find the maximum value\n        long maxVal = lst.get(lst.size() - 1);\n        // New list\n        ArrayList<Long> res = new ArrayList<Long>();\n        // While there are still values in the original list\n        while (lst.size() > 0) {\n            // Add the minimum value to the new list\n            res.add(minVal);\n            // Remove it from the original list\n            lst.remove((int)minVal);\n            // If the original list is not empty\n            if (lst.size() > 0) {\n                // Add the maximum value to the new list\n                res.add(maxVal);\n                // Remove it from the original list\n                lst.remove((int)maxVal);\n            }\n        }\n        // Return the new list\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                res.add(lst.stream().min(Comparator.naturalOrder()).get());\n                lst.remove(lst.indexOf(lst.stream().min(Comparator.naturalOrder()).get()));\n            } else {\n                res.add(lst.stream().max(Comparator.naturalOrder()).get());\n                lst.remove(lst.indexOf(lst.stream().max(Comparator.naturalOrder()).get()));\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> out = new ArrayList<Long>();\n        if (lst.isEmpty()) return out;\n        else {\n            int min = lst.indexOf(Collections.min(lst));\n            int max = lst.indexOf(Collections.max(lst));\n            out.add(lst.get(min));\n            out.add(lst.get(max));\n            lst.remove(min);\n            lst.remove(max);\n            return strangeSortList(lst);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> output = new ArrayList<Long>(lst);\n        for (int i = 0; i < output.size(); i++) {\n            long min = Long.MAX_VALUE;\n            long max = Long.MIN_VALUE;\n            for (int j = 0; j < output.size(); j++) {\n                if (j != i && output.get(j) < min) {\n                    min = output.get(j);\n                }\n                if (j != i && output.get(j) > max) {\n                    max = output.get(j);\n                }\n            }\n            output.set(i, min);\n            output.set(output.size() - i - 1, max);\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i = 0; i < lst.size() / 2 + 1; i++) {\n            long max = Long.MIN_VALUE;\n            int ind = -1;\n            for (int j = i; j < lst.size(); j++) {\n                if (lst.get(j) > max) {\n                    max = lst.get(j);\n                    ind = j;\n                }\n            }\n            res.add(lst.get(ind));\n            lst.remove(ind);\n        }\n        res.addAll(lst);\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(Collections.min(lst));\n        while (lst.size() > 0) {\n            lst.remove(Collections.max(lst));\n            result.add(Collections.min(lst));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new ArrayList<Long>(lst);\n        sorted.sort(Comparator.naturalOrder());\n        List<Long> cur = new ArrayList<>();\n        cur.add(sorted.get(0));\n        sorted.remove(0);\n        while(!sorted.isEmpty()){\n            long max = sorted.stream().max(Comparator.naturalOrder()).get();\n            sorted.remove(sorted.indexOf(max));\n            cur.add(max);\n            long min = sorted.stream().min(Comparator.naturalOrder()).get();\n            sorted.remove(sorted.indexOf(min));\n            cur.add(min);\n        }\n        return cur;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.size()==0) return lst;\n        ArrayList<Long> temp = lst;\n        ArrayList<Long> res = new ArrayList<>();\n        int i=0;\n        while(temp.size()>1){\n            long m = temp.stream().mapToLong(x -> x).min().getAsLong();\n            res.add(m);\n            temp.remove(temp.indexOf(m));\n            i++;\n        }\n        res.add(temp.get(0));\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        return lst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0 || lst.size() == 1)\n            return lst;\n        else {\n            ArrayList<Long> res = new ArrayList<Long>();\n            int counter = 0;\n            while (true) {\n                if (counter % 2 == 0) {\n                    int minIndex = 0;\n                    for (int i = 1; i < lst.size(); i++) {\n                        if (lst.get(i) < lst.get(minIndex))\n                            minIndex = i;\n                    }\n                    res.add(lst.get(minIndex));\n                    lst.remove(minIndex);\n                } else {\n                    int maxIndex = 0;\n                    for (int i = 1; i < lst.size(); i++) {\n                        if (lst.get(i) > lst.get(maxIndex))\n                            maxIndex = i;\n                    }\n                    res.add(lst.get(maxIndex));\n                    lst.remove(maxIndex);\n                }\n                counter++;\n                if (lst.size() == 0)\n                    break;\n            }\n            return res;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        // put your code here\n        while(!lst.isEmpty()){\n            result.add(lst.stream().reduce((a, b) -> a > b ? a : b).get());\n            result.add(lst.stream().reduce((a, b) -> a < b ? a : b).get());\n            lst.removeIf(e -> lst.stream().reduce((a, b) -> a < b ? a : b).get() == e ||\n            lst.stream().reduce((a, b) -> a > b ? a : b).get() == e);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        ArrayList<Long> remaining = new ArrayList<Long>();\n        while(!lst.isEmpty()) {\n            output.add(lst.stream().min(Comparator.naturalOrder()).get());\n            lst.remove(lst.stream().min(Comparator.naturalOrder()).getAsInt());\n        }\n        lst = new ArrayList<Long>(remaining);\n        remaining.clear();\n        while(!lst.isEmpty()) {\n            output.add(lst.stream().max(Comparator.naturalOrder()).get());\n            lst.remove(lst.stream().max(Comparator.naturalOrder()).getAsInt());\n        }\n        lst = new ArrayList<Long>(remaining);\n        remaining.clear();\n        while(!lst.isEmpty()) {\n            output.add(lst.stream().min(Comparator.naturalOrder()).get());\n            lst.remove(lst.stream().min(Comparator.naturalOrder()).getAsInt());\n        }\n        return output;\n    }    \n}\n", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newLst = new ArrayList<Long>(lst.size());\n        for(int i = 0; i < lst.size(); i++) {\n            newLst.add(lst.get(lst.indexOf(lst.stream().min((long first, long second) -> Long.compare(first, second)).get())));\n            lst.remove(lst.indexOf(lst.stream().min((long first, long second) -> Long.compare(first, second)).get()));\n        }\n        return newLst;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty())\n            return lst;\n        ArrayList<Long> answer = new ArrayList<>();\n        while (lst.size() > 0) {\n            long min = lst.get(0);\n            long max = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i) < min) {\n                    min = lst.get(i);\n                } else if (lst.get(i) > max) {\n                    max = lst.get(i);\n                }\n            }\n            lst.remove((long)min);\n            lst.remove((long)max);\n            answer.add(min);\n            answer.add(max);\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new ArrayList<>();\n        while (lst.size() > 0) {\n            long min = lst.stream().min(Long::compareTo).get();\n            result.add(min);\n            lst.remove(lst.indexOf(min));\n            if (lst.size() == 0) break;\n            long max = lst.stream().max(Long::compareTo).get();\n            result.add(max);\n            lst.remove(lst.indexOf(max));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        if (lst.size() <= 1) return lst;\n        ArrayList<Long> tmp = new ArrayList<Long>(lst);\n        while (!tmp.isEmpty()) {\n            ret.add(Collections.min(tmp));\n            tmp.remove(Collections.min(tmp));\n            if (tmp.isEmpty()) continue;\n            ret.add(Collections.max(tmp));\n            tmp.remove(Collections.max(tmp));\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        if (lst.size() == 0)\n            return res;\n        int i = 0;\n        while (true) {\n            if (lst.size() - i <= i) {\n                res.add(lst.get(i));\n                i++;\n            } else {\n                res.add(getMax(lst, i));\n            }\n            if (i == lst.size())\n                break;\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        if(lst.isEmpty()) {\n            return lst;\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        PriorityQueue<Long> q = new PriorityQueue<>(Collections.reverseOrder());\n        for(Long l : lst) {\n            q.add(l);\n        }\n        long min = q.poll();\n        while(!q.isEmpty()) {\n            res.add(min);\n            res.add(q.poll());\n            min = q.poll();\n        }\n        res.add(min);\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        int n = lst.size();\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(lst.stream().min(Comparator.naturalOrder()).get());\n            lst.remove(lst.stream().min(Comparator.naturalOrder()).getAsInt());\n            if (i % 2 == 0) {\n                result.add(lst.stream().max(Comparator.naturalOrder()).get());\n                lst.remove(lst.stream().max(Comparator.naturalOrder()).getAsInt());\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sortedLst = new ArrayList<>();\n        if (lst.isEmpty()) {\n            return sortedLst;\n        }\n        while (lst.size() > 1) {\n            sortedLst.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n            sortedLst.add(Collections.max(lst));\n            lst.remove(Collections.max(lst));\n        }\n        sortedLst.add(lst.get(0));\n        return sortedLst;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n            return null;\n        }\n        Float largest = null;\n        Float smallest = null;\n        float greatestDiff = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < greatestDiff) {\n                    largest = numbers.get(i);\n                    smallest = numbers.get(j);\n                    greatestDiff = diff;\n                }\n            }\n        }\n        return new Pair<>(smallest, largest);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Start typing your code here\n        float tmin=numbers.get(0);\n        float dmin=Math.abs(numbers.get(1)-tmin);\n        for(int i=1;i<numbers.size();i++){\n            float t=Math.abs(numbers.get(i)-tmin);\n            if(t<dmin){\n                dmin=t;\n            }else if(t==dmin){\n                tmin=Math.min(tmin,numbers.get(i));\n            }\n        }\n        return Pair.with(tmin,tmin+dmin);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Float[] array = new Float[numbers.size()];\n        Pair<Float, Float> result;\n        Float minDist = (float) Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            array[i] = numbers.get(i);\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float distance = Math.abs(array[i] - array[j]);\n                if (minDist > distance) {\n                    minDist = distance;\n                    result = Pair.with(array[i], array[j]);\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float closestDiff = Float.MAX_VALUE;\n        float first = 0;\n        float second = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float diff = numbers.get(i) - numbers.get(j);\n                if (Math.abs(diff) < closestDiff) {\n                    closestDiff = diff;\n                    first = numbers.get(i);\n                    second = numbers.get(j);\n                }\n            }\n        }\n        if (closestDiff == Float.MAX_VALUE) {\n            return Pair.with(0.0f, 0.0f);\n        }\n        return Pair.with(Math.min(first, second), Math.max(first, second));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float minDifference = (float) Double.POSITIVE_INFINITY;\n        float resultOne = 0.0f;\n        float resultTwo = 0.0f;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float newMinDifference = Math.abs(numbers.get(i) - numbers.get(j));\n                if (minDifference > newMinDifference) {\n                    minDifference = newMinDifference;\n                    resultOne = numbers.get(i);\n                    resultTwo = numbers.get(j);\n                }\n            }\n        }\n        if (resultOne > resultTwo) {\n            return Pair.with(resultTwo, resultOne);\n        } else {\n            return Pair.with(resultOne, resultTwo);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return Pair.with(1.0f, 2.0f);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Float min = Float.MAX_VALUE;\n        Pair<Float, Float> res = null;\n        for (int i = 0; i < numbers.size() - 1; i++)\n        {\n            for (int j = i + 1; j < numbers.size(); j++)\n            {\n                Float dist = (float)Math.abs(numbers.get(i) - numbers.get(j));\n                if (min > dist)\n                {\n                    min = dist;\n                    res = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if(numbers.size() < 2) {\n            return null;\n        }\n        float dist = Math.abs(numbers.get(0) - numbers.get(1));\n        float min = numbers.get(0);\n        float max = numbers.get(0);\n        for(int i = 0; i < numbers.size(); i++) {\n            float current = numbers.get(i);\n            for(int j = 0; j < i; j++) {\n                float compare = numbers.get(j);\n                if(Math.abs(compare - current) < dist) {\n                    dist = Math.abs(compare - current);\n                    if(compare < current) {\n                        min = compare;\n                        max = current;\n                    } else {\n                        min = current;\n                        max = compare;\n                    }\n                }\n            }\n        }\n        return Pair.with(min, max);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n            return null;\n        }\n        ArrayList<Pair<Float, Float>> pairs = new ArrayList<Pair<Float, Float>>();\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                pairs.add(Pair.with(numbers.get(i), numbers.get(j)));\n            }\n        }\n        return Collections.min(pairs, (Pair<Float, Float> a, Pair<Float, Float> b) -> {\n            return Math.abs((float)(a.getValue0() - a.getValue1())) < Math.abs((float)(b.getValue0() - b.getValue1())) ? -1 : 1;\n        });", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float[] nums = numbers.stream().mapToFloat(Float::floatValue).toArray();\n        Arrays.sort(nums);\n        return Pair.with(nums[0], nums[1]);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float minDistance = Math.abs(numbers.get(0) - numbers.get(1));\n        Pair<Float, Float> minPair = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    minPair = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return minPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if(numbers.size()<2){\n            return new Pair<Float, Float>((float)0, (float)0);\n        }\n        float min=Math.abs(numbers.get(0)-numbers.get(1));\n        float minFirst=-1,minSecond=-1;\n        for(int i=0;i<numbers.size();i++){\n            for(int j=i+1;j<numbers.size();j++){\n                float temp=Math.abs(numbers.get(i)-numbers.get(j));\n                if(min>temp){\n                    min=temp;\n                    minFirst=numbers.get(i);\n                    minSecond=numbers.get(j);\n                }\n            }\n        }\n        return new Pair<Float, Float>(minFirst,minSecond);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = (float) Math.abs(numbers.get(1) - numbers.get(0));\n        float index1 = numbers.get(0);\n        float index2 = numbers.get(1);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = 0; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < min) {\n                    min = (float) Math.abs(numbers.get(i) - numbers.get(j));\n                    index1 = numbers.get(i);\n                    index2 = numbers.get(j);\n                }\n            }\n        }\n        return Pair.with(index1, index2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Float> numbersCopy = new ArrayList<Float>(numbers);\n        ArrayList<Float> sortedNumbers = new ArrayList<Float>(numbersCopy);\n        Collections.sort(sortedNumbers);\n        float closestDistance = Float.MAX_VALUE;\n        float closestLower = sortedNumbers.get(0);\n        float closestUpper = sortedNumbers.get(1);\n        for (int i = 0; i < sortedNumbers.size() - 1; i++) {\n            float lower = sortedNumbers.get(i);\n            float upper = sortedNumbers.get(i + 1);\n            float distance = upper - lower;\n            if (closestDistance > distance) {\n                closestLower = lower;\n                closestUpper = upper;\n                closestDistance = distance;\n            }\n        }\n        return Pair.with(closestLower, closestUpper);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        double min = Double.MAX_VALUE;\n        float i1 = 0.0f;\n        float i2 = 0.0f;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double dist = Math.pow(numbers.get(i) - numbers.get(j), 2);\n                if (dist < min) {\n                    min = dist;\n                    i1 = numbers.get(i);\n                    i2 = numbers.get(j);\n                }\n            }\n        }\n        return Pair.with(i1, i2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n            return Pair.with(0f, 0f);\n        }\n        Float closest = 0f;\n        Float secondClosest = 0f;\n        float diff = 0f;\n        float secondDiff = 0f;\n        for (int i = 0; i < numbers.size(); i++) {\n            Float currentNumber = numbers.get(i);\n            for (int j = 0; j < numbers.size(); j++) {\n                if (i != j) {\n                    Float compareNumber = numbers.get(j);\n                    float diff = Math.abs(currentNumber - compareNumber);\n                    float secondDiff = Math.abs(secondClosest - compareNumber);\n                    if (diff < secondDiff) {\n                        secondClosest = closest;\n                        closest = compareNumber;\n                    } else if (diff < secondDiff && diff > secondDiff) {\n                        secondClosest = compareNumber;\n                    }\n                }\n            }\n        }\n        return Pair.with(closest, secondClosest);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        double closestDistance = Double.MAX_VALUE;\n        Float firstNumber = null;\n        Float secondNumber = null;\n        for (Float number : numbers) {\n            for (Float anotherNumber : numbers) {\n                if (!number.equals(anotherNumber)) {\n                    double distance = Math.abs(number - anotherNumber);\n                    if (closestDistance > distance) {\n                        closestDistance = distance;\n                        firstNumber = number;\n                        secondNumber = anotherNumber;\n                    }\n                }\n            }\n        }\n        return Pair.with(firstNumber, secondNumber);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> result = new Pair<Float, Float>(null, null);\n        ArrayList<Float> sortedNumbers = numbers.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n        if(sortedNumbers.size() >= 2) {\n            float[] list1 = new float[sortedNumbers.size() - 1];\n            float[] list2 = new float[sortedNumbers.size() - 1];\n            for(int i = 0; i < list1.length; i++) {\n                list1[i] = (sortedNumbers.get(i + 1) - sortedNumbers.get(i));\n                list2[i] = (sortedNumbers.get(i) - sortedNumbers.get(i + 1));\n            }\n            float[] minList = list1;\n            float minValue = Arrays.stream(minList).min().getAsFloat();\n            int minIndex = Arrays.stream(minList).mapToInt(f -> f.equals(minValue) ? Arrays.asList(list1).indexOf(f) : -1).filter(i -> i != -1).findFirst().getAsInt();\n            result.setValue0(sortedNumbers.get(minIndex));\n            result.setValue1(sortedNumbers.get(minIndex + 1));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float closestDiff = Float.MAX_VALUE;\n        Pair<Float, Float> closestPair = null;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < closestDiff) {\n                    closestDiff = diff;\n                    closestPair = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // BEGIN SOLUTION\n        // Default values in case the list is empty\n        float smallestDifference = 1000000000.0f;\n        Pair<Float, Float> result = null;\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                float difference = Math.abs(numbers.get(i) - numbers.get(j));\n                if(difference < smallestDifference) {\n                    smallestDifference = difference;\n                    result = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;\n        // END SOLUTION", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float result = 0.0f;\n        int resultIndex1 = 0;\n        int resultIndex2 = 0;\n        int minIndex = 0;\n        int minIndex2 = 0;\n        float min1 = Float.MAX_VALUE;\n        float min2 = Float.MAX_VALUE;\n        float tempDiff = 0.0f;\n        float tempDiff2 = 0.0f;\n        float minDiff = Float.MAX_VALUE;\n        float minDiff2 = Float.MAX_VALUE;\n        // STEP 1: Find the closest two numbers.\n        // We have to scan the whole array, so O(n).\n        for (int i = 0; i < numbers.size(); i++) {\n            // Is this the smallest absolute value difference between all elements so far?\n            if (Math.abs(numbers.get(i)) < min1) {\n                // If yes, save this one.\n                minDiff = Math.abs(numbers.get(i));\n                min1 = numbers.get(i);\n                minIndex = i;\n            }\n            // Is this the second smallest absolute value difference between all elements so far?\n            if (Math.abs(numbers.get(i)) < min2 && Math.abs(numbers.get(i)) != min1) {\n                // If yes, save this one.\n                minDiff2 = Math.abs(numbers.get(i));\n                min2 = numbers.get(i);\n                minIndex2 = i;\n            }\n        }\n        // STEP 2: Check which of the two closest numbers is smaller (1st) and return it in order.\n        tempDiff = Math.abs(numbers.get(minIndex) - numbers.get(minIndex2));\n        if (numbers.get(minIndex) < numbers.get(minIndex2)) {\n            resultIndex1 = minIndex;\n            resultIndex2 = minIndex2;\n        } else {\n            resultIndex1 = minIndex2;\n            resultIndex2 = minIndex;\n        }\n        return new Pair<Float, Float>(numbers.get(resultIndex1), numbers.get(resultIndex2));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float closest = Float.MAX_VALUE;\n        ArrayList<Float> closestPair = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i; j < numbers.size(); j++) {\n                float distance = (float)Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < closest) {\n                    closestPair.clear();\n                    closestPair.add(numbers.get(i));\n                    closestPair.add(numbers.get(j));\n                    closest = distance;\n                } else if (distance == closest) {\n                    closestPair.add(numbers.get(i));\n                    closestPair.add(numbers.get(j));\n                }\n            }\n        }\n        return Pair.with(Collections.min(closestPair), Collections.max(closestPair));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers == null) {\n            throw new IllegalArgumentException(\"Error: findClosestElements argument cannot be null.\");\n        }\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Error: findClosestElements argument array list cannot have fewer than two elements.\");\n        }\n        float closestPairDistance = Float.POSITIVE_INFINITY;\n        Pair<Float, Float> closestPair = null;\n        for (int i = 0; i < numbers.size(); ++i) {\n            float target = numbers.get(i);\n            for (int j = i + 1; j < numbers.size(); ++j) {\n                float other = numbers.get(j);\n                float candidateDistance = Math.abs(target - other);\n                if (candidateDistance < closestPairDistance) {\n                    closestPairDistance = candidateDistance;\n                    if (target < other) {\n                        closestPair = new Pair<Float, Float>(target, other);\n                    } else {\n                        closestPair = new Pair<Float, Float>(other, target);\n                    }\n                }\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = numbers.get(0), max = numbers.get(0);\n        float minDif = numbers.get(1) - numbers.get(0);\n        float maxDif = numbers.get(1) - numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float dif = numbers.get(j) - numbers.get(i);\n                if (minDif > dif) {\n                    min = Math.min(numbers.get(i), numbers.get(j));\n                    max = Math.max(numbers.get(i), numbers.get(j));\n                    minDif = dif;\n                }\n                if (maxDif < dif) {\n                    min = Math.min(numbers.get(i), numbers.get(j));\n                    max = Math.max(numbers.get(i), numbers.get(j));\n                    maxDif = dif;\n                }\n            }\n        }\n        return Pair.with(min, max);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float closestPair = Float.MAX_VALUE;\n        float smallestPair = Float.MAX_VALUE;\n        Pair<Float, Float> closest = Pair.with(Float.MAX_VALUE, Float.MAX_VALUE);\n        for(int i = 0; i < numbers.size() - 1; i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                float temp = Math.abs(numbers.get(i) - numbers.get(j));\n                if(temp < smallestPair) {\n                    smallestPair = temp;\n                    closest = Pair.with(numbers.get(i), numbers.get(j));\n                }\n                if(temp < closestPair) {\n                    closestPair = temp;\n                    closest = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return closest;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // the base case\n        if (numbers.size() < 2) {\n            return null;\n        }\n        // set the initial closest number to the first number in the array\n        Float closestNumber = numbers.get(0);\n        // set the initial distance from the first number in the array to itself\n        Float minDist = 0.0f;\n        // initialize the second closest number to the first number in the array\n        Float secondClosestNumber = numbers.get(0);\n        // initialize the second closest distance to the first number in the array\n        Float secondMinDist = 0.0f;\n        // loop through the array and find the closest and second closest numbers\n        for (Float number : numbers) {\n            Float dist = (float)Math.abs(number - closestNumber);\n            if (dist < minDist) {\n                secondMinDist = minDist;\n                secondClosestNumber = closestNumber;\n                minDist = dist;\n                closestNumber = number;\n            } else if (dist < secondMinDist) {\n                secondMinDist = dist;\n                secondClosestNumber = number;\n            }\n        }\n        // return the closest and second closest numbers in order\n        return Pair.with(secondClosestNumber, closestNumber);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = numbers.get(0) - numbers.get(1);\n        int i = 1, j = 1;\n        for (int k = 1; k < numbers.size(); k++) {\n            if (numbers.get(k) - numbers.get(k - 1) < min) {\n                min = numbers.get(k) - numbers.get(k - 1);\n                i = k - 1;\n                j = k;\n            }\n        }\n        return Pair.with(numbers.get(i), numbers.get(j));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Float> diffs = new ArrayList<Float>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            diffs.add(numbers.get(i + 1) - numbers.get(i));\n        }\n        int minIndex = -1;\n        Float min = diffs.get(0);\n        for (int i = 0; i < diffs.size(); i++) {\n            if (min > diffs.get(i)) {\n                min = diffs.get(i);\n                minIndex = i;\n            }\n        }\n        return new Pair<Float, Float>(numbers.get(minIndex), numbers.get(minIndex + 1));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Map<Float, List<Float>> differenceMap = numbers.stream()\n                .collect(Collectors.toMap(\n                    number -> number,\n                    number -> numbers.stream()\n                        .filter(otherNumber -> !number.equals(otherNumber))\n                        .collect(Collectors.toList())\n                ));\n        return differenceMap.entrySet().stream()\n                .sorted((first, second) -> {\n                    Float firstDifference = first.getValue().stream()\n                            .map(number -> Math.abs(number - first.getKey()))\n                            .min().get();\n                    Float secondDifference = second.getValue().stream()\n                            .map(number -> Math.abs(number - second.getKey()))\n                            .min().get();\n                    return Float.compare(firstDifference, secondDifference);\n                })\n                .map(entry -> Pair.with(entry.getKey(), entry.getValue().get(0)))\n                .findFirst().get();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Write your code here\n        float min = 0.0f;\n        float max = 0.0f;\n        ArrayList<Float> list1 = new ArrayList<>();\n        list1.add(1.0f);\n        list1.add(2.0f);\n        list1.add(3.0f);\n        list1.add(4.0f);\n        list1.add(5.0f);\n        list1.add(2.0f);\n        for(int i = 0; i < list1.size(); i++) {\n            if(numbers.size() > 2) {\n                for(int j = 0; j < numbers.size(); j++) {\n                    if(Math.abs(list1.get(i) - numbers.get(j)) < min) {\n                        min = Math.abs(list1.get(i) - numbers.get(j));\n                        max = list1.get(i);\n                    }\n                }\n            } else if(numbers.size() == 2) {\n                for(int j = 0; j < 1; j++) {\n                    if(Math.abs(list1.get(i) - numbers.get(j)) < min) {\n                        min = Math.abs(list1.get(i) - numbers.get(j));\n                        max = list1.get(i);\n                    }\n                }\n            } else {\n                return null;\n            }\n        }\n        Pair<Float, Float> pair = Pair.with(max, min);\n        return pair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // arraylist is already sorted\n        Pair<Float, Float> minPair = new Pair<Float, Float>((Float)numbers.get(0), (Float)numbers.get(1));\n        float minDistance = Math.abs(minPair.getValue0() - minPair.getValue1());\n        for (int i = 1; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (minDistance > distance) {\n                    minDistance = distance;\n                    minPair = new Pair<Float, Float>((Float)numbers.get(i), (Float)numbers.get(j));\n                }\n            }\n        }\n        return minPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = Float.MAX_VALUE;\n        Float[] r = new Float[2];\n        for(int i = 0; i < numbers.size() - 1; i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                float d = numbers.get(i) - numbers.get(j);\n                if(Math.abs(d) < min) {\n                    min = Math.abs(d);\n                    r[0] = numbers.get(i);\n                    r[1] = numbers.get(j);\n                }\n            }\n        }\n        return Pair.with(r[0], r[1]);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> resultPair = Pair.with(0.0f, 0.0f);\n        float closestValue = numbers.get(0) - numbers.get(1);\n        float first = numbers.get(0);\n        float second = numbers.get(1);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = 0; j < numbers.size(); j++) {\n                float absValue = Math.abs(numbers.get(i) - numbers.get(j));\n                if (absValue < closestValue) {\n                    resultPair = Pair.with(numbers.get(i), numbers.get(j));\n                    closestValue = absValue;\n                    first = numbers.get(i);\n                    second = numbers.get(j);\n                }\n            }\n        }\n        if (first > second) {\n            resultPair = Pair.with(second, first);\n        }\n        return resultPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> result = null;\n        float minDiff = Float.MAX_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float diff = numbers.get(i) - numbers.get(j);\n                if (Math.abs(diff) < minDiff) {\n                    minDiff = Math.abs(diff);\n                    result = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float closest = Float.MAX_VALUE;\n        float closestFirst, closestSecond;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            float difference = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (difference < closest) {\n                closest = difference;\n                closestFirst = numbers.get(i);\n                closestSecond = numbers.get(i + 1);\n            }\n        }\n        return Pair.with(closestFirst, closestSecond);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float firstMin = numbers.get(0);\n        float secondMin = numbers.get(1);\n        for (float num : numbers) {\n            if (Math.abs(firstMin - num) > Math.abs(secondMin - num)) {\n                firstMin = secondMin;\n                secondMin = num;\n            }\n        }\n        if (firstMin == secondMin) return new Pair<Float, Float>(firstMin, firstMin);\n        return new Pair<Float, Float>(firstMin, secondMin);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Float> copy = new ArrayList<Float>(numbers);\n        float min = Float.MAX_VALUE;\n        int i = 0;\n        for (int a = 0; a < copy.size(); a++) {\n            for (int b = a; b < copy.size(); b++) {\n                float temp = Math.abs(copy.get(a) - copy.get(b));\n                if (temp < min) {\n                    i = a;\n                    j = b;\n                    min = temp;\n                }\n            }\n        }\n        return new Pair<Float, Float>(copy.get(i), copy.get(j));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float minDistance = numbers.get(0) - numbers.get(1);\n        Pair<Float, Float> minPair = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                float distance = numbers.get(i) - numbers.get(j);\n                if(Math.abs(distance) < Math.abs(minDistance)) {\n                    minDistance = distance;\n                    minPair = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return minPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> closestPair = null;\n        float minimumDifference = Float.MAX_VALUE;\n        float a, b;\n        for(int i = 0; i < numbers.size() - 1; i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                a = numbers.get(i);\n                b = numbers.get(j);\n                float difference = Math.abs(a - b);\n                if(difference < minimumDifference) {\n                    minimumDifference = difference;\n                    closestPair = new Pair<>(a, b);\n                }\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = numbers.get(0);\n        for(int i = 1; i < numbers.size(); i++)\n            if(numbers.get(i) < min)\n                min = numbers.get(i);\n        float max = min;\n        for(int i = 1; i < numbers.size(); i++)\n            if(numbers.get(i) > max)\n                max = numbers.get(i);\n        Pair<Float, Float> minMax = null;\n        for(int i = 0; i < numbers.size(); i++)\n            for(int j = i + 1; j < numbers.size(); j++) {\n                float diff1 = Math.abs(numbers.get(i) - numbers.get(j));\n                float diff2 = Math.abs(min - max);\n                if(diff1 < diff2) {\n                    min = Math.min(numbers.get(i), numbers.get(j));\n                    max = Math.max(numbers.get(i), numbers.get(j));\n                    minMax = Pair.with(min, max);\n                }\n            }\n        return minMax;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // BEGIN Problem 1\n        int min = Math.abs(numbers.get(0) - numbers.get(1));\n        Pair<Float, Float> result = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                int temp = Math.abs(numbers.get(i) - numbers.get(j));\n                if (temp < min) {\n                    min = temp;\n                    result = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;\n        // END Problem 1", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = (float) Math.abs(numbers.get(0) - numbers.get(1));\n        Pair<Float, Float> minPair = new Pair(numbers.get(0), numbers.get(1));\n        for(int i = 0; i < numbers.size() - 1; i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                float newMin = (float) Math.abs(numbers.get(i) - numbers.get(j));\n                if(newMin < min) {\n                    min = newMin;\n                    minPair = new Pair(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return minPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Float> diff = new ArrayList<Float>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            diff.add(numbers.get(i + 1) - numbers.get(i));\n        }\n        float min = diff.get(0);\n        int index = 0;\n        for (int i = 0; i < diff.size(); i++) {\n            if (min > diff.get(i)) {\n                min = diff.get(i);\n                index = i;\n            }\n        }\n        if (numbers.get(index) < numbers.get(index + 1)) {\n            return Pair.with(numbers.get(index), numbers.get(index + 1));\n        } else {\n            return Pair.with(numbers.get(index + 1), numbers.get(index));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> output = Pair.with(0.0f,0.0f);\n        Float min = Float.POSITIVE_INFINITY;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < min) {\n                    min = Math.abs(numbers.get(i) - numbers.get(j));\n                    output = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must contain at least two elements.\");\n        }\n        Pair<Float, Float> minPair = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        float minDistance = Math.abs(numbers.get(0) - numbers.get(1));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < minDistance) {\n                    minPair = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                    minDistance = distance;\n                }\n            }\n        }\n        return minPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float minDistance = Float.MAX_VALUE;\n        Pair<Float, Float> closestPair = new Pair<Float, Float>(0.0f, 0.0f);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < minDistance) {\n                    closestPair = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                    minDistance = distance;\n                }\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float minDiff = Float.MAX_VALUE;\n        float min1 = numbers.get(0), min2 = numbers.get(1);\n        for (int i = 0; i < numbers.size(); ++i) {\n            for (int j = i + 1; j < numbers.size(); ++j) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < minDiff) {\n                    min1 = Math.min(numbers.get(i), numbers.get(j));\n                    min2 = Math.max(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return Pair.with(min1, min2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n            return null;\n        }\n        Pair<Float, Float> outPair = null;\n        float distance = Math.abs(numbers.get(0) - numbers.get(1));\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float currentDistance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (currentDistance < distance) {\n                    outPair = Pair.with(numbers.get(i), numbers.get(j));\n                    distance = currentDistance;\n                }\n            }\n        }\n        return outPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = Float.MAX_VALUE;\n        Pair<Float, Float> pair = null;\n        for (float i : numbers) {\n            for (float j : numbers) {\n                float distance = Math.abs(i - j);\n                if (distance <= min) {\n                    min = distance;\n                    pair = Pair.with(Math.min(i, j), Math.max(i, j));\n                }\n            }\n        }\n        return pair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // BEGIN_YOUR_CODE\n        ArrayList<Float> pairs = new ArrayList<Float>();\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                pairs.add(numbers.get(i));\n                pairs.add(numbers.get(j));\n            }\n        }\n        return (Pair<Float, Float>)min(pairs, (Pair<Float, Float> pair1, Pair<Float, Float> pair2) -> Math.abs(pair1.getValue0() - pair1.getValue1()) - Math.abs(pair2.getValue0() - pair2.getValue1()));\n        // END_YOUR_CODE", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = (float)Integer.MAX_VALUE;\n        int minIndex1 = -1;\n        int minIndex2 = -1;\n        int i = 0;\n        float cur;\n        while (i < numbers.size()) {\n            cur = numbers.get(i);\n            int j = i + 1;\n            while (j < numbers.size()) {\n                float tmp = Math.abs(cur - numbers.get(j));\n                if (tmp < min) {\n                    minIndex1 = i;\n                    minIndex2 = j;\n                    min = tmp;\n                }\n                j++;\n            }\n            i++;\n        }\n        return Pair.with(numbers.get(minIndex1), numbers.get(minIndex2));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float smallestDifference = numbers.get(0) - numbers.get(1);\n        Pair<Float, Float> closestPair = null;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float difference = Math.abs(numbers.get(i) - numbers.get(j));\n                if (difference < smallestDifference) {\n                    smallestDifference = difference;\n                    closestPair = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() <= 1) {\n            throw new IllegalArgumentException(\"The array list must have at least two elements.\");\n        }\n        float smallestDiff = (float)Math.abs(numbers.get(1) - numbers.get(0));\n        Pair<Float, Float> bestPair = Pair.with(numbers.get(0), numbers.get(1));\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float currentDiff = (float)Math.abs(numbers.get(i) - numbers.get(j));\n                if (smallestDiff > currentDiff) {\n                    smallestDiff = currentDiff;\n                    bestPair = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return bestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers == null) {\n            return null;\n        }\n        if (numbers.size() < 2) {\n            return null;\n        }\n        float minValue = numbers.get(0);\n        float maxValue = numbers.get(0);\n        float minDiff = numbers.get(0);\n        int minIndex = 0;\n        int maxIndex = 0;\n        for (int i = 1; i < numbers.size(); i++) {\n            float x = numbers.get(i);\n            if (x < minValue) {\n                minValue = x;\n                minDiff = Math.abs(x - minValue);\n                minIndex = i;\n            }\n            if (x > maxValue) {\n                maxValue = x;\n                maxIndex = i;\n            }\n            float diff = Math.abs(x - minValue);\n            if (diff < minDiff) {\n                minDiff = diff;\n                minIndex = i;\n            }\n        }\n        return Pair.with(numbers.get(minIndex), numbers.get(maxIndex));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Pair<Float, Float>> diff = new ArrayList<Pair<Float, Float>>();\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                Pair<Float, Float> temp = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                diff.add(temp);\n            }\n        }\n        Collections.sort(diff, new Comparator<Pair<Float, Float>>() {\n            public int compare(Pair<Float, Float> p1, Pair<Float, Float> p2) {\n                return Double.compare(Math.abs(p1.getValue0() - p1.getValue1()), Math.abs(p2.getValue0() - p2.getValue1()));\n            }\n        });\n        return diff.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float prevDiff = (float) (Math.abs(numbers.get(0) - numbers.get(1)));\n        float smallestDiff = prevDiff;\n        float first = numbers.get(0);\n        float second = numbers.get(1);\n        int i = 2;\n        int size = numbers.size();\n        while (i < size) {\n            float currentDiff = (float) (Math.abs(numbers.get(i) - numbers.get(i - 1)));\n            if (currentDiff < smallestDiff) {\n                smallestDiff = currentDiff;\n                first = numbers.get(i - 1);\n                second = numbers.get(i);\n            }\n            i++;\n        }\n        return Pair.with(first, second);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return Pair.with(numbers.stream().min(Float::compare).get(), numbers.stream().max(Float::compare).get());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Float> list = new ArrayList<>(numbers);\n        list.sort(new Comparator<Float>() {\n            @Override\n            public int compare(Float a, Float b) {\n                return a.compareTo(b);\n            }\n        });\n        float min = list.get(0) - list.get(1);\n        Pair<Float, Float> minPair = new Pair<>(list.get(0), list.get(1));\n        for (int i = 2; i < list.size(); i++) {\n            float d = list.get(i) - list.get(i - 1);\n            if (d < min) {\n                minPair = new Pair<>(list.get(i - 1), list.get(i));\n                min = d;\n            }\n        }\n        return minPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n            throw new RuntimeException(\"`numbers` cannot be less than size 2\");\n        }\n        if (numbers.size() == 2) {\n            return Pair.with(numbers.get(0), numbers.get(1));\n        }\n        float first = (float) 0.0;\n        float second = (float) 0.0;\n        float bestDistance = (float) Float.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            float a = numbers.get(i);\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float b = numbers.get(j);\n                float diff = Math.abs(a - b);\n                if (diff < bestDistance) {\n                    first = a;\n                    second = b;\n                    bestDistance = diff;\n                }\n            }\n        }\n        return Pair.with(first, second);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Sort the array list to allow us to compare successive elements for closeness\n        numbers.sort(null);\n        // Create a pair to hold the two numbers we will return, and also find the distance between them\n        Pair<Float, Float> closestPair = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        float closestDistance = Math.abs(numbers.get(0) - numbers.get(1));\n        // Loop through the array list, comparing each pair of successive elements for closeness\n        for (int i = 1; i < numbers.size() - 1; i++) {\n            float distance = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (distance < closestDistance) {\n                closestPair = new Pair<Float, Float>(numbers.get(i), numbers.get(i + 1));\n                closestDistance = distance;\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Pair<Float, Float>> pairList = new ArrayList<Pair<Float, Float>>();\n        for (Float num1 : numbers) {\n            for (Float num2 : numbers) {\n                pairList.add(Pair.with(num1, num2));\n            }\n        }\n        float maxDiff = Float.MAX_VALUE;\n        Pair<Float, Float> answer = null;\n        for (Pair<Float, Float> pair : pairList) {\n            float diff = Math.abs(pair.getValue0() - pair.getValue1());\n            if (diff < maxDiff) {\n                maxDiff = diff;\n                answer = pair;\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Float> sorted = (ArrayList<Float>)numbers.stream().sorted().collect(Collectors.toList());\n        float smallest = sorted.get(0);\n        float largest = sorted.get(sorted.size() - 1);\n        float first = sorted.get(0);\n        for (int i = 1; i < sorted.size(); i++) {\n            float current = sorted.get(i);\n            if (Math.abs(current - first) < Math.abs(largest - smallest)) {\n                largest = current;\n                smallest = first;\n            } else {\n                break;\n            }\n            first = current;\n        }\n        return Pair.with(smallest, largest);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float minDist = Float.MAX_VALUE;\n        Pair<Float, Float> result = new Pair<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float dist = Math.abs(numbers.get(i) - numbers.get(j));\n                if (dist < minDist) {\n                    minDist = dist;\n                    result = new Pair<>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> output = null;\n        int min = -1;\n        int max = -1;\n        int i = 0;\n        for (i = 0; i < numbers.size() - 1; i++) {\n            int diff = (int) Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < min || min == -1) {\n                min = diff;\n                max = i;\n            }\n            diff = (int) Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff > max) {\n                max = diff;\n                min = i;\n            }\n        }\n        return Pair.with(numbers.get(min), numbers.get(max));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float smallestDiff = numbers.get(0) - numbers.get(1);\n        Pair<Float, Float> answer = new Pair<>(numbers.get(0), numbers.get(1));\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if(diff < smallestDiff) {\n                    smallestDiff = diff;\n                    answer = new Pair<>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float closest = Float.MAX_VALUE;\n        float index1 = 0;\n        float index2 = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = 0; j < numbers.size(); j++) {\n                float temp = Math.abs(numbers.get(i) - numbers.get(j));\n                if (temp < closest && i != j) {\n                    closest = temp;\n                    index1 = numbers.get(i);\n                    index2 = numbers.get(j);\n                }\n            }\n        }\n        return new Pair<Float, Float>(Math.min(index1, index2), Math.max(index1, index2));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> minPair = new Pair<>(numbers.get(0), numbers.get(1));\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                if(numbers.get(i).floatValue() - numbers.get(j).floatValue() == 0) {\n                    minPair = new Pair<>(numbers.get(i), numbers.get(j));\n                } else if(numbers.get(i).floatValue() - numbers.get(j).floatValue() < minPair.getValue1().floatValue() - minPair.getValue2().floatValue()) {\n                    minPair = new Pair<>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return minPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = Math.abs(numbers.get(0) - numbers.get(1));\n        Pair<Float, Float> minPair = null;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float cur = Math.abs(numbers.get(i) - numbers.get(j));\n                if (cur < min) {\n                    min = cur;\n                    minPair = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return minPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = Float.MAX_VALUE;\n        float x = 0;\n        float y = 0;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float tmp = Math.abs(numbers.get(i) - numbers.get(j));\n                if (tmp < min) {\n                    min = tmp;\n                    x = numbers.get(i);\n                    y = numbers.get(j);\n                }\n            }\n        }\n        return new Pair<>(Math.min(x, y), Math.max(x, y));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        int difference = Integer.MAX_VALUE;\n        float left, right;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                int d = Math.abs((int)numbers.get(i) - (int)numbers.get(j));\n                if (d < difference) {\n                    difference = d;\n                    left = numbers.get(i);\n                    right = numbers.get(j);\n                }\n            }\n        }\n        return Pair.with(left, right);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float diff;\n        int index1 = 0;\n        int index2 = 0;\n        float number1 = numbers.get(index1);\n        float number2 = numbers.get(index2);\n        // Checking whether two same numbers exist\n        diff = Math.abs(number1 - number2);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float d = Math.abs(numbers.get(i) - numbers.get(j));\n                if (d < diff) {\n                    diff = d;\n                    index1 = i;\n                    index2 = j;\n                    number1 = numbers.get(index1);\n                    number2 = numbers.get(index2);\n                }\n            }\n        }\n        return Pair.with(number1, number2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if(numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must be of at least length two.\");\n        }\n        float minDistance = numbers.get(1) - numbers.get(0);\n        float smallestMinDistance = numbers.get(0) + minDistance;\n        float smallestMaxDistance = numbers.get(0) - minDistance;\n        float smallestMaxDistancePrior = numbers.get(0) - minDistance;\n        float maxDistance = numbers.get(numbers.size() - 1) - numbers.get(numbers.size() - 2);\n        for(float i = 2; i < numbers.size(); i++) {\n            if(Math.abs(numbers.get(i - 1) - numbers.get(i)) < minDistance) {\n                minDistance = numbers.get(i - 1) - numbers.get(i);\n            }\n        }\n        if(smallestMinDistance == numbers.get(0) - minDistance || smallestMaxDistance == numbers.get(0) + minDistance) {\n            return Pair.with(smallestMaxDistancePrior, smallestMaxDistance);\n        }\n        else {\n            return Pair.with(smallestMinDistance, smallestMaxDistance);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float firstDistance = Float.POSITIVE_INFINITY;\n        float secondDistance = Float.POSITIVE_INFINITY;\n        float firstNumber = 0.0f;\n        float secondNumber = 0.0f;\n        // Looping through the list of numbers.\n        for (float number : numbers) {\n            // If the number is not the same as the first number.\n            if (number != firstNumber) {\n                // If the current number and the first number are closer to each other than the current distance.\n                if (Math.abs(firstNumber - number) < firstDistance) {\n                    // Updating the values.\n                    secondNumber = firstNumber;\n                    firstNumber = number;\n                    secondDistance = firstDistance;\n                    firstDistance = Math.abs(firstNumber - number);\n                }\n                // If the current number and the first number are not closer to each other than the current distance.\n                else if (Math.abs(firstNumber - number) < secondDistance) {\n                    // Updating the values.\n                    secondNumber = number;\n                    secondDistance = Math.abs(firstNumber - number);\n                }\n            }\n        }\n        // Creating and returning the pair.\n        return Pair.with(firstNumber, secondNumber);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float[] array = new float[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            array[i] = numbers.get(i);\n        }\n        Arrays.sort(array);\n        float distance1 = array[1] - array[0];\n        float distance2 = array[array.length - 1] - array[array.length - 2];\n        if (distance1 <= distance2) {\n            return Pair.with(array[0], array[1]);\n        } else {\n            return Pair.with(array[array.length - 2], array[array.length - 1]);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Write your code here\n        Pair<Float, Float> answer = null;\n        if(numbers.size() < 2)\n            return answer;\n        \n        float min = Float.MAX_VALUE;\n        Pair<Float, Float> minPair = null;\n        for(int i = 0; i < numbers.size() - 1; i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                if(Math.abs(numbers.get(i) - numbers.get(j)) < min) {\n                    min = Math.abs(numbers.get(i) - numbers.get(j));\n                    minPair = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return minPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        int len = numbers.size();\n        int small = 0, large = 1;\n        float sval = 0.0f, lval = 0.0f;\n        float dist_min = numbers.get(0) - numbers.get(1);\n        float dist = 0.0f;\n        float sdiff = 0.0f, ldiff = 0.0f;\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j < len; j++) {\n                if (i == j) {\n                    continue;\n                }\n                dist = numbers.get(i) - numbers.get(j);\n                if (dist < 0) {\n                    dist = -dist;\n                }\n                if (dist <= dist_min) {\n                    dist_min = dist;\n                    small = i;\n                    large = j;\n                }\n            }\n        }\n        sval = numbers.get(small);\n        lval = numbers.get(large);\n        sdiff = Math.abs(sval - numbers.get(large));\n        ldiff = Math.abs(lval - numbers.get(small));\n        if (sdiff < ldiff) {\n            return Pair.with(sval, lval);\n        } else {\n            return Pair.with(lval, sval);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // add your code here\n        if (numbers.size() < 2) {\n            return new ImmutablePair(0.0f, 0.0f);\n        }\n\n        ArrayList<Float> diffs = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            diffs.add(Math.abs(numbers.get(i) - numbers.get(i + 1)));\n        }\n\n        return new ImmutablePair(numbers.get(diffs.indexOf(Collections.min(diffs))), numbers.get(diffs.indexOf(Collections.min(diffs)) + 1));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float smallest = Float.POSITIVE_INFINITY;\n        float secondSmallest = Float.POSITIVE_INFINITY;\n        Pair<Float, Float> pair = Pair.with(1f,1f);\n        float distance1 = Float.POSITIVE_INFINITY;\n        float distance2 = Float.POSITIVE_INFINITY;\n        for(int i = 0; i < numbers.size(); i++){\n            if(numbers.get(i) < smallest){\n                distance2 = Math.abs(secondSmallest - numbers.get(i));\n                distance1 = Math.abs(smallest - numbers.get(i));\n                smallest = numbers.get(i);\n                secondSmallest = numbers.get(i-1);\n            }\n            if(numbers.get(i) < secondSmallest && numbers.get(i) > smallest){\n                if(Math.abs(secondSmallest - numbers.get(i)) < distance2){\n                    distance2 = Math.abs(secondSmallest - numbers.get(i));\n                    secondSmallest = numbers.get(i);\n                }\n            }\n        }\n        pair = Pair.with(smallest, secondSmallest);\n        return pair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float closest = (float)numbers.get(0);\n        float secondClosest = (float)numbers.get(1);\n        float distance = (float)Math.abs(numbers.get(0) - numbers.get(1));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float tempDistance = (float)Math.abs(numbers.get(i) - numbers.get(j));\n                if (tempDistance < distance) {\n                    distance = tempDistance;\n                    closest = numbers.get(i);\n                    secondClosest = numbers.get(j);\n                }\n            }\n        }\n        return Pair.with(closest, secondClosest);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        int n = numbers.size();\n        if (n < 2)\n            return Pair.with((float)0, (float)0);\n        float small = numbers.get(0);\n        float large = numbers.get(0);\n        float max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) < small)\n                small = numbers.get(i);\n            if (numbers.get(i) > large)\n                large = numbers.get(i);\n            if (numbers.get(i) > max)\n                max = numbers.get(i);\n        }\n        int j = 0;\n        while (small < large) {\n            float temp = numbers.get(j);\n            numbers.set(j, large);\n            numbers.set(j+1, small);\n            small = temp;\n            j += 2;\n        }\n        return Pair.with(numbers.get(0), numbers.get(1));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = numbers.get(0);\n        float max = numbers.get(0);\n        float minDiff = Math.abs(min - max);\n        int minIndex = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float num1 = numbers.get(i);\n                float num2 = numbers.get(j);\n                float diff = Math.abs(num1 - num2);\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    min = num1 > num2 ? num2 : num1;\n                    max = num1 > num2 ? num1 : num2;\n                    minIndex = i;\n                    maxIndex = j;\n                }\n            }\n        }\n        return Pair.with(numbers.get(minIndex), numbers.get(maxIndex));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float closest = numbers.get(0), second = numbers.get(1);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(closest - second)) {\n                    closest = numbers.get(i);\n                    second = numbers.get(j);\n                }\n            }\n        }\n        if (closest == second)\n            return new Pair<Float, Float>(closest, second);\n        else if (closest < second)\n            return new Pair<Float, Float>(closest, second);\n        else\n            return new Pair<Float, Float>(second, closest);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = Float.POSITIVE_INFINITY;\n        float max = Float.NEGATIVE_INFINITY;\n        for (float n : numbers) {\n            if (n < min) min = n;\n            if (n > max) max = n;\n        }\n        for (float n : numbers) {\n            if (Math.abs(n - min) < Math.abs(n - max)) max = n;\n            if (Math.abs(n - max) < Math.abs(n - min)) min = n;\n        }\n        return Pair.with(min, max);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Write your code here\n        HashMap<Float, List<Float>> hm = new HashMap<>();\n        for(int i=0; i<numbers.size()-1; i++){\n            for(int j=i+1; j<numbers.size(); j++){\n                float a = (float) Math.abs(numbers.get(i) - numbers.get(j));\n                if(hm.get(a) == null){\n                    hm.put(a, new ArrayList<>());\n                }\n                hm.get(a).add(numbers.get(i));\n                hm.get(a).add(numbers.get(j));\n            }\n        }\n        ArrayList<Float> min = new ArrayList<>();\n        ArrayList<Float> max = new ArrayList<>();\n        for(Map.Entry<Float, List<Float>> e : hm.entrySet()){\n            if(e.getValue().size() > 1){\n                min.add(Collections.min(e.getValue()));\n                max.add(Collections.max(e.getValue()));\n            }\n        }\n        return Pair.with(Collections.min(min), Collections.max(max));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Float> numbersCopy = new ArrayList<>(numbers);\n        float closest = Math.abs(numbersCopy.get(0) - numbersCopy.get(1));\n        Pair<Float, Float> result = new Pair<>(numbersCopy.get(0), numbersCopy.get(1));\n        for(int i = 0; i < numbersCopy.size(); i++){\n            for(int j = 0; j < numbersCopy.size(); j++){\n                if(i == j){\n                    continue;\n                }\n                float distance = Math.abs(numbersCopy.get(i) - numbersCopy.get(j));\n                if(distance < closest){\n                    closest = distance;\n                    result = new Pair<>(numbersCopy.get(i), numbersCopy.get(j));\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() <= 1) {\n            throw new IllegalArgumentException(\"The argument must have at least two elements.\");\n        }\n        Pair<Float, Float> currentBestPair = Pair.with(numbers.get(0), numbers.get(1));\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                Pair<Float, Float> potentialPair = Pair.with(numbers.get(i), numbers.get(j));\n                if (absoluteValueDifference(potentialPair.getValue0(), potentialPair.getValue1()) < absoluteValueDifference(currentBestPair.getValue0(), currentBestPair.getValue1())) {\n                    currentBestPair = potentialPair;\n                }\n            }\n        }\n        return currentBestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Pair<Float, Float>> pairs = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            float first = numbers.get(i);\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float second = numbers.get(j);\n                pairs.add(Pair.with(first, second));\n            }\n        }\n        return pairs\n                .stream()\n                .sorted((a, b) -> (int)Math.abs(a.getValue0() - a.getValue1()) - (int)Math.abs(b.getValue0() - b.getValue1()))\n                .findFirst()\n                .get();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Use the Pair class to return the two closest numbers\n        Pair<Float, Float> result = null;\n        Float min = Float.POSITIVE_INFINITY;\n        Float prev = Float.NEGATIVE_INFINITY;\n        Float cur = Float.NEGATIVE_INFINITY;\n        // Find the difference between the current number and the previous number.\n        // Set the min to the current number if the difference between the current number and the previous number is smaller than the min.\n        // If the difference between the current number and the previous number is smaller than the min, set the result to the pair with the current and previous number.\n        for(int i=0; i<numbers.size(); i++) {\n            cur = numbers.get(i);\n            if(i==0) {\n                prev = numbers.get(i);\n                continue;\n            }\n            if(Math.abs(cur - prev) < min) {\n                min = Math.abs(cur - prev);\n                result = Pair.with(prev, cur);\n            }\n            prev = cur;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) return null;\n        float minDist = Float.POSITIVE_INFINITY;\n        Pair<Float, Float> result = null;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i+1; j < numbers.size(); j++) {\n                float distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < minDist) {\n                    minDist = distance;\n                    result = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float minDistance = 1000000000.0f;\n        float min1 = 1000000000.0f;\n        float min2 = 1000000000.0f;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = 0; j < numbers.size(); j++) {\n                if (i != j && (Math.abs(numbers.get(i) - numbers.get(j)) < minDistance)) {\n                    minDistance = Math.abs(numbers.get(i) - numbers.get(j));\n                    min1 = numbers.get(i);\n                    min2 = numbers.get(j);\n                }\n            }\n        }\n        return Pair.with(min1, min2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float smallestDiff = (float)100000.0f;\n        float firstClosest = 0.0f;\n        float secondClosest = 0.0f;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float difference = Math.abs(numbers.get(i) - numbers.get(j));\n                if (difference < smallestDiff) {\n                    smallestDiff = difference;\n                    firstClosest = numbers.get(i);\n                    secondClosest = numbers.get(j);\n                }\n            }\n        }\n        return Pair.with(firstClosest, secondClosest);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float[] data = new float[numbers.size()];\n        float result = 0;\n        float closet = Float.MAX_VALUE;\n        for(int i=0;i<data.length;i++){\n            data[i] = numbers.get(i);\n        }\n        //Arrays.sort(data);\n        int[] diff = new int[data.length];\n        for(int i=0;i<data.length;i++){\n            int temp = 0;\n            for(int j=i+1;j<data.length;j++){\n                temp = (int) (data[i] - data[j]);\n                if(Math.abs(temp) < Math.abs(closet)){\n                    closet = temp;\n                    result = data[i];\n                }\n            }\n        }\n        return new Pair(result,result + closet);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = 0.0f;\n        float max = 0.0f;\n        float val = 0.0f;\n        for (float num : numbers) {\n            if (min == 0.0f) {\n                min = num;\n            } else if (max == 0.0f) {\n                max = num;\n            } else {\n                val = Math.abs(num - min);\n                float diff = Math.abs(num - max);\n                if (diff < val) {\n                    val = diff;\n                    max = num;\n                }\n                val = Math.abs(num - max);\n                if (val < min) {\n                    min = num;\n                }\n            }\n        }\n        return Pair.with(min, max);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        int indexOne = 0;\n        int indexTwo = 1;\n        float closest = Math.abs(numbers.get(0) - numbers.get(1));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < closest) {\n                    indexOne = i;\n                    indexTwo = j;\n                    closest = diff;\n                }\n            }\n        }\n        return Pair.with(numbers.get(indexOne), numbers.get(indexTwo));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> pair = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        float temp = 0.0f;\n        float result = 0.0f;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            temp = (float)(Math.abs(numbers.get(i) - numbers.get(i + 1)));\n            if (result < temp) {\n                result = temp;\n                if (numbers.get(i) < numbers.get(i + 1)) {\n                    pair = new Pair<Float, Float>(numbers.get(i), numbers.get(i + 1));\n                } else {\n                    pair = new Pair<Float, Float>(numbers.get(i + 1), numbers.get(i));\n                }\n            }\n        }\n        return pair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> result = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        ArrayList<Float> diffs = new ArrayList<Float>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            diffs.add(numbers.get(i + 1) - numbers.get(i));\n        }\n        Float minDiff = diffs.get(0);\n        Float minDiffIdx = 0f;\n        for (int i = 0; i < diffs.size(); i++) {\n            if (minDiff > diffs.get(i)) {\n                minDiff = diffs.get(i);\n                minDiffIdx = (float)i;\n            }\n        }\n        result = new Pair<Float, Float>(numbers.get(Math.round(minDiffIdx)), numbers.get(Math.round(minDiffIdx) + 1));\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Implement this method here\n        Float min1 = numbers.get(0);\n        Float min2 = numbers.get(1);\n        Float max1 = numbers.get(0);\n        Float max2 = numbers.get(1);\n        Float min3 = numbers.get(1);\n        Float max3 = numbers.get(1);\n        for(int i = 0; i < numbers.size(); i++){\n            Float c = numbers.get(i);\n            if(min1 > c){\n                min1 = c;\n            }\n            if(min2 > c){\n                min2 = c;\n            }\n            if(max1 < c){\n                max1 = c;\n            }\n            if(max2 < c){\n                max2 = c;\n            }\n            if(min3 < c){\n                min3 = c;\n                max3 = c;\n            }\n            if(max3 > c && c >= min3){\n                max3 = c;\n            }\n        }\n        Float min4 = Math.abs(min2 - min1);\n        Float max4 = Math.abs(max2 - max1);\n        if(min4 > max4){\n            return Pair.with(min2, min3);\n        }\n        return Pair.with(max2, max3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float closestDiff = Float.MAX_VALUE;\n        Pair<Float, Float> closestPair = null;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < closestDiff) {\n                    closestDiff = diff;\n                    closestPair = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Put your code here\n        float closest = Float.MAX_VALUE;\n        float first = 0;\n        float second = 0;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float a = Math.abs(numbers.get(i) - numbers.get(j));\n                if (a < closest) {\n                    closest = a;\n                    first = numbers.get(i);\n                    second = numbers.get(j);\n                }\n            }\n        }\n        return Pair.with(first, second);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Float closest = numbers.get(0);\n        Float secondClosest = numbers.get(1);\n        Float delta = Math.abs(numbers.get(0) - numbers.get(1));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                Float delta2 = Math.abs(numbers.get(i) - numbers.get(j));\n                if (delta2 < delta) {\n                    closest = numbers.get(i);\n                    secondClosest = numbers.get(j);\n                    delta = delta2;\n                }\n            }\n        }\n        if (closest < secondClosest) {\n            return Pair.with(closest, secondClosest);\n        }\n        return Pair.with(secondClosest, closest);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        List<Pair<Float, Float>> list = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= Math.abs(list.get(list.size() - 1).getValue0() - list.get(list.size() - 1).getValue1())) {\n                    list.add(new Pair<>(numbers.get(i), numbers.get(j)));\n                }\n            }\n        }\n        return list.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = 9999999.99f;\n        float num1 = -1, num2 = -1;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < min) {\n                    min = Math.abs(numbers.get(i) - numbers.get(j));\n                    num1 = numbers.get(i);\n                    num2 = numbers.get(j);\n                }\n            }\n        }\n        Pair<Float, Float> pair = new Pair<>(num1, num2);\n        return pair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float closestDiff = numbers.get(0) - numbers.get(1);\n        float minElement = Math.min(numbers.get(0), numbers.get(1));\n        float maxElement = Math.max(numbers.get(0), numbers.get(1));\n        float temp;\n        for(int i = 2; i < numbers.size(); i++) {\n            temp = Math.abs(numbers.get(i) - numbers.get(i - 1));\n            if(temp < closestDiff) {\n                closestDiff = temp;\n                minElement = Math.min(numbers.get(i), numbers.get(i - 1));\n                maxElement = Math.max(numbers.get(i), numbers.get(i - 1));\n            }\n        }\n        return Pair.with(minElement, maxElement);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if(numbers.size() == 2) {\n            return Pair.with(numbers.get(0), numbers.get(1));\n        }\n        float min = Float.MAX_VALUE;\n        Pair<Float, Float> closest = null;\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if(diff < min) {\n                    min = diff;\n                    closest = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return closest;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        double min = Double.MAX_VALUE;\n        Pair<Float, Float> pair = null;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < min) {\n                    min = Math.abs(numbers.get(i) - numbers.get(j));\n                    pair = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return pair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> result = null;\n        float minDifference = Float.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float difference = Math.abs(numbers.get(i) - numbers.get(j));\n                if (minDifference > difference) {\n                    minDifference = difference;\n                    result = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        List<Float> floats = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            int temp = numbers.size() - 1;\n            for (int j = 0; j < numbers.size() - 1; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - numbers.get(temp))) {\n                    temp = j;\n                }\n            }\n            floats.add(numbers.get(temp));\n            if (max < temp) {\n                max = temp;\n            }\n        }\n        floats.remove(max);\n        floats.remove(max);\n        Collections.sort(floats);\n        Pair<Float, Float> pair = Pair.with(floats.get(0), floats.get(1));\n        return pair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        double smallestDifference = Math.abs(numbers.get(1) - numbers.get(0));\n        double currentDifference;\n        float smallestNumber1 = numbers.get(0);\n        float smallestNumber2 = numbers.get(1);\n        float currentNumber1;\n        float currentNumber2;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                currentNumber1 = numbers.get(i);\n                currentNumber2 = numbers.get(j);\n                currentDifference = Math.abs(currentNumber1 - currentNumber2);\n                if (currentDifference < smallestDifference) {\n                    smallestDifference = currentDifference;\n                    smallestNumber1 = currentNumber1;\n                    smallestNumber2 = currentNumber2;\n                }\n            }\n        }\n        return new Pair<Float, Float>(smallestNumber1, smallestNumber2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Map<Float, Float> map = new HashMap<>();\n        float minDistance = Float.POSITIVE_INFINITY;\n        for (Float num : numbers) {\n            map.put(num, num);\n        }\n        for (Float num1 : numbers) {\n            for (Float num2 : numbers) {\n                float distance = Math.abs(num2 - num1);\n                if (distance < minDistance && num1 != num2) {\n                    minDistance = distance;\n                    map.put(minDistance, num1);\n                    map.put(minDistance, num2);\n                }\n            }\n        }\n        Float min = Float.valueOf(map.get(minDistance));\n        Float max = Float.valueOf(map.get(minDistance));\n        if (min > max) {\n            return Pair.with(max, min);\n        } else {\n            return Pair.with(min, max);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if(numbers.size() < 2) throw new RuntimeException();\n        int i = 0;\n        int j = 1;\n        float min = (float)Math.abs(numbers.get(i) - numbers.get(j));\n        for(; j < numbers.size(); j++) {\n            float dist = (float)Math.abs(numbers.get(i) - numbers.get(j));\n            if(dist < min) {\n                min = dist;\n                i = j - 1;\n            }\n        }\n        return Pair.with(numbers.get(i), numbers.get(i + 1));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Pair<Float, Float>> combinations = new ArrayList<Pair<Float, Float>>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                combinations.add(Pair.with(numbers.get(i), numbers.get(j)));\n            }\n        }\n        return combinations.stream().min(Comparator.comparingDouble(p -> Math.abs(p.getValue0() - p.getValue1()))).get();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float smallest = numbers.get(0);\n        float largest = numbers.get(1);\n        for(int i = 2; i < numbers.size(); i++){\n            if(Math.abs(numbers.get(i) - smallest) < Math.abs(smallest - largest)){\n                largest = smallest;\n                smallest = numbers.get(i);\n            } else if(Math.abs(numbers.get(i) - largest) < Math.abs(smallest - largest)){\n                smallest = largest;\n                largest = numbers.get(i);\n            }\n        }\n        return Pair.with(smallest, largest);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Map<Float, List<Float>> numbersToClosest = new HashMap<>();\n        for(Float number : numbers) {\n            List<Float> closest = new ArrayList<>();\n            for(Float other : numbers) {\n                if(other == number) continue;\n                closest.add(other);\n            }\n            Collections.sort(closest);\n            closest = closest.subList(0, 1);\n            numbersToClosest.put(number, closest);\n        }\n        Float bestDifference = null;\n        Pair<Float, Float> bestPair = null;\n        for(Map.Entry<Float, List<Float>> entry : numbersToClosest.entrySet()) {\n            Float number = entry.getKey();\n            List<Float> closest = entry.getValue();\n            if(closest.size() < 1) continue;\n            Float closestNumber = closest.get(0);\n            Float difference = Math.abs(number - closestNumber);\n            if(bestDifference == null || bestDifference > difference) {\n                bestDifference = difference;\n                bestPair = new Pair<>(number, closestNumber);\n            }\n        }\n        return bestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Float best = numbers.get(0);\n        Float best2 = numbers.get(1);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i; j < numbers.size(); j++) {\n                Float distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < Math.abs(best - best2)) {\n                    best = numbers.get(i);\n                    best2 = numbers.get(j);\n                }\n            }\n        }\n        return Pair.with(best, best2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Float temp = null;\n        ArrayList<Float> tempList = new ArrayList<Float>();\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i+1; j < numbers.size(); j++) {\n                if((Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(tempList.get(0) - tempList.get(1)))) {\n                    tempList.clear();\n                    tempList.add(numbers.get(i));\n                    tempList.add(numbers.get(j));\n                    temp = tempList.get(0);\n                }\n            }\n        }\n        return Pair.with(temp, tempList.get(1));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = Float.MAX_VALUE;\n        float first = 0;\n        float second = 0;\n        for (int i = 0; i < numbers.size()-1; i++){\n            float f = numbers.get(i);\n            for (int j = i+1; j < numbers.size(); j++){\n                float s = numbers.get(j);\n                float temp = Math.abs(f-s);\n                if (temp < min){\n                    first = f;\n                    second = s;\n                    min = temp;\n                }\n            }\n        }\n        return new Pair(first, second);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = Float.MAX_VALUE;\n        Pair<Float, Float> pair = new Pair<Float, Float>();\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i; j < numbers.size(); j++) {\n                if (i == j) {\n                    continue;\n                }\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < min) {\n                    min = diff;\n                    pair = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return pair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = 1000.0f;\n        Pair<Float, Float> result = Pair.with(numbers.get(0), numbers.get(1));\n        for (int i = 0; i < numbers.size() - 1; ++i) {\n            for (int j = i + 1; j < numbers.size(); ++j) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < min) {\n                    min = diff;\n                    result = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Write your code here\n        Float closest_pair_distance = new Float(1000);\n        Pair<Float, Float> closest_pair = new Pair<>(0f, 0f);\n        for(int i = 0; i < numbers.size()-1; i++){\n            for(int j = i+1; j < numbers.size(); j++){\n                Float distance = numbers.get(i) - numbers.get(j);\n                if(Math.abs(distance) < closest_pair_distance){\n                    closest_pair_distance = Math.abs(distance);\n                    if(numbers.get(i) < numbers.get(j)){\n                        closest_pair = new Pair<>(numbers.get(i), numbers.get(j));\n                    }else{\n                        closest_pair = new Pair<>(numbers.get(j), numbers.get(i));\n                    }\n                }\n            }\n        }\n        return closest_pair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> min = new Pair<Float, Float>(null, null);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (min.getValue0() == null || Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(min.getValue0() - min.getValue1())) {\n                    min = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return min;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float smallestDistance = Float.MAX_VALUE;\n        Pair<Float, Float> smallestPair = new Pair(Float.MIN_VALUE, Float.MAX_VALUE);\n        for(int i = 0; i < numbers.size()-1; i++) {\n            for(int j = i+1; j < numbers.size(); j++) {\n                float currentDistance = Math.abs(numbers.get(i) - numbers.get(j));\n                if(currentDistance < smallestDistance) {\n                    smallestDistance = currentDistance;\n                    smallestPair = new Pair(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return smallestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = 10000000000.0f;\n        int min_index1 = 0;\n        int min_index2 = 0;\n        for(int i=0;i<numbers.size();i++){\n            for(int j=i+1;j<numbers.size();j++){\n                float temp = Math.abs(numbers.get(i)-numbers.get(j));\n                if(temp<min){\n                    min = temp;\n                    min_index1 = i;\n                    min_index2 = j;\n                }\n            }\n        }\n        return Pair.with(numbers.get(min_index1),numbers.get(min_index2));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Float> sorted = new ArrayList<Float>(numbers);\n        sorted.sort((float i, float j) -> i - j);\n        int min = 0;\n        int max = 0;\n        float minDistance = Float.MAX_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    min = i;\n                    max = j;\n                }\n            }\n        }\n        return Pair.with(sorted.get(min), sorted.get(max));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        double closestDiff = Double.MAX_VALUE;\n        Pair<Float, Float> closestPair = null;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < closestDiff) {\n                    closestDiff = Math.abs(numbers.get(i) - numbers.get(j));\n                    closestPair = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Find and return the two elements that are the closest to each other in the supplied list of numbers\n        // Use Math.abs(x) to find the absolute value of x.\n        // If you need to find the absolute value of a difference then remember that |a - b| = |a| + |b|.\n        // Tip: you may find Math.abs and Math.min useful.\n        return numbers.stream().map(\n            Float::floatValue\n        ).sorted().collect(\n            Collectors.toList()\n        ).stream().limit(\n            2\n        ).collect(\n            Collectors.toList()\n        ).stream().reduce(\n            new Pair<Float, Float>(numbers.get(0), numbers.get(1)),\n            (pair, x) -> {\n                final float[] values = {pair.getValue0(), pair.getValue1(), x};\n                float[] closes = Arrays.stream(values).sorted().toArray(\n                    Float[]::new\n                );\n                return new Pair<Float, Float>(closes[1], closes[2]);\n            }\n        );", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n            return null;\n        }\n        float closestSoFar = Float.POSITIVE_INFINITY;\n        Pair<Float, Float> closestPair = null;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = 0; j < numbers.size(); j++) {\n                if (i != j && Math.abs(numbers.get(i) - numbers.get(j)) < closestSoFar) {\n                    closestSoFar = Math.abs(numbers.get(i) - numbers.get(j));\n                    if (numbers.get(i) < numbers.get(j)) {\n                        closestPair = Pair.with(numbers.get(i), numbers.get(j));\n                    } else {\n                        closestPair = Pair.with(numbers.get(j), numbers.get(i));\n                    }\n                }\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float minDiff = (float)Math.abs(numbers.get(1) - numbers.get(0));\n        Pair<Float, Float> min = new Pair<>(numbers.get(0), numbers.get(1));\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float diff = (float)Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    min = new Pair<>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return min;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Find the absolute difference between the two closest numbers\n        // >>> Math.abs(2.0f - 2.0f)\n        // 0.0\n        Float minDifference = Math.abs(numbers.get(0) - numbers.get(1));\n        // Start with the first two numbers\n        Float firstNumber = numbers.get(0);\n        Float secondNumber = numbers.get(1);\n        // Loop through the rest of the numbers and find the closest pair to the previously selected closest pair\n        for (int i = 2; i < numbers.size(); i++) {\n            // Get the absolute difference between the next number and the first number\n            Float firstDifference = Math.abs(numbers.get(i) - firstNumber);\n            // Get the absolute difference between the next number and the second number\n            Float secondDifference = Math.abs(numbers.get(i) - secondNumber);\n            // If the absolute difference is less than the current minimum absolute difference\n            if (firstDifference < minDifference) {\n                // Store the absolute difference\n                minDifference = firstDifference;\n                // Set the first number to the next number\n                firstNumber = numbers.get(i);\n            }\n            // If the absolute difference is less than the current minimum absolute difference\n            if (secondDifference < minDifference) {\n                // Store the absolute difference\n                minDifference = secondDifference;\n                // Set the second number to the next number\n                secondNumber = numbers.get(i);\n            }\n        }\n        // Return the closest pair\n        return Pair.with(firstNumber, secondNumber);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        HashMap<Float, Float> hashMap = new HashMap<>();\n        for (Float num1 : numbers) {\n            for (Float num2 : numbers) {\n                if (!num1.equals(num2)) {\n                    hashMap.put(Math.abs(num1 - num2), num1);\n                }\n            }\n        }\n        return new Pair<>(hashMap.get(Collections.min(hashMap.keySet())), hashMap.get(Collections.max(hashMap.keySet())));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Float> sortedNumbers = (ArrayList<Float>) numbers.stream().sorted().collect(Collectors.toList());\n        Float lowerClosestPair = sortedNumbers.get(0);\n        Float higherClosestPair = sortedNumbers.get(0);\n        for (int i = 1; i < sortedNumbers.size(); i++) {\n            float diffLower = Math.abs(sortedNumbers.get(i) - sortedNumbers.get(i - 1));\n            float diffHigher = Math.abs(sortedNumbers.get(i) - sortedNumbers.get(i + 1));\n            if (diffLower < diffHigher) {\n                lowerClosestPair = sortedNumbers.get(i);\n                higherClosestPair = sortedNumbers.get(i - 1);\n            } else if (diffHigher < diffLower) {\n                lowerClosestPair = sortedNumbers.get(i - 1);\n                higherClosestPair = sortedNumbers.get(i);\n            }\n        }\n        return Pair.with(lowerClosestPair, higherClosestPair);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        HashMap<Float, Float> closestPairs = new HashMap<Float, Float>();\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                if(closestPairs.containsKey(Math.abs(numbers.get(i) - numbers.get(j)))) {\n                    closestPairs.put(Math.abs(numbers.get(i) - numbers.get(j)), Math.max(numbers.get(i), numbers.get(j)));\n                } else {\n                    closestPairs.put(Math.abs(numbers.get(i) - numbers.get(j)), Math.max(numbers.get(i), numbers.get(j)));\n                }\n            }\n        }\n        return Pair.with(closestPairs.get(Collections.min(closestPairs.keySet())), closestPairs.get(Collections.min(closestPairs.keySet())));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return new Pair<Float, Float>(numbers.stream().sorted().collect(Collectors.toList()).get(0), numbers.stream().sorted().collect(Collectors.toList()).get(1));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n            return null;\n        }\n        Pair<Float, Float> closestPair = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = 1; j < numbers.size(); j++) {\n                float distance1 = closestPair.getValue0() - numbers.get(i);\n                float distance2 = closestPair.getValue1() - numbers.get(j);\n                float distance = distance1 + distance2;\n                float distanceSaved = closestPair.getValue0() - closestPair.getValue1();\n                if (distanceSaved > distance) {\n                    closestPair = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float[] array = new float[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            array[i] = (float)numbers.get(i);\n        }\n        return findClosestElements(array);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The arraylist of floats must be of size greater than 2\");\n        }\n        Pair<Float, Float> result = Pair.with(numbers.get(0), numbers.get(0));\n        for (Float number1 : numbers) {\n            for (Float number2 : numbers) {\n                if (number1.equals(number2)) {\n                    continue;\n                }\n                Pair<Float, Float> current = Pair.with(number1, number2);\n                if (result.getValue0().compareTo(result.getValue1()) > 0) {\n                    result = current;\n                } else if (result.getValue0().compareTo(result.getValue1()) == 0 && current.getValue0().compareTo(current.getValue1()) < 0) {\n                    result = current;\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Finds the absolute difference between each pair of numbers.\n        ArrayList<Float> differences = new ArrayList<Float>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float x = Math.abs(numbers.get(i) - numbers.get(j));\n                differences.add(x);\n            }\n        }\n        // Sorts the differences array in ascending order.\n        differences.sort(new Comparator<Float>() {\n            public int compare(Float f1, Float f2) {\n                if (f1 < f2) {\n                    return -1;\n                } else if (f1 == f2) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            }\n        });\n        float smallest = differences.get(0);\n        float x1 = 0.0f;\n        float x2 = 0.0f;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) == smallest) {\n                    x1 = numbers.get(i);\n                    x2 = numbers.get(j);\n                    break;\n                }\n            }\n        }\n        return Pair.with(x1, x2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // BEGIN PROBLEM 4\n        int min1=0, min2=1, max1=0, max2=1;\n        for(int i = 0; i < numbers.size(); i++){\n            if(Math.abs(numbers.get(min1) - numbers.get(i)) > Math.abs(numbers.get(min2) - numbers.get(i))){\n                min2 = min1;\n                min1 = i;\n            }\n            else if(Math.abs(numbers.get(min2) - numbers.get(i)) > Math.abs(numbers.get(min1) - numbers.get(i))){\n                min2 = i;\n            }\n            if(Math.abs(numbers.get(max1) - numbers.get(i)) < Math.abs(numbers.get(max2) - numbers.get(i))){\n                max2 = max1;\n                max1 = i;\n            }\n            else if(Math.abs(numbers.get(max2) - numbers.get(i)) < Math.abs(numbers.get(max1) - numbers.get(i))){\n                max2 = i;\n            }\n        }\n        if(Math.abs(numbers.get(min1) - numbers.get(min2)) < Math.abs(numbers.get(max1) - numbers.get(max2))){\n            return Pair.with(numbers.get(min1), numbers.get(min2));\n        }\n        else{\n            return Pair.with(numbers.get(max1), numbers.get(max2));\n        }\n        // END PROBLEM 4", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> result = new Pair<Float, Float>();\n        if (numbers.size() >= 2) {\n            double min = Double.POSITIVE_INFINITY;\n            for (int i = 0; i < numbers.size(); i++) {\n                for (int j = 0; j < numbers.size(); j++) {\n                    if (i != j) {\n                        double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                        if (distance < min) {\n                            min = distance;\n                            result = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                        }\n                    }\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() <= 1) {\n            return Pair.with(numbers.get(0), numbers.get(0));\n        } else {\n            float minDist = Float.MAX_VALUE;\n            float firstValue = 0;\n            float secondValue = 0;\n            for (int i = 0; i < numbers.size(); i++) {\n                for (int j = i + 1; j < numbers.size(); j++) {\n                    float tempDist = Math.abs(numbers.get(i) - numbers.get(j));\n                    if (tempDist < minDist) {\n                        minDist = tempDist;\n                        firstValue = numbers.get(i);\n                        secondValue = numbers.get(j);\n                    }\n                }\n            }\n            return Pair.with(firstValue, secondValue);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        HashMap<Float, ArrayList<Float>> groups = new HashMap<Float, ArrayList<Float>>();\n        for (Float num : numbers) {\n            ArrayList<Float> group = groups.getOrDefault(num, new ArrayList<Float>());\n            group.add(num);\n            groups.put(num, group);\n        }\n        HashMap<Float, ArrayList<Float>> groupMap = new HashMap<Float, ArrayList<Float>>();\n        for (Map.Entry<Float, ArrayList<Float>> entry : groups.entrySet()) {\n            ArrayList<Float> group = entry.getValue();\n            ArrayList<Float> nextGroup = new ArrayList<Float>();\n            for (Float num : group) {\n                nextGroup.add(num + 1);\n            }\n            groupMap.put(entry.getKey(), group);\n            groupMap.put(entry.getKey() + 1, nextGroup);\n        }\n        Map.Entry<Float, ArrayList<Float>> minPair = null;\n        for (Map.Entry<Float, ArrayList<Float>> entry : groupMap.entrySet()) {\n            Float num = entry.getKey();\n            ArrayList<Float> group = entry.getValue();\n            if (minPair == null || group.size() < minPair.getValue().size()) {\n                minPair = new AbstractMap.SimpleEntry<Float, ArrayList<Float>>(num, group);\n            }\n        }\n        return new AbstractMap.SimpleEntry<Float, Float>(minPair.getKey(), (float)(minPair.getKey() + 1));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> output = null;\n        // Biggest number in the array\n        float maximum = 0.0f;\n        // Smallest number in the array\n        float minimum = 0.0f;\n        // The last number in the array\n        float lastNumber = 0.0f;\n        // The difference between the largest and smallest number in the array\n        float difference = 0.0f;\n        // The difference between the last number and the current one\n        float currentDifference = 0.0f;\n        // The difference between the last number and the current one\n        float currentNumber = 0.0f;\n        // The first number in the array\n        float firstNumber = 0.0f;\n        // The difference between the largest and smallest number in the array\n        float currentResult = 0.0f;\n        // Iterator to loop through the numbers\n        Iterator<Float> i = numbers.iterator();\n        // Fetch the first number in the array\n        firstNumber = i.next();\n        // The biggest number in the array\n        maximum = firstNumber;\n        // The smallest number in the array\n        minimum = firstNumber;\n        // Loop through the array\n        while (i.hasNext()) {\n            // Fetch the current number\n            currentNumber = i.next();\n            // Calculate the difference between the current number and the last number\n            currentDifference = Math.abs(currentNumber - lastNumber);\n            // If the current difference is smaller than the currentResult\n            if (currentDifference < currentResult) {\n                // Assign the new smallest and biggest number\n                minimum = currentNumber < firstNumber ? currentNumber : firstNumber;\n                maximum = currentNumber > firstNumber ? currentNumber : firstNumber;\n                // Assign the current difference\n                currentResult = currentDifference;\n                // The current number is now the last number\n                lastNumber = currentNumber;\n            }\n        }\n        // Create a new pair with the smallest and biggest number\n        output = Pair.with(minimum, maximum);\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Float> distances = new ArrayList<Float>();\n        ArrayList<Integer> indices = new ArrayList<Integer>();\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = 0; j < numbers.size(); j++) {\n                if(i == j) {\n                    continue;\n                }\n                Float distance = (float)Math.abs(numbers.get(i) - numbers.get(j));\n                if(!distances.contains(distance)) {\n                    distances.add(distance);\n                    indices.add(i);\n                    indices.add(j);\n                }\n            }\n        }\n        Float lowestDistance = (float)0.0;\n        int index = 0;\n        for(int i = 0; i < distances.size(); i++) {\n            if(lowestDistance == (float)0.0 || distances.get(i) < lowestDistance) {\n                lowestDistance = distances.get(i);\n                index = i;\n            }\n        }\n        return Pair.with(numbers.get(indices.get(index)), numbers.get(indices.get(index + 1)));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float smallestDistance = 10000.0f;\n        Pair<Float, Float> result = null;\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                float currentDistance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (smallestDistance > currentDistance) {\n                    smallestDistance = currentDistance;\n                    result = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float smallest = Math.abs(numbers.get(0) - numbers.get(1));\n        float largest = smallest;\n        float smallest1 = 0;\n        float smallest2 = 0;\n        float largest1 = 0;\n        float largest2 = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < smallest) {\n                    smallest = Math.abs(numbers.get(i) - numbers.get(j));\n                    smallest1 = numbers.get(i);\n                    smallest2 = numbers.get(j);\n                }\n                if (Math.abs(numbers.get(i) - numbers.get(j)) > largest) {\n                    largest = Math.abs(numbers.get(i) - numbers.get(j));\n                    largest1 = numbers.get(i);\n                    largest2 = numbers.get(j);\n                }\n            }\n        }\n        if (smallest == largest) {\n            return new Pair<>(smallest1, largest1);\n        } else {\n            return new Pair<>(smallest1, smallest2);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Sort the numbers\n        Collections.sort(numbers);\n        // Get the first and last elements of the sorted list\n        float first = numbers.get(0);\n        float last = numbers.get(numbers.size() - 1);\n        // Get the difference between the first and last\n        float diff = Math.abs(first - last);\n        // Pair that will be returned\n        Pair<Float, Float> closestPair = new Pair<>(first, last);\n        // Iterate over the array\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            // For every pair of numbers, get the difference between them\n            float diffOfPair = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            // If the difference is smaller than the current smallest difference, then that pair is the current closest\n            // pair\n            if (diffOfPair < diff) {\n                // Set the closest pair\n                closestPair = new Pair<>(numbers.get(i), numbers.get(i + 1));\n                // Set the new smallest difference\n                diff = diffOfPair;\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        double min = Double.POSITIVE_INFINITY;\n        Pair<Float, Float> ret = null;\n        for (int i = 0; i < numbers.size(); ++i) {\n            for (int j = i + 1; j < numbers.size(); ++j) {\n                double cur = Math.abs(numbers.get(i) - numbers.get(j));\n                if (min > cur) {\n                    min = cur;\n                    ret = new Pair<>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = Float.POSITIVE_INFINITY;\n        Pair<Float, Float> minPair = null;\n        for(int i=0; i<numbers.size(); i++){\n            for(int j=i+1; j<numbers.size(); j++){\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if(diff < min){\n                    min = diff;\n                    minPair = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return minPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = Float.MAX_VALUE;\n        float[] nums = new float[numbers.size()];\n        float current;\n        int minIndex1 = 0, minIndex2 = 0;\n        int index1 = 0, index2 = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            nums[i] = numbers.get(i);\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            current = Math.abs(nums[i] - nums[i + 1]);\n            if (min > current) {\n                min = current;\n                minIndex1 = i;\n                minIndex2 = i + 1;\n            }\n        }\n        return Pair.with(nums[minIndex1], nums[minIndex2]);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return new ArrayList<Float>(numbers).stream().sorted(Comparator.comparing(o -> (float)Math.abs(o - numbers.get(numbers.indexOf(Collections.min(numbers)))))).skip(1).findFirst().get();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Initialize the first and second closest numbers as the first two numbers from the array\n        Pair<Float, Float> closestNumbers = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        // For each number in the list\n        for (float currentNumber : numbers) {\n            // If the number is closer than the first closest number\n            if (Math.abs(currentNumber - closestNumbers.getValue0()) < Math.abs(currentNumber - closestNumbers.getValue1())) {\n                // If the number is closer than the second closest number\n                if (Math.abs(currentNumber - closestNumbers.getValue0()) < Math.abs(closestNumbers.getValue0() - closestNumbers.getValue1())) {\n                    // Set the first closest number to be the current number\n                    closestNumbers.setValue0(currentNumber);\n                } else {\n                    // Set the second closest number to be the current number\n                    closestNumbers.setValue1(currentNumber);\n                }\n            } else {\n                // If the number is closer than the second closest number\n                if (Math.abs(currentNumber - closestNumbers.getValue1()) < Math.abs(closestNumbers.getValue0() - closestNumbers.getValue1())) {\n                    // Set the second closest number to be the current number\n                    closestNumbers.setValue1(currentNumber);\n                } else {\n                    // Set the first closest number to be the current number\n                    closestNumbers.setValue0(currentNumber);\n                }\n            }\n        }\n        return closestNumbers;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        ArrayList<Pair<Float, Float>> pairs = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                pairs.add(Pair.with(numbers.get(i), numbers.get(j)));\n            }\n        }\n        Pair<Float, Float> minPair = pairs.get(0);\n        for (Pair<Float, Float> pair : pairs) {\n            if (Math.abs(pair.getValue0() - pair.getValue1()) < Math.abs(minPair.getValue0() - minPair.getValue1())) {\n                minPair = pair;\n            }\n        }\n        return minPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Write your code here.\n        float minDiff = 0;\n        for(int i=0; i<numbers.size(); i++){\n            for(int j=0; j<numbers.size(); j++){\n                if(i != j){\n                    float num1 = numbers.get(i);\n                    float num2 = numbers.get(j);\n                    if(Math.abs(num1-num2) < minDiff){\n                        minDiff = Math.abs(num1-num2);\n                        float min1 = Math.min(num1,num2);\n                        float min2 = Math.max(num1,num2);\n                        return Pair.with(min1, min2);\n                    }\n                }\n            }\n        }\n        return Pair.with(0.0f, 0.0f);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float smallestDiff = (float)100000000000000000.0f;\n        Pair<Float, Float> smallestDiffPair = null;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = 0; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff == 0.0f) {\n                    diff = 0.000000001f;\n                }\n                if (i != j && diff < smallestDiff) {\n                    smallestDiff = diff;\n                    smallestDiffPair = new Pair(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return smallestDiffPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        double lowestDifference = Double.MAX_VALUE;\n        double tempDifference = 0.0;\n        Pair<Float, Float> lowestPair = null;\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                tempDifference = Math.abs(numbers.get(i) - numbers.get(j));\n                if (tempDifference < lowestDifference) {\n                    lowestDifference = tempDifference;\n                    lowestPair = new Pair(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return lowestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // For now, just return the two closest elements. Later, add a (potentially optional) argument for the number of\n        // closest elements that should be returned.\n        // For now, the Pair returned should be ordered so that the smaller number comes first. Later, add a (potentially\n        // optional) argument for whether the smaller number should come first or the larger number should come first.\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        HashMap<Float, Float> hashMap = new HashMap<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            hashMap.put(numbers.get(i), numbers.get(i + 1));\n        }\n        HashMap<Float, Float> max = new HashMap<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (hashMap.containsKey(numbers.get(j))) {\n                    float a = Math.abs(numbers.get(i) - numbers.get(j));\n                    if (!max.containsKey(a)) {\n                        max.put(a, a);\n                    } else if (a < max.get(a)) {\n                        max.put(a, a);\n                    }\n                }\n            }\n        }\n        return new Pair<>(numbers.get(numbers.indexOf(max.get(Collections.min(max.keySet())))), numbers.get(numbers.indexOf(max.get(Collections.min(max.keySet()))) + 1));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        double closestDistance = Double.MAX_VALUE;\n        Pair<Float, Float> closestPair = null;\n        float numberA, numberB;\n        for (int i = 0; i < numbers.size(); i++) {\n            numberA = numbers.get(i);\n            for (int j = i + 1; j < numbers.size(); j++) {\n                numberB = numbers.get(j);\n                double distance = Math.abs(numberA - numberB);\n                if (distance < closestDistance) {\n                    closestDistance = distance;\n                    closestPair = new Pair<>(numberA, numberB);\n                }\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> resultPair = new Pair<>(numbers.get(0), numbers.get(1));\n        float minDifference = Math.abs(resultPair.getValue0() - resultPair.getValue1());\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i+1; j < numbers.size(); j++) {\n                float tempDifference = Math.abs(numbers.get(i) - numbers.get(j));\n                if(tempDifference < minDifference) {\n                    minDifference = tempDifference;\n                    resultPair = new Pair<>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return resultPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n            return Pair.with(Float.MIN_VALUE, Float.MAX_VALUE);\n        }\n        float first = numbers.get(0);\n        float second = numbers.get(1);\n        float smallestDifference = Math.abs(first - second);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float difference = Math.abs(numbers.get(i) - numbers.get(j));\n                if (smallestDifference > difference) {\n                    smallestDifference = difference;\n                    first = numbers.get(i);\n                    second = numbers.get(j);\n                }\n            }\n        }\n        if (first > second) {\n            return Pair.with(second, first);\n        }\n        return Pair.with(first, second);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float diff = (float)Math.abs(numbers.get(0) - numbers.get(1));\n        Pair<Float, Float> result = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < diff) {\n                    diff = Math.abs(numbers.get(i) - numbers.get(j));\n                    result = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if(numbers.size() < 2) throw new IllegalArgumentException(\"ArrayList must have at least 2 numbers\");\n        Pair<Float, Float> returnPair = new Pair(Float.MAX_VALUE, Float.MAX_VALUE);\n        float diff = Float.MAX_VALUE;\n        int min = -1;\n        int max = -1;\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                if(Math.abs(numbers.get(i) - numbers.get(j)) < diff) {\n                    diff = Math.abs(numbers.get(i) - numbers.get(j));\n                    min = i;\n                    max = j;\n                }\n            }\n        }\n        return new Pair(numbers.get(min), numbers.get(max));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        final List<Float> sortedNumbers = numbers.stream().sorted().collect(Collectors.toList());\n        final float minDiff = Math.abs(sortedNumbers.get(0) - sortedNumbers.get(1));\n        Pair<Float, Float> minPair = Pair.with(sortedNumbers.get(0), sortedNumbers.get(1));\n        for (int i = 0; i < sortedNumbers.size() - 1; i++) {\n            final float diff = Math.abs(sortedNumbers.get(i) - sortedNumbers.get(i + 1));\n            if (diff < minDiff) {\n                minPair = Pair.with(sortedNumbers.get(i), sortedNumbers.get(i + 1));\n                minDiff = diff;\n            }\n        }\n        return minPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if(numbers.size() < 2) return null;\n        Float minDistance = (float) Math.abs(numbers.get(0) - numbers.get(1));\n        Pair<Float, Float> result = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i+1; j < numbers.size(); j++) {\n                float distance = (float) Math.abs(numbers.get(i) - numbers.get(j));\n                if(distance < minDistance) {\n                    minDistance = distance;\n                    result = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n            return null;\n        }\n        Float minPairSum = numbers.get(0) + numbers.get(1);\n        int minPairFirst = 0;\n        int minPairSecond = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(minPairSum)) {\n                    minPairSum = numbers.get(i) + numbers.get(j);\n                    minPairFirst = i;\n                    minPairSecond = j;\n                }\n            }\n        }\n        return Pair.with(numbers.get(minPairFirst), numbers.get(minPairSecond));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // We will use a custom Comparator that compares objects as float values.\n        Comparator<Object> comparator = new Comparator<Object>() {\n            public int compare(Object o1, Object o2) {\n                return ((Float)o1).compareTo((Float)o2);\n            }\n        };\n        // Initialize the closest distance to be infinity.\n        Float closestDistance = Float.POSITIVE_INFINITY;\n        // Traverse the list of numbers.\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                // Calculate the distance between the current two numbers.\n                Float distance = numbers.get(j).subtract(numbers.get(i));\n                // If the absolute value of the current distance is smaller than the previously recorded closest distance\n                // then replace the previous distance.\n                if (Math.abs(distance) < Math.abs(closestDistance)) {\n                    closestDistance = distance;\n                }\n            }\n        }\n        // Initialize the minimum and maximum number of the list.\n        float min = Collections.min(numbers, comparator);\n        float max = Collections.max(numbers, comparator);\n        // Return the minimum and maximum number if they are the closest to each other.\n        if (Math.abs(closestDistance) == (max - min)) {\n            return Pair.with(min, max);\n        }\n        // Initialize the minimum and maximum number of the list as the closest pair of elements.\n        min = numbers.get(0);\n        max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                // Calculate the distance between the current two numbers.\n                Float distance = numbers.get(j).subtract(numbers.get(i));\n                // If the absolute value of the current distance is smaller than the previously recorded closest distance\n                // then replace the previous distance and update the minimum and maximum number.\n                if (Math.abs(distance) == Math.abs(closestDistance)) {\n                    closestDistance = distance;\n                    min = Math.min(min, numbers.get(i), numbers.get(j));\n                    max = Math.max(max, numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        // Return the minimum and maximum number.\n        return Pair.with(min, max);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> result = null;\n        float minDistance = Float.POSITIVE_INFINITY;\n        for (int i = 0; i < numbers.size(); ++i) {\n            for (int j = i + 1; j < numbers.size(); ++j) {\n                float distance = (float)Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    result = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> result = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        float maxDifference = Math.abs(result.getValue0() - result.getValue1());\n        int firstIndex = 0;\n        int secondIndex = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float difference = Math.abs(numbers.get(i) - numbers.get(j));\n                if (difference < maxDifference) {\n                    maxDifference = difference;\n                    firstIndex = i;\n                    secondIndex = j;\n                }\n            }\n        }\n        return new Pair<Float, Float>(numbers.get(firstIndex), numbers.get(secondIndex));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Write your code here.\n        return new Pair<Float, Float>(1.0f, 2.0f);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Put your code here\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // if (numbers.size() < 2) {\n        //     return null;\n        // }\n        // double minDistance = Double.POSITIVE_INFINITY;\n        // Pair<Float, Float> result = null;\n        // for (int i = 0; i < numbers.size() - 1; i++) {\n        //     for (int j = i + 1; j < numbers.size(); j++) {\n        //         double distance = Math.abs(numbers.get(i) - numbers.get(j));\n        //         if (distance < minDistance) {\n        //             result = Pair.with(numbers.get(i), numbers.get(j));\n        //             minDistance = distance;\n        //         }\n        //     }\n        // }\n        // return result;\n        // Faster version\n        float first = 0.0f, second = 0.0f;\n        float minDistance = Float.MAX_VALUE;\n        if (numbers.size() < 2) {\n            return null;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < minDistance) {\n                    first = numbers.get(i);\n                    second = numbers.get(j);\n                    minDistance = distance;\n                }\n            }\n        }\n        return Pair.with(first, second);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return numbers.stream().reduce((x, y) -> Math.abs(x - y) < Math.abs(numbers.get(numbers.indexOf(y) - 1) - y) ? Pair.with(x, y) : Pair.with(numbers.get(numbers.indexOf(y) - 1), y)).get();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float closestDistance = Float.MAX_VALUE;\n        Pair<Float, Float> closestPair = new Pair<Float, Float>(Float.MAX_VALUE, Float.MAX_VALUE);\n        for(int i = 0; i < numbers.size(); i++) {\n            for(int j = i + 1; j < numbers.size(); j++) {\n                float distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if(distance < closestDistance) {\n                    closestDistance = distance;\n                    closestPair = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float minDifference = numbers.get(0) - numbers.get(1);\n        float minFirst = numbers.get(0);\n        float minSecond = numbers.get(1);\n        for (int first = 0; first < numbers.size() - 1; first++) {\n            for (int second = first + 1; second < numbers.size(); second++) {\n                float difference = numbers.get(first) - numbers.get(second);\n                if (minDifference > difference) {\n                    minDifference = difference;\n                    minFirst = numbers.get(first);\n                    minSecond = numbers.get(second);\n                }\n            }\n        }\n        return Pair.with(minFirst, minSecond);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float first = numbers.get(0);\n        float second = numbers.get(1);\n        float min = first - second;\n        int firstIdx = 0;\n        int secondIdx = 1;\n        for (int i = 2; i < numbers.size(); i++) {\n            float cur = numbers.get(i);\n            float diff = Math.abs(cur - first) - min;\n            if (diff < 0) {\n                min = diff;\n                first = cur;\n                second = secondIdx == i ? first : second;\n                firstIdx = i;\n                secondIdx = i - 1;\n            }\n        }\n        if (firstIdx < secondIdx) return Pair.with(first, second);\n        else return Pair.with(second, first);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float min = numbers.get(0);\n        float max = numbers.get(0);\n        for (Float f : numbers) {\n            if (f < min) {\n                min = f;\n            } else if (f > max) {\n                max = f;\n            }\n        }\n        return new Pair(min, max);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> result = null;\n        float minDistance = Float.MAX_VALUE;\n        float firstDistance = Float.MAX_VALUE;\n        float secondDistance = Float.MAX_VALUE;\n        int firstIndex = 0;\n        int secondIndex = 0;\n        for (int firstIterator = 0; firstIterator < numbers.size(); firstIterator++) {\n            for (int secondIterator = firstIterator + 1; secondIterator < numbers.size(); secondIterator++) {\n                float currentDistance = Math.abs(numbers.get(firstIterator) - numbers.get(secondIterator));\n                if (currentDistance < firstDistance) {\n                    secondDistance = secondDistance;\n                    secondIndex = secondIndex;\n                    firstDistance = currentDistance;\n                    firstIndex = firstIterator;\n                } else if (currentDistance < secondDistance) {\n                    secondDistance = currentDistance;\n                    secondIndex = secondIterator;\n                }\n            }\n        }\n        result = Pair.with(numbers.get(firstIndex), numbers.get(secondIndex));\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float minDistance = Float.MAX_VALUE;\n        Pair<Float, Float> minPair = null;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float currentDistance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (minDistance > currentDistance) {\n                    minDistance = currentDistance;\n                    minPair = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return minPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Float firstNum = numbers.get(0);\n        Float secondNum = numbers.get(1);\n        float min = Float.POSITIVE_INFINITY;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = 0; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (i != j && diff < min) {\n                    min = diff;\n                    firstNum = numbers.get(i);\n                    secondNum = numbers.get(j);\n                }\n            }\n        }\n        return Pair.with(firstNum, secondNum);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Create a Pair<Float, Float> object called \"closestPair\".\n        // Loop through the numbers, creating a \"currentPair\" variable to hold the current number pair.\n        // Use the \"Math.abs()\" function to get the absolute value of the difference between the two numbers and add it to a\n        // \"totalDistance\" variable (to hold the total distance of the currentPair).\n        // If the currentPair's totalDistance is less than the previousPair's totalDistance, set the closestPair variable to the\n        // currentPair.\n        // Else, the closestPair variable will already hold the correct value.\n        // Return the closestPair variable.\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        HashMap<Float, Float> hashMap = new HashMap<>();\n        for (Float a: numbers) {\n            for (Float b: numbers) {\n                if (a.equals(b)) continue;\n                else {\n                    Float distance = (float) Math.abs(a - b);\n                    hashMap.put(distance, a);\n                }\n            }\n        }\n        Float min = Collections.min(hashMap.keySet());\n        return new Pair(hashMap.get(min), min);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float minDif = numbers.get(0) - numbers.get(1);\n        float smaller = numbers.get(0);\n        float larger = numbers.get(1);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float dif = Math.abs(numbers.get(i) - numbers.get(j));\n                if (minDif > dif) {\n                    smaller = Math.min(numbers.get(i), numbers.get(j));\n                    larger = Math.max(numbers.get(i), numbers.get(j));\n                    minDif = dif;\n                }\n            }\n        }\n        return Pair.with(smaller, larger);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        int length = numbers.size();\n        if(length == 2) {\n            return Pair.with(numbers.get(0), numbers.get(1));\n        }\n        // Selects the first element of the array list as the current closest pair and iterates through the array list\n        // comparing to the subsequent elements of the array list and if the difference is smaller than the current\n        // closest pair the pair with the smaller difference is assigned to the closest pair.\n        // After the current closest pair is assigned it is compared to the current element and the pair with the smallest\n        // difference is assigned to the current closest pair.\n        float closestPair1 = numbers.get(0);\n        float closestPair2 = numbers.get(1);\n        float closestDiff = Math.abs(closestPair1 - closestPair2);\n        for(int i = 1; i < length - 1; i++) {\n            for(int j = i + 1; j < length; j++) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if(diff < closestDiff) {\n                    closestPair1 = numbers.get(i);\n                    closestPair2 = numbers.get(j);\n                    closestDiff = diff;\n                }\n            }\n            float diff = Math.abs(numbers.get(i) - closestPair1);\n            if(diff < closestDiff) {\n                closestPair2 = closestPair1;\n                closestPair1 = numbers.get(i);\n                closestDiff = diff;\n            }\n        }\n        return Pair.with(closestPair1, closestPair2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Initialize values\n        Pair<Float, Float> returnValue = new Pair<Float, Float>();\n        float number1 = numbers.get(0);\n        float number2 = numbers.get(1);\n        float difference1 = Math.abs(number1 - number2);\n        float difference2 = difference1;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float difference = Math.abs(numbers.get(i) - numbers.get(j));\n                if (difference < difference1) {\n                    difference1 = difference;\n                    number1 = numbers.get(i);\n                    number2 = numbers.get(j);\n                }\n            }\n        }\n        returnValue.setValue1(number1);\n        returnValue.setValue2(number2);\n        return returnValue;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        int len = numbers.size();\n        if (len < 2) {\n            return null;\n        }\n        Map<Float, List<Float>> map = new HashMap<>();\n        for (int i = 0; i < len; ++i) {\n            Float a = numbers.get(i);\n            for (int j = i + 1; j < len; ++j) {\n                Float b = numbers.get(j);\n                float val = Math.abs(a - b);\n                if (map.containsKey(val)) {\n                    List<Float> list = map.get(val);\n                    list.add(a);\n                    list.add(b);\n                } else {\n                    List<Float> list = new ArrayList<>();\n                    list.add(a);\n                    list.add(b);\n                    map.put(val, list);\n                }\n            }\n        }\n        // Find minimum value\n        Float minVal = map.keySet().stream().min(Comparator.naturalOrder()).get();\n        List<Float> list = map.get(minVal);\n        if (list.size() == 2) {\n            return Pair.with(list.get(0), list.get(1));\n        } else {\n            return Pair.with(list.get(0), list.get(0));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        float minDistance = Float.MAX_VALUE;\n        float minNumber1 = 0.0f;\n        float minNumber2 = 0.0f;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    minNumber1 = numbers.get(i);\n                    minNumber2 = numbers.get(j);\n                }\n            }\n        }\n        return Pair.with(minNumber1, minNumber2);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        return null;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        List<Float> sortedNumbers = numbers.stream().sorted().collect(Collectors.toList());\n        float minDistance = Float.POSITIVE_INFINITY;\n        Pair<Float, Float> closestPair = new Pair<Float, Float>(Float.NaN, Float.NaN);\n        for (int i = 0; i < sortedNumbers.size() - 1; i++) {\n            float currentDistance = sortedNumbers.get(i + 1) - sortedNumbers.get(i);\n            if (currentDistance < minDistance) {\n                minDistance = currentDistance;\n                closestPair = new Pair<Float, Float>(sortedNumbers.get(i), sortedNumbers.get(i + 1));\n            }\n        }\n        return closestPair;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> closest = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        for (Float first : numbers)\n            for (Float second : numbers)\n                if (first != second)\n                    if (Math.abs(first - second) < Math.abs(closest.getValue0() - closest.getValue1()))\n                        closest = new Pair<Float, Float>(first, second);\n        return closest;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // Implement this function", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Float first = numbers.get(0);\n        Float second = numbers.get(1);\n        float min = (float)Math.abs(first - second);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float abs = (float)Math.abs(numbers.get(i) - numbers.get(j));\n                if (abs < min) {\n                    first = numbers.get(i);\n                    second = numbers.get(j);\n                    min = abs;\n                }\n            }\n        }\n        if (first == second) {\n            return Pair.with(first, second);\n        } else if (first > second) {\n            return Pair.with(second, first);\n        } else {\n            return Pair.with(first, second);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        // BEGIN SOLUTION\n        Float closest_so_far = Math.abs(numbers.get(0) - numbers.get(1));\n        Pair<Float, Float> closest_pair = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        int length = numbers.size();\n        for (int i = 0; i < length - 1; i++) {\n            for (int j = i + 1; j < length; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < closest_so_far) {\n                    closest_pair = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return closest_pair;\n        // END SOLUTION", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied array list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))\n    // (Pair.with(2.0f, 2.2f))\n    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))\n    // (Pair.with(2.0f, 2.0f))\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n        Pair<Float, Float> result = null;\n        float min = Float.MAX_VALUE;\n        for (int i = 0; i < numbers.size()-1; i++) {\n            for (int j = i+1; j < numbers.size(); j++) {\n                float distance = Math.abs(numbers.get(i)-numbers.get(j));\n                if (distance < min) {\n                    min = distance;\n                    result = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;"]]