[["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long res = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    res += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    res -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    res *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    res = (long) Math.floor((double) res / operand.get(i + 1));\n                    break;\n                case \"**\":\n                    res = (long) Math.pow((double) res, operand.get(i + 1));\n                    break;\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if (op.size() != operand.size() - 1) return 0;\n        ArrayList<Long> nums = new ArrayList<Long>(operand);\n        long result = nums.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n                case \"+\":\n                    result += nums.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= nums.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= nums.get(i + 1);\n                    break;\n                case \"/\":\n                    result /= nums.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, nums.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Stack<Long> opStk = new Stack<>();\n        for (int i = 0; i < op.size(); i++) {\n            String opr = op.get(i);\n            if (opr.equals(\"*\") || opr.equals(\"/\") || opr.equals(\"+\") || opr.equals(\"-\") || opr.equals(\"**\")) {\n                if (opStk.size() < 2) {\n                    throw new IllegalArgumentException(\"Operand size is smaller than operator size.\");\n                }\n                long val = 0;\n                switch (opr) {\n                    case \"*\":\n                        val = opStk.pop() * opStk.pop();\n                        break;\n                    case \"/\":\n                        val = opStk.pop() / opStk.pop();\n                        break;\n                    case \"+\":\n                        val = opStk.pop() + opStk.pop();\n                        break;\n                    case \"-\":\n                        val = opStk.pop() - opStk.pop();\n                        break;\n                    case \"**\":\n                        val = (long) Math.pow(opStk.pop(), opStk.pop());\n                        break;\n                    default:\n                        break;\n                }\n                opStk.push(val);\n            } else {\n                opStk.push(operand.get(i));\n            }\n        }\n        if (opStk.size() != 1) {\n            throw new IllegalArgumentException(\"Operator size is larger than operand size.\");\n        }\n        return opStk.pop();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long res = operand.get(0);\n        int opSize = op.size();\n        for(int i = 0; i < opSize; i++) {\n            if(op.get(i).equals(\"+\")) {\n                res += operand.get(i+1);\n            } else if(op.get(i).equals(\"-\")) {\n                res -= operand.get(i+1);\n            } else if(op.get(i).equals(\"*\")) {\n                res *= operand.get(i+1);\n            } else if(op.get(i).equals(\"//\")) {\n                res /= operand.get(i+1);\n            } else {\n                res = (long)Math.pow(res, operand.get(i+1));\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // do your magic here.\n        for(int i = 0; i < op.size(); i++) {\n            int temp = i;\n            if(op.get(i) == \"+\" || op.get(i) == \"-\" || op.get(i) == \"*\" || op.get(i) == \"/\" || op.get(i) == \"**\") {\n                if(i == 0) {\n                    operand.set(temp, operand.get(temp) + operand.get(temp + 1));\n                    operand.remove(temp + 1);\n                    op.remove(temp);\n                    i--;\n                } else if(i == op.size() - 1) {\n                    operand.set(temp - 1, operand.get(temp - 1) + operand.get(temp));\n                    operand.remove(temp);\n                    op.remove(temp);\n                    i--;\n                } else {\n                    if(op.get(i - 1) == \"*\" || op.get(i - 1) == \"/\" || op.get(i - 1) == \"**\") {\n                        operand.set(temp, operand.get(temp) + operand.get(temp + 1));\n                        operand.remove(temp + 1);\n                        op.remove(temp);\n                        i--;\n                    } else {\n                        operand.set(temp - 1, operand.get(temp - 1) + operand.get(temp));\n                        operand.remove(temp);\n                        op.remove(temp);\n                        i--;\n                    }\n                }\n            }\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if(op.size() != operand.size()-1) return -1;\n        int i = 0;\n        long first = operand.get(i++);\n        while(i < operand.size()) {\n            long second = operand.get(i);\n            if(op.get(i-1).equals(\"+\")) {\n                first += second;\n            } else if(op.get(i-1).equals(\"-\")) {\n                first -= second;\n            } else if(op.get(i-1).equals(\"*\")) {\n                first *= second;\n            } else if(op.get(i-1).equals(\"//\")) {\n                first = (long)Math.floor(first / second);\n            } else if(op.get(i-1).equals(\"**\")) {\n                first = (long)Math.pow(first, second);\n            }\n            i++;\n        }\n        return first;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if(op.size() != operand.size()-1) {\n            throw new IllegalArgumentException(\"Operand size is not 1 more than Operator size\");\n        }\n        List<Long> work = new ArrayList<>();\n        for(int i = 0; i < operand.size(); i++) {\n            work.add(operand.get(i));\n        }\n        for(int i = 0; i < op.size(); i++) {\n            if(op.get(i).equals(\"+\")) {\n                work.set(i, work.get(i)+work.get(i+1));\n                work.remove(i+1);\n            } else if(op.get(i).equals(\"-\")) {\n                work.set(i, work.get(i)-work.get(i+1));\n                work.remove(i+1);\n            } else if(op.get(i).equals(\"*\")) {\n                work.set(i, work.get(i)*work.get(i+1));\n                work.remove(i+1);\n            } else if(op.get(i).equals(\"//\")) {\n                work.set(i, work.get(i)/work.get(i+1));\n                work.remove(i+1);\n            } else if(op.get(i).equals(\"**\")) {\n                work.set(i, work.get(i)*work.get(i+1));\n                work.remove(i+1);\n            } else {\n                throw new IllegalArgumentException(\"Invalid operator\");\n            }\n        }\n        if(work.size() != 1) {\n            throw new IllegalArgumentException(\"Working list is not of size 1\");\n        }\n        return work.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for(int i = 1; i < operand.size(); i++) {\n            switch(op.get(i - 1)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (long)Math.pow(result, operand.get(i));\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Operator is not valid!\");\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        String preOp = null;\n        for (int i = 0; i < operand.size() - 1; ++i) {\n            if (preOp != null) {\n                switch (preOp) {\n                    case \"+\":\n                        result += operand.get(i + 1);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i + 1);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i + 1);\n                        break;\n                    case \"/\":\n                        result /= operand.get(i + 1);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(result, operand.get(i + 1));\n                        break;\n                }\n            }\n            preOp = op.get(i);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\": result += operand.get(i + 1); break;\n                case \"-\": result -= operand.get(i + 1); break;\n                case \"*\": result *= operand.get(i + 1); break;\n                case \"//\": result /= operand.get(i + 1); break;\n                case \"**\": result = (long)Math.pow(result, operand.get(i + 1)); break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        long result = operand.get(i);\n        i++;\n        while(i < op.size()) {\n            result = performOperation(result, operand.get(i), op.get(i));\n            i++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        int len = operand.size();\n        int count = 0;\n        while(i < len){\n            if(op.get(count).equals(\"+\")){\n                operand.set(count, operand.get(count) + operand.get(count + 1));\n                i += 2;\n            }\n            if(op.get(count).equals(\"*\")){\n                operand.set(count, operand.get(count) * operand.get(count + 1));\n                i += 2;\n            }\n            if(op.get(count).equals(\"-\")){\n                operand.set(count, operand.get(count) - operand.get(count + 1));\n                i += 2;\n            }\n            if(op.get(count).equals(\"//\")){\n                operand.set(count, operand.get(count) / operand.get(count + 1));\n                i += 2;\n            }\n            if(op.get(count).equals(\"**\")){\n                operand.set(count, (long) Math.pow(operand.get(count), operand.get(count + 1)));\n                i += 2;\n            }\n            count++;\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        while (i < op.size()) {\n            long a = operand.get(i);\n            long b = operand.get(i + 1);\n            switch (op.get(i)) {\n                case \"+\":\n                    operand.set(i, a + b);\n                    break;\n                case \"-\":\n                    operand.set(i, a - b);\n                    break;\n                case \"*\":\n                    operand.set(i, a * b);\n                    break;\n                case \"//\":\n                    operand.set(i, a / b);\n                    break;\n                case \"**\":\n                    operand.set(i, (long) Math.pow(a, b));\n                    break;\n            }\n            i++;\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int n = operand.size();\n        int i = 0;\n        Stack<Integer> s = new Stack<>();\n        s.push(0);\n        s.push(1);\n        while (i < n-1) {\n            if (op.get(i).equals(\"+\") || op.get(i).equals(\"-\") || op.get(i).equals(\"*\") || op.get(i).equals(\"/\") || op.get(i).equals(\"**\")) {\n                s.push(i+2);\n                i++;\n            }\n            else {\n                s.push(i+1);\n                i++;\n            }\n        }\n        while (!s.isEmpty()) {\n            int idx = s.pop();\n            long a = operand.get(s.pop());\n            long b = operand.get(s.pop());\n            if (op.get(idx-2).equals(\"+\")) {\n                operand.set(idx-2, a+b);\n            }\n            else if (op.get(idx-2).equals(\"-\")) {\n                operand.set(idx-2, a-b);\n            }\n            else if (op.get(idx-2).equals(\"*\")) {\n                operand.set(idx-2, a*b);\n            }\n            else if (op.get(idx-2).equals(\"/\")) {\n                operand.set(idx-2, a/b);\n            }\n            else {\n                operand.set(idx-2, (long)Math.pow(a, b));\n            }\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Iterator<String> it = op.iterator();\n        Iterator<Long> it2 = operand.iterator();\n        long left = it2.next();\n        long right = it2.next();\n        while(it.hasNext()){\n            String operator = it.next();\n            switch(operator){\n                case \"+\":\n                    right = left + right;\n                    break;\n                case \"-\":\n                    right = left - right;\n                    break;\n                case \"*\":\n                    right = left * right;\n                    break;\n                case \"/\":\n                    right = left / right;\n                    break;\n                case \"**\":\n                    right = left % right;\n                    break;\n            }\n            left = right;\n        }\n        return right;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < operand.size() - 1; i++) {\n            switch (op.get(i)) {\n                case \"+\": result += operand.get(i+1);\n                    break;\n                case \"-\": result -= operand.get(i+1);\n                    break;\n                case \"*\": result *= operand.get(i+1);\n                    break;\n                case \"/\": result /= operand.get(i+1);\n                    break;\n                case \"**\": result = (long)Math.pow(result, operand.get(i+1));\n                    break;\n                default: break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < operand.size() - 1; i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    result = result + operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result = result - operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result = result * operand.get(i + 1);\n                    break;\n                case \"/\":\n                    result = result / operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here.\n        long result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            if (op.get(i - 1).equals(\"+\"))\n                result += operand.get(i);\n            else if (op.get(i - 1).equals(\"-\"))\n                result -= operand.get(i);\n            else if (op.get(i - 1).equals(\"*\"))\n                result *= operand.get(i);\n            else if (op.get(i - 1).equals(\"//\"))\n                result = (long) Math.floor((double) result / (double) operand.get(i));\n            else if (op.get(i - 1).equals(\"**\"))\n                result = (long) Math.pow((double) result, (double) operand.get(i));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        var accum = operand.get(0);\n        for (var i = 1; i < operand.size(); i++) {\n            switch (op.get(i - 1)) {\n            case \"+\" -> accum += operand.get(i);\n            case \"-\" -> accum -= operand.get(i);\n            case \"*\" -> accum *= operand.get(i);\n            case \"/\" -> accum /= operand.get(i);\n            case \"**\" -> accum = (long) Math.pow(accum, operand.get(i));\n            }\n        }\n        return accum;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long)Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n            case \"+\":\n                result += operand.get(i + 1);\n                break;\n            case \"-\":\n                result -= operand.get(i + 1);\n                break;\n            case \"*\":\n                result *= operand.get(i + 1);\n                break;\n            case \"//\":\n                result /= operand.get(i + 1);\n                break;\n            case \"**\":\n                result = (long) Math.pow(result, operand.get(i + 1));\n                break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"/\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        int i = 1;\n        while (i < operand.size()) {\n            if (op.get(i - 1).equals(\"+\"))\n                result = result + operand.get(i);\n            else if (op.get(i - 1).equals(\"-\"))\n                result = result - operand.get(i);\n            else if (op.get(i - 1).equals(\"*\"))\n                result = result * operand.get(i);\n            else if (op.get(i - 1).equals(\"//\"))\n                result = result / operand.get(i);\n            else if (op.get(i - 1).equals(\"**\"))\n                result = (long) Math.pow(result, operand.get(i));\n            i++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = (Long)operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result = (long) (result / operand.get(i + 1));\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n                default:\n                    System.out.println(\"error\");\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        var n = operand.size();\n        var result = operand.get(0);\n        for (var i = 1; i < n; i++) {\n            switch (op.get(i - 1)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"//\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result = (long)Math.floorDiv(result, operand.get(i + 1));\n                    break;\n                case \"**\":\n                    result = (long)Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0, j = 0;\n        long result = operand.get(i++);\n        while (i < operand.size()) {\n            switch (op.get(j++)) {\n                case \"+\":\n                    result += operand.get(i++);\n                    break;\n                case \"-\":\n                    result -= operand.get(i++);\n                    break;\n                case \"*\":\n                    result *= operand.get(i++);\n                    break;\n                case \"//\":\n                    result = (long) Math.floorDiv(result, operand.get(i++));\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i++));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if (op.size() != operand.size() - 1) {\n            return -1;\n        }\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); ++i) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                result = Math.floorDiv(result, operand.get(i + 1));\n            } else if (op.get(i).equals(\"**\")) {\n                result = Math.pow(result, operand.get(i + 1));\n            } else {\n                return -1;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        String operator = op.get(0);\n        long first = operand.get(0);\n        long second = operand.get(1);\n        switch (operator) {\n            case \"+\":\n                return first + second;\n            case \"-\":\n                return first - second;\n            case \"*\":\n                return first * second;\n            case \"/\":\n                return first / second;\n            case \"//\":\n                return first / second;\n            case \"**\":\n                return (long) Math.pow(first, second);\n            default:\n                throw new IllegalArgumentException(\"Unexpected operator:\" + operator);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int length = operand.size();\n        Stack<Integer> stack = new Stack<Integer>();\n        String prevOp = \"+\";\n        long result = operand.get(0);\n        for (int i = 1; i < length; i++) {\n            if (i < length - 1) {\n                if (prevOp.equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (prevOp.equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (prevOp.equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (prevOp.equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (prevOp.equals(\"**\")) {\n                    result = (long)Math.pow(result, operand.get(i));\n                }\n            }\n            prevOp = op.get(i-1);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = (long)operand.get(0);\n        for(int i = 0; i < op.size(); i++){\n            switch(op.get(i)){\n                case \"+\":\n                    result += operand.get(i+1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i+1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i+1);\n                    break;\n                case \"//\":\n                    result /= operand.get(i+1);\n                    break;\n                case \"**\":\n                    result = (long)Math.pow(result, operand.get(i+1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long answer = operand.get(0);\n        for(int i = 0; i < op.size(); ++i) {\n            switch(op.get(i)) {\n            case \"+\":\n                answer += operand.get(i + 1);\n                break;\n            case \"-\":\n                answer -= operand.get(i + 1);\n                break;\n            case \"*\":\n                answer *= operand.get(i + 1);\n                break;\n            case \"//\":\n                answer /= operand.get(i + 1);\n                break;\n            case \"**\":\n                answer = (long)Math.pow(answer, operand.get(i + 1));\n                break;\n            }\n        }\n        return answer;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            long tmp = 0;\n            if (op.get(i).equals(\"+\")) {\n                tmp = result + operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                tmp = result - operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                tmp = result * operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                tmp = result / operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n                tmp = (long) Math.pow(result, operand.get(i + 1));\n            }\n            result = tmp;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        return doAlgebra(op, operand, 0, operand.size() - 1);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        int n = op.size() + 1;\n        for(int i = 1; i < n; i++){\n            if(op.get(i-1).equals(\"+\")){\n                operand.set(i, operand.get(i-1) + operand.get(i));\n            } else if(op.get(i-1).equals(\"-\")){\n                operand.set(i, operand.get(i-1) - operand.get(i));\n            } else if(op.get(i-1).equals(\"*\")){\n                operand.set(i, operand.get(i-1) * operand.get(i));\n            } else if(op.get(i-1).equals(\"//\")){\n                operand.set(i, operand.get(i-1) / operand.get(i));\n            } else if(op.get(i-1).equals(\"**\")){\n                operand.set(i, Math.pow(operand.get(i-1), operand.get(i)));\n            }\n        }\n        return operand.get(n-1);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long ans = operand.get(0);\n        for(int i = 0; i < op.size(); i++) {\n            if(op.get(i).equals(\"+\")) {\n                ans += operand.get(i + 1);\n            } else if(op.get(i).equals(\"-\")) {\n                ans -= operand.get(i + 1);\n            } else if(op.get(i).equals(\"*\")) {\n                ans *= operand.get(i + 1);\n            } else if(op.get(i).equals(\"//\")) {\n                ans = ans / operand.get(i + 1);\n            } else if(op.get(i).equals(\"**\")) {\n                ans = ans * (long)Math.pow(operand.get(i + 1), 2);\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        int size = op.size();\n        for (int i = 0; i < size; i++) {\n            String operator = op.get(i);\n            long tmp = operand.get(i + 1);\n            switch (operator) {\n            case \"+\":\n                result = result + tmp;\n                break;\n            case \"-\":\n                result = result - tmp;\n                break;\n            case \"*\":\n                result = result * tmp;\n                break;\n            case \"/\":\n                result = result / tmp;\n                break;\n            case \"**\":\n                result = (long)Math.pow(result, tmp);\n                break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int size = operand.size();\n        Stack<Integer> stk = new Stack<Integer>();\n        int i=0;\n        //solving the equation \n        while (i < size) {\n            if (!isOperator(op.get(i)) && i != 0) {\n                operand.add(i, operand.get(i - 1) - operand.get(i));\n                operand.set(i - 1, operand.get(i - 1) - operand.get(i));\n                i--;\n                continue;\n            }\n            if (!isOperator(op.get(i)) && i == 0) {\n                operand.add(i, operand.get(i));\n                i++;\n                continue;\n            }\n            if (stk.isEmpty() || getPrecedence(op.get(stk.peek())) <= getPrecedence(op.get(i))) {\n                stk.push(i);\n            } else {\n                int top = stk.peek();\n                while (getPrecedence(op.get(stk.peek())) > getPrecedence(op.get(i))) {\n                    int temp = op.get(top).charAt(0);\n                    if (temp == '+') {\n                        operand.set(top, operand.get(top) + operand.get(top + 1));\n                        operand.remove(top + 1);\n                        top++;\n                        op.remove(top);\n                        i--;\n                    }\n                    if (temp == '-') {\n                        operand.set(top, operand.get(top) - operand.get(top + 1));\n                        operand.remove(top + 1);\n                        top++;\n                        op.remove(top);\n                        i--;\n                    }\n                    if (temp == '*') {\n                        operand.set(top, operand.get(top) * operand.get(top + 1));\n                        operand.remove(top + 1);\n                        top++;\n                        op.remove(top);\n                        i--;\n                    }\n                    if (temp == '/') {\n                        operand.set(top, operand.get(top) / operand.get(top + 1));\n                        operand.remove(top + 1);\n                        top++;\n                        op.remove(top);\n                        i--;\n                    }\n                    if (temp == '^') {\n                        operand.set(top, (long)Math.pow(operand.get(top).doubleValue(), operand.get(top + 1).doubleValue()));\n                        operand.remove(top + 1);\n                        top++;\n                        op.remove(top);\n                        i--;\n                    }\n                    if (stk.isEmpty()) {\n", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        long result = operand.get(i++);\n        while (i < operand.size()) {\n            result = doOneAlgebra(op.get(i-1), result, operand.get(i++));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i=0;\n        while(i<operand.size()-1)\n        {\n            int ind=i+1;\n            if(op.get(i).equals(\"+\"))\n                operand.set(ind,operand.get(ind)+operand.get(i));\n            else if(op.get(i).equals(\"-\"))\n                operand.set(ind,operand.get(ind)-operand.get(i));\n            else if(op.get(i).equals(\"*\"))\n                operand.set(ind,operand.get(ind)*operand.get(i));\n            else if(op.get(i).equals(\"//\"))\n                operand.set(ind,operand.get(ind)/operand.get(i));\n            else if(op.get(i).equals(\"**\"))\n                operand.set(ind,Math.pow(operand.get(ind),operand.get(i)));\n            i++;\n        }\n        return operand.get(operand.size()-1);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Stack<Long> stack = new Stack<Long>();\n        for (int i = 0; i < operand.size(); i++) {\n            stack.push(operand.get(i));\n        }\n        for (String o: op) {\n            if (o.equals(\"+\")) {\n                stack.push(stack.pop() + stack.pop());\n            } else if (o.equals(\"-\")) {\n                stack.push(-stack.pop() + stack.pop());\n            } else if (o.equals(\"*\")) {\n                stack.push(stack.pop() * stack.pop());\n            } else if (o.equals(\"//\")) {\n                stack.push(stack.pop() / stack.pop());\n            } else if (o.equals(\"**\")) {\n                stack.push(new BigInteger(stack.pop().toString()).pow(stack.pop().intValue()).longValue());\n            }\n        }\n        return stack.pop();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            result = (i == 0) ? operand.get(i) : doOperation(result, op.get(i - 1), operand.get(i));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        for (int i = 0; i < operand.size() - 1; i++) {\n            switch (op.get(i)) {\n            case \"+\":\n                operand.set(i + 1, operand.get(i) + operand.get(i + 1));\n                break;\n            case \"-\":\n                operand.set(i + 1, operand.get(i) - operand.get(i + 1));\n                break;\n            case \"*\":\n                operand.set(i + 1, operand.get(i) * operand.get(i + 1));\n                break;\n            case \"/\":\n                operand.set(i + 1, operand.get(i) / operand.get(i + 1));\n                break;\n            case \"**\":\n                operand.set(i + 1, Math.pow(operand.get(i), operand.get(i + 1)));\n                break;\n            default:\n                break;\n            }\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int l = op.size(), n = operand.size();\n        l--;\n        ArrayList<Long> temp = new ArrayList<>();\n        int i = 0, j = 0;\n        while(l>0){\n            switch(op.get(i)){\n                case \"+\": temp.add(operand.get(j)+operand.get(j+1));\n                l--; j = j + 2; i++; break;\n                case \"-\": temp.add(operand.get(j)-operand.get(j+1));\n                l--; j = j + 2; i++; break;\n                case \"*\": temp.add(operand.get(j)*operand.get(j+1));\n                l--; j = j + 2; i++; break;\n                case \"/\": temp.add(operand.get(j)/operand.get(j+1));\n                l--; j = j + 2; i++; break;\n                case \"**\": temp.add(Math.pow(operand.get(j),operand.get(j+1)));\n                l--; j = j + 2; i++; break;\n            }\n        }\n        long res = temp.get(0);\n        for(int k = 1; k < temp.size(); k++) {\n            res += temp.get(k);\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        String operator = op.get(0);\n        long result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            switch (operator) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"//\":\n                    result = result / operand.get(i);\n                    break;\n                case \"**\":\n                    result = Math.pow(result, operand.get(i));\n                    break;\n            }\n            if (i < op.size()) {\n                operator = op.get(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        String operator = op.get(0);\n        long num1 = operand.get(0);\n        long num2 = operand.get(1);\n        if (op.size() > 1) {\n            ArrayList<String> rest = new ArrayList<String>(op.subList(1, op.size()));\n            ArrayList<Long> restOperand = new ArrayList<Long>(operand.subList(2, operand.size()));\n            num2 = doAlgebra(rest, restOperand);\n        }\n        switch (operator) {\n            case \"+\":\n                return num1 + num2;\n            case \"-\":\n                return num1 - num2;\n            case \"*\":\n                return num1 * num2;\n            case \"/\":\n                return num1 / num2;\n            case \"**\":\n                return (long)Math.pow(num1, num2);\n            default:\n                return num1;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) result += operand.get(i + 1);\n            else if (op.get(i).equals(\"-\")) result -= operand.get(i + 1);\n            else if (op.get(i).equals(\"*\")) result *= operand.get(i + 1);\n            else if (op.get(i).equals(\"//\")) result /= operand.get(i + 1);\n            else if (op.get(i).equals(\"**\")) result = (long) Math.pow(result, operand.get(i + 1));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Long a = operand.get(0);\n        for(int i=0; i<operand.size()-1; i++) {\n            if(op.get(i).equals(\"+\")) a += operand.get(i+1);\n            if(op.get(i).equals(\"-\")) a -= operand.get(i+1);\n            if(op.get(i).equals(\"*\")) a *= operand.get(i+1);\n            if(op.get(i).equals(\"//\")) a = a / operand.get(i+1);\n            if(op.get(i).equals(\"**\")) a = (long)Math.pow(a,operand.get(i+1));\n        }\n        return a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            if (op.get(i-1).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (op.get(i-1).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (op.get(i-1).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (op.get(i-1).equals(\"//\")) {\n                result /= operand.get(i);\n            } else if (op.get(i-1).equals(\"**\")) {\n                result = (long) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here.\n        long result = operand.get(0);\n        int len = op.size();\n        for (int i = 0; i < len; i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                result = (long) result / (long) operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n                result = (long) result * (long) Math.pow(operand.get(i + 1), result);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int o = 0;\n        ArrayList<Long> t = new ArrayList<Long>();\n        while (o < operand.size() - 1) {\n            String oop = op.get(o);\n            long i = operand.get(o);\n            long j = operand.get(o + 1);\n            long k = 0;\n            switch (oop) {\n                case \"+\":\n                    k = i + j;\n                    break;\n                case \"-\":\n                    k = i - j;\n                    break;\n                case \"*\":\n                    k = i * j;\n                    break;\n                case \"//\":\n                    k = i / j;\n                    break;\n                case \"**\":\n                    k = (long)Math.pow(i, j);\n                    break;\n                default:\n                    break;\n            }\n            operand.set(o, k);\n            o++;\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        Long result = operand.get(i);\n        for(String o:op){\n            i++;\n            if(o.equals(\"+\")){\n                result = result+operand.get(i);\n            }\n            else if(o.equals(\"-\")){\n                result = result-operand.get(i);\n            }\n            else if(o.equals(\"*\")){\n                result = result*operand.get(i);\n            }\n            else if(o.equals(\"//\")){\n                result = result/operand.get(i);\n            }\n            else if(o.equals(\"**\")){\n                result = (long)Math.pow(result,operand.get(i).intValue());\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Create a variable to store the result\n        long result = operand.get(0);\n        // Loop over the operators and operands to create the equation and evaluate the result\n        for(int i = 0; i < op.size(); i++){\n          switch(op.get(i)){\n            case \"+\":\n              result = result + operand.get(i+1);\n              break;\n            case \"-\":\n              result = result - operand.get(i+1);\n              break;\n            case \"*\":\n              result = result * operand.get(i+1);\n              break;\n            case \"/\":\n              result = result / operand.get(i+1);\n              break;\n            case \"**\":\n              result = (long)Math.pow(result, operand.get(i+1));\n              break;\n          }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Stack<Long> s = new Stack<Long>();\n        for (int i = 0; i < operand.size(); i++) {\n            s.push(operand.get(i));\n            if (op.contains(\"*\")) {\n                int index = op.indexOf(\"*\");\n                op.remove(index);\n                s.push(s.pop() * s.pop());\n            }\n            if (op.contains(\"+\")) {\n                int index = op.indexOf(\"+\");\n                op.remove(index);\n                s.push(s.pop() + s.pop());\n            }\n            if (op.contains(\"-\")) {\n                int index = op.indexOf(\"-\");\n                op.remove(index);\n                s.push(s.pop() - s.pop());\n            }\n            if (op.contains(\"/\")) {\n                int index = op.indexOf(\"/\");\n                op.remove(index);\n                s.push(s.pop() / s.pop());\n            }\n        }\n        return s.pop();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int len = op.size();\n        long res = operand.get(0);\n        for (int i = 0; i < len; i++) {\n            switch (op.get(i)) {\n                case \"+\" : res += operand.get(i + 1); break;\n                case \"-\" : res -= operand.get(i + 1); break;\n                case \"*\" : res *= operand.get(i + 1); break;\n                case \"/\" : res /= operand.get(i + 1); break;\n                case \"**\": res = (long)Math.pow(res, operand.get(i + 1)); break;\n                default: throw new IllegalArgumentException(\"Unknown operator\");\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        Stack<Long> nums = new Stack<>();\n        for(int i = 0; i < operand.size(); i++){\n            nums.push(operand.get(i));\n        }\n        for(int i = 0; i < op.size(); i++){\n            int a = nums.pop().intValue();\n            int b = nums.pop().intValue();\n            switch(op.get(i)){\n                case \"**\":\n                    nums.push((long)Math.pow(a, b));\n                    break;\n                case \"*\":\n                    nums.push((long)a*b);\n                    break;\n                case \"+\":\n                    nums.push((long)a+b);\n                    break;\n                case \"-\":\n                    nums.push((long)a-b);\n                    break;\n                case \"/\":\n                    nums.push((long)a/b);\n                    break;\n            }\n        }\n        return nums.pop();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if (op == null || op.size() == 0) {\n            throw new IllegalArgumentException(\"Operator must not be null or empty\");\n        }\n        if (operand == null || operand.size() == 0) {\n            throw new IllegalArgumentException(\"Operand must not be null or empty\");\n        }\n        if (operand.size() - 1 != op.size()) {\n            throw new IllegalArgumentException(\"Invalid operator and operand\");\n        }\n        int size = operand.size();\n        Long operand1 = operand.get(0);\n        for (int i = 1; i < size; i++) {\n            operand1 = doOp(operand1, operand.get(i), op.get(i - 1));\n        }\n        return operand1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 1;\n        while (i < operand.size()) {\n            if (op.get(i - 1).equals(\"+\")) {\n                operand.set(i, operand.get(i) + operand.get(i - 1));\n                operand.remove(i - 1);\n            } else if (op.get(i - 1).equals(\"-\")) {\n                operand.set(i, operand.get(i) - operand.get(i - 1));\n                operand.remove(i - 1);\n            } else if (op.get(i - 1).equals(\"*\")) {\n                operand.set(i, operand.get(i) * operand.get(i - 1));\n                operand.remove(i - 1);\n            } else if (op.get(i - 1).equals(\"//\")) {\n                operand.set(i, operand.get(i) / operand.get(i - 1));\n                operand.remove(i - 1);\n            } else if (op.get(i - 1).equals(\"**\")) {\n                operand.set(i, (long) Math.pow(operand.get(i), operand.get(i - 1)));\n                operand.remove(i - 1);\n            }\n            i++;\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int opsize = op.size();\n        int opersize = operand.size();\n        // Create a copy of operand list\n        ArrayList<Long> copyop = new ArrayList<Long>(operand);\n        // Initialize the value of final result\n        long result = 0L;\n        for(int i = 0; i < opsize; i++) {\n            // Get current operator\n            String currentop = op.get(i);\n            // Get current operand\n            Long currentoper = copyop.get(0);\n            // Remove the current operand from the copyop list\n            copyop.remove(0);\n            // Check if the first time to do the algebra\n            if (i == 0) {\n                // Initialize the final result\n                result = currentoper;\n            }\n            // Check if the current operator is addition\n            if (currentop.equals(\"+\")) {\n                // The current result is the sum of the previous result and current operand\n                result += currentoper;\n            }\n            // Check if the current operator is subtraction\n            if (currentop.equals(\"-\")) {\n                // The current result is the difference of the previous result and current operand\n                result -= currentoper;\n            }\n            // Check if the current operator is multiplication\n            if (currentop.equals(\"*\")) {\n                // The current result is the product of the previous result and current operand\n                result *= currentoper;\n            }\n            // Check if the current operator is floor division\n            if (currentop.equals(\"//\")) {\n                // The current result is the floor division of the previous result and current operand\n                result = (long) Math.floor((double) result / currentoper);\n            }\n            // Check if the current operator is exponentiation\n            if (currentop.equals(\"**\")) {\n                // The current result is the power of the previous result and current operand\n                result = (long) Math.pow(result, currentoper);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int sz = op.size();\n        long result = operand.get(0);\n        int i = 0;\n        while (i < sz) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                result = (long) result / operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result, operand.get(i + 1));\n            }\n            i += 2;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    result = result + operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result = result - operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result = result * operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result = result / operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        int i = 0;\n        long result = operand.get(0);\n        while(i < operand.size()-1){\n            switch(op.get(i)){\n                case \"+\":\n                    result += operand.get(i+1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i+1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i+1);\n                    break;\n                case \"/\":\n                    result /= operand.get(i+1);\n                    break;\n                case \"**\":\n                    result = (long)Math.pow(result, operand.get(i+1));\n                    break;\n            }\n            i++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n                result = (long)Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for(int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"/\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        String operator = op.get(0);\n        long num1 = operand.get(0);\n        long num2 = operand.get(1);\n        for (int i = 1; i < operand.size() - 1; i++) {\n            if (operator.equals(\"+\")) {\n                num1 += operand.get(i + 1);\n            } else if (operator.equals(\"*\")) {\n                num1 *= operand.get(i + 1);\n            } else if (operator.equals(\"-\")) {\n                num1 -= operand.get(i + 1);\n            } else {\n                num1 /= operand.get(i + 1);\n            }\n        }\n        if (operator.equals(\"**\")) {\n            return (long) Math.pow(num1, num2);\n        } else {\n            return num1;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Your code goes here\n        int opCount = 0;\n        int opSize = op.size();\n        int operandSize = operand.size();\n        while (operandSize > 1) {\n            opCount++;\n            long first = operand.remove(0);\n            long second = operand.remove(0);\n            String operator = op.remove(0);\n            switch (operator) {\n                case \"+\":\n                    operand.add(0, first + second);\n                    break;\n                case \"-\":\n                    operand.add(0, first - second);\n                    break;\n                case \"*\":\n                    operand.add(0, first * second);\n                    break;\n                case \"/\":\n                    operand.add(0, first / second);\n                    break;\n                case \"**\":\n                    operand.add(0, (long) Math.pow(first, second));\n                    break;\n            }\n        }\n        if (opCount != opSize) {\n            throw new RuntimeException(\"Incorrect operation\");\n        }\n        if (operandSize != 1) {\n            throw new RuntimeException(\"Incorrect operand\");\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        int i=0,j=1;\n        long temp=0;\n        if(op.get(i).equals(\"+\")){\n            return operand.get(i)+operand.get(j);\n        }\n        if(op.get(i).equals(\"-\")){\n            return operand.get(i)-operand.get(j);\n        }\n        if(op.get(i).equals(\"*\")){\n            return operand.get(i)*operand.get(j);\n        }\n        if(op.get(i).equals(\"//\")){\n            return operand.get(i)/operand.get(j);\n        }\n        if(op.get(i).equals(\"**\")){\n            return (long)Math.pow(operand.get(i),operand.get(j));\n        }\n        return temp;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        String expression = operand.toString();\n        for (String o: op)\n            expression = expression.replace(\"[\", \"\").replace(\"]\", \"\") + o;\n        return (Long) (new ScriptEngineManager().getEngineByName(\"JavaScript\").eval(expression));", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        long ans = operand.get(0);\n        for(int i = 1; i < operand.size(); i++) {\n            if(op.get(i-1).equals(\"+\")) {\n                ans += operand.get(i);\n            }\n            else if(op.get(i-1).equals(\"*\")) {\n                ans *= operand.get(i);\n            }\n            else if(op.get(i-1).equals(\"-\")) {\n                ans -= operand.get(i);\n            }\n            else {\n                ans /= operand.get(i);\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        int j = 1;\n        long ans = operand.get(0);\n        while (j < operand.size()) {\n            if (op.get(i).equals(\"+\")) {\n                ans += operand.get(j);\n            }\n            else if (op.get(i).equals(\"*\")) {\n                ans *= operand.get(j);\n            }\n            else if (op.get(i).equals(\"-\")) {\n                ans -= operand.get(j);\n            }\n            else if (op.get(i).equals(\"//\")) {\n                ans /= operand.get(j);\n            }\n            else if (op.get(i).equals(\"**\")) {\n                ans = (long)Math.pow(ans, operand.get(j));\n            }\n            i++;\n            j++;\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (long num : operand) {\n            result += num;\n        }\n        for (int i = 0; i < op.size(); i++) {\n            String operator = op.get(i);\n            switch (operator) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int opIndex = 0;\n        if (operand.size() == 1) {\n            return operand.get(0);\n        }\n        long result = operand.get(0);\n        while (opIndex < op.size()) {\n            switch (op.get(opIndex)) {\n                case \"+\":\n                    result += operand.get(opIndex + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(opIndex + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(opIndex + 1);\n                    break;\n                case \"/\":\n                    result /= operand.get(opIndex + 1);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(opIndex + 1));\n                    break;\n                default:\n                    throw new AssertionError(\"Invalid Operator!\");\n            }\n            opIndex++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        long l = (long)operand.get(0);\n        for(int i = 1; i < operand.size(); i++) {\n            switch(op.get(i - 1)) {\n                case \"+\":\n                    l += operand.get(i);\n                    break;\n                case \"-\":\n                    l -= operand.get(i);\n                    break;\n                case \"*\":\n                    l *= operand.get(i);\n                    break;\n                case \"//\":\n                    l /= operand.get(i);\n                    break;\n                case \"**\":\n                    l = (long)Math.pow(l, operand.get(i));\n                    break;\n            }\n        }\n        return l;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < operand.size() - 1; i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"/\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        int len = op.size();\n        int i = 0;\n        while (i < len) {\n            if (op.get(i).equals(\"+\")) {\n                operand.set(i, operand.get(i) + operand.get(i + 1));\n                operand.remove(i + 1);\n                op.remove(i);\n                i--;\n                len--;\n            } else if (op.get(i).equals(\"-\")) {\n                operand.set(i, operand.get(i) - operand.get(i + 1));\n                operand.remove(i + 1);\n                op.remove(i);\n                i--;\n                len--;\n            } else if (op.get(i).equals(\"*\")) {\n                operand.set(i, operand.get(i) * operand.get(i + 1));\n                operand.remove(i + 1);\n                op.remove(i);\n                i--;\n                len--;\n            } else if (op.get(i).equals(\"//\")) {\n                operand.set(i, operand.get(i) / operand.get(i + 1));\n                operand.remove(i + 1);\n                op.remove(i);\n                i--;\n                len--;\n            } else if (op.get(i).equals(\"**\")) {\n                operand.set(i, Math.pow(operand.get(i), operand.get(i + 1)));\n                operand.remove(i + 1);\n                op.remove(i);\n                i--;\n                len--;\n            }\n            i++;\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int opSize = op.size();\n        Long[] o = operand.toArray(new Long[operand.size()]);\n        long res = 0;\n        for (int i = 0; i < opSize; ++i) {\n            res += o[i] * o[i + 1];\n            switch (op.get(i)) {\n                case \"+\":\n                    res += o[i + 1];\n                    break;\n                case \"-\":\n                    res -= o[i + 1];\n                    break;\n                case \"*\":\n                    res *= o[i + 1];\n                    break;\n                case \"/\":\n                    res /= o[i + 1];\n                    break;\n                case \"**\":\n                    res = (long) Math.pow(res, o[i + 1]);\n                    break;\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        long res = operand.get(i++);\n        while (i < operand.size()) {\n            if (op.get(i - 1).equals(\"+\"))\n                res += operand.get(i++);\n            else if (op.get(i - 1).equals(\"-\"))\n                res -= operand.get(i++);\n            else if (op.get(i - 1).equals(\"*\"))\n                res *= operand.get(i++);\n            else if (op.get(i - 1).equals(\"//\"))\n                res /= operand.get(i++);\n            else if (op.get(i - 1).equals(\"**\"))\n                res = (long) Math.pow(res, operand.get(i++));\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            switch (op.get(i - 1)) {\n            case \"+\":\n                result += operand.get(i);\n                break;\n            case \"-\":\n                result -= operand.get(i);\n                break;\n            case \"*\":\n                result *= operand.get(i);\n                break;\n            case \"//\":\n                result /= operand.get(i);\n                break;\n            case \"**\":\n                result = (long) Math.pow(result, operand.get(i));\n                break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        long result = 0;\n        String firstOp = op.get(0);\n        long firstNum = operand.get(0);\n        for (long num : operand.subList(1, operand.size())) {\n            switch (firstOp) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = Math.pow(result, (int) num);\n                    break;\n            }\n            firstOp = op.get(i);\n            i++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Stack<String> ops = new Stack<String>();\n        Stack<Long> vals = new Stack<Long>();\n        for (String s : op) {\n            ops.push(s);\n        }\n        for (Long l : operand) {\n            vals.push(l);\n        }\n        while (!ops.isEmpty()) {\n            String op1 = ops.pop();\n            Long op2 = vals.pop();\n            Long op3 = vals.pop();\n            if (op1.equals(\"+\")) {\n                vals.push(op2 + op3);\n            }\n            if (op1.equals(\"*\")) {\n                vals.push(op2 * op3);\n            }\n            if (op1.equals(\"-\")) {\n                vals.push(op2 - op3);\n            }\n            if (op1.equals(\"//\")) {\n                vals.push(op2 / op3);\n            }\n            if (op1.equals(\"**\")) {\n                vals.push(Math.pow(op2, op3.intValue()));\n            }\n        }\n        return vals.pop();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        for(int i = 1; i < operand.size(); i++) {\n            if(op.get(i - 1).equals(\"+\")) {\n                operand.set(i, operand.get(i - 1) + operand.get(i));\n            } else if(op.get(i - 1).equals(\"-\")) {\n                operand.set(i, operand.get(i - 1) - operand.get(i));\n            } else if(op.get(i - 1).equals(\"*\")) {\n                operand.set(i, operand.get(i - 1) * operand.get(i));\n            } else if(op.get(i - 1).equals(\"//\")) {\n                operand.set(i, operand.get(i - 1) / operand.get(i));\n            } else if(op.get(i - 1).equals(\"**\")) {\n                operand.set(i, Math.pow(operand.get(i - 1), operand.get(i)));\n            }\n        }\n        return operand.get(1);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int len = op.size();\n        long[] num = new long[len + 1];\n        for(int i = 0; i < len; ++i) {\n            int j = i;\n            int k = i + 1;\n            num[j] = operand.get(j);\n            num[k] = operand.get(k);\n            if(op.get(i).equals(\"+\")) num[j] += num[k];\n            else if(op.get(i).equals(\"-\")) num[j] -= num[k];\n            else if(op.get(i).equals(\"*\")) num[j] *= num[k];\n            else if(op.get(i).equals(\"//\")) num[j] /= num[k];\n            else if(op.get(i).equals(\"**\")) num[j] = (long)Math.pow(num[j], num[k]);\n            else return -1;\n        }\n        return num[0];", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < operand.size() - 1; i++) {\n            switch(op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result = result / operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) result += operand.get(i + 1);\n            else if (op.get(i).equals(\"-\")) result -= operand.get(i + 1);\n            else if (op.get(i).equals(\"*\")) result *= operand.get(i + 1);\n            else if (op.get(i).equals(\"//\")) result /= operand.get(i + 1);\n            else if (op.get(i).equals(\"**\")) result = (long) Math.pow(result, operand.get(i + 1));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        // \uc5f0\uc0b0\uc790\uc640 \uc22b\uc790 \ubc30\uc5f4\uc744 \ud1b5\ud574 \uc2dd\uc744 \ub9cc\ub4e4\uc5b4 \ucd5c\uc885\uac12\uc744 \uad6c\ud558\ub294 \ud568\uc218 \uc791\uc131\n        // operator['+', '*', '-']\n        // array array list = [2, 3, 4, 5]\n        // result = 2 + 3 * 4 - 5\n        // => result = 9\n        // \uc608\uc2dc\n        // operator['+', '*', '-']\n        // operand = [2, 3, 4, 5]\n        // \ucd5c\uc885\uac12\uc740 9\n        // \uaddc\uce59\n        // \uc5f0\uc0b0\uc790\uc640 \uc22b\uc790 \ubc30\uc5f4\uc758 \uae38\uc774 \ucc28\uc774\uac00 1\uc774\ub2e4\n        // \uc22b\uc790 \ubc30\uc5f4\uc740 \ucd5c\uc18c 2\uac1c \uc774\uc0c1\n        // \uc5f0\uc0b0\uc790 \ubc30\uc5f4\uc5d0\ub294 1\uac1c \uc774\uc0c1\n        int[] temp;\n        String result = \"\";\n        String temp2;\n        for (int i = 0; i < operand.size() - 1; i++) {\n            temp = new int[2];\n            temp[0] = operand.get(i).intValue();\n            temp[1] = operand.get(i + 1).intValue();\n            if (op.get(i).equals(\"+\")) {\n                result += (temp[0] + temp[1]);\n            } else if (op.get(i).equals(\"-\")) {\n                result += (temp[0] - temp[1]);\n            } else if (op.get(i).equals(\"*\")) {\n                result += (temp[0] * temp[1]);\n            } else if (op.get(i).equals(\"//\")) {\n                result += (temp[0] / temp[1]);\n            } else if (op.get(i).equals(\"**\")) {\n                result += (Math.pow(temp[0], temp[1]));\n            }\n            result += op.get(i);\n        }\n        result = result.substring(0, result.length() - 1);\n        // \ud30c\uc774\uc36c\uc5d0\uc11c\ub294 eval()\uc774\ub77c\ub294 \ud568\uc218\uac00 \uc788\ub294\ub370 \uc0ac\uc6a9\ub41c\ub2e4.\n        // \ucf54\ud2c0\ub9b0\uc740 \uc5c6\ub294\uac70 \uac19\ub2e4.\n        // \uadf8\ub798\uc11c \uc9c1\uc811 \ub9cc\ub4e4\uc5b4\uc918\uc57c \ud55c\ub2e4.\n        // \uc0ac\uce59\uc5f0\uc0b0\ub9cc \uc788\ub294 \uc2dd\uc774\ub77c\uc11c \uc5c4\uccad \uac04\ub2e8\ud558\ub2e4.\n        // \uc790\ub8cc\ud615 \ufffd\ufffd\ufffd\ufffd\ufffd", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int idx = 0;\n        int l = operand.size() - 1;\n        while(idx < l){\n            if(op.get(idx).equals(\"+\")){\n                operand.set(idx, operand.get(idx) + operand.get(idx+1));\n                op.remove(idx);\n                operand.remove(idx+1);\n                idx--;\n                l--;\n            }\n            else if(op.get(idx).equals(\"-\")){\n                operand.set(idx, operand.get(idx) - operand.get(idx+1));\n                op.remove(idx);\n                operand.remove(idx+1);\n                idx--;\n                l--;\n            }\n            else if(op.get(idx).equals(\"*\")){\n                operand.set(idx, operand.get(idx) * operand.get(idx+1));\n                op.remove(idx);\n                operand.remove(idx+1);\n                idx--;\n                l--;\n            }\n            else if(op.get(idx).equals(\"//\")){\n                operand.set(idx, operand.get(idx) / operand.get(idx+1));\n                op.remove(idx);\n                operand.remove(idx+1);\n                idx--;\n                l--;\n            }\n            else if(op.get(idx).equals(\"**\")){\n                operand.set(idx, Math.pow(operand.get(idx), operand.get(idx+1)));\n                op.remove(idx);\n                operand.remove(idx+1);\n                idx--;\n                l--;\n            }\n            idx++;\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            switch (op.get(i - 1)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if(operand.size() == 1) {\n            return operand.get(0);\n        }\n        if(op.get(0).equals(\"+\")) {\n            return operand.get(0) + doAlgebra(op.subList(1, op.size()), operand.subList(1, operand.size()));\n        } else if (op.get(0).equals(\"-\")) {\n            return operand.get(0) - doAlgebra(op.subList(1, op.size()), operand.subList(1, operand.size()));\n        } else if (op.get(0).equals(\"*\")) {\n            return operand.get(0) * doAlgebra(op.subList(1, op.size()), operand.subList(1, operand.size()));\n        } else if (op.get(0).equals(\"//\")) {\n            return operand.get(0) / doAlgebra(op.subList(1, op.size()), operand.subList(1, operand.size()));\n        } else {\n            return (long) Math.pow(operand.get(0), doAlgebra(op.subList(1, op.size()), operand.subList(1, operand.size())));\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long first = operand.get(0);\n        int i = 1;\n        while(i < operand.size()) {\n            if(op.get(i-1).equals(\"+\")) {\n                first += operand.get(i);\n            } else if(op.get(i-1).equals(\"-\")) {\n                first -= operand.get(i);\n            } else if(op.get(i-1).equals(\"*\")) {\n                first *= operand.get(i);\n            } else if(op.get(i-1).equals(\"//\")) {\n                first = (long)first / (long)operand.get(i);\n            } else if(op.get(i-1).equals(\"**\")) {\n                first = (long)Math.pow(first, operand.get(i));\n            }\n            i++;\n        }\n        return first;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        while(i < op.size()){\n            if(op.get(i).equals(\"*\")){\n                int temp = (int)operand.get(i);\n                operand.set(i,(operand.get(i-1)*operand.get(i)));\n                operand.set(i-1,temp);\n            }\n            if(op.get(i).equals(\"-\")){\n                int temp = (int)operand.get(i);\n                operand.set(i,(operand.get(i-1)-operand.get(i)));\n                operand.set(i-1,temp);\n            }\n            if(op.get(i).equals(\"/\")){\n                int temp = (int)operand.get(i);\n                operand.set(i,(operand.get(i-1)/operand.get(i)));\n                operand.set(i-1,temp);\n            }\n            if(op.get(i).equals(\"+\")){\n                int temp = (int)operand.get(i);\n                operand.set(i,(operand.get(i-1)+operand.get(i)));\n                operand.set(i-1,temp);\n            }\n            i++;\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int size = operand.size();\n        // In case the operator array list is empty\n        if (op.size() == 0) {\n            return operand.get(0);\n        }\n        // In case the operand array list only has one element\n        else if (size == 1) {\n            return operand.get(0);\n        }\n        else {\n            long result = operand.get(0);\n            long second = operand.get(1);\n            String operator = op.get(0);\n            for (int i = 1; i < size; i++) {\n                switch(operator) {\n                    case \"+\":\n                        result += second;\n                        break;\n                    case \"-\":\n                        result -= second;\n                        break;\n                    case \"*\":\n                        result *= second;\n                        break;\n                    case \"/\":\n                        result /= second;\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(result, second);\n                        break;\n                }\n                second = operand.get(i + 1);\n                operator = op.get(i);\n            }\n            return result;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        LinkedList<Long> oprd = new LinkedList<>();\n        for (int i = 0; i < operand.size(); i++) {\n            oprd.add(operand.get(i));\n        }\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    oprd.addLast(oprd.removeFirst() + oprd.removeFirst());\n                    break;\n                case \"-\":\n                    oprd.addLast(oprd.removeFirst() - oprd.removeFirst());\n                    break;\n                case \"*\":\n                    oprd.addLast(oprd.removeFirst() * oprd.removeFirst());\n                    break;\n                case \"/\":\n                    oprd.addLast(oprd.removeFirst() / oprd.removeFirst());\n                    break;\n                case \"**\":\n                    oprd.addLast(Math.pow(oprd.removeFirst(), oprd.removeFirst().intValue()));\n                    break;\n                default:\n                    break;\n            }\n        }\n        return oprd.getFirst();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = (long) operand.get(0);\n        for(int i = 0; i < op.size(); ++i){\n            switch(op.get(i)){\n                case \"+\":\n                    result = (long) (result + operand.get(i + 1));\n                    break;\n                case \"-\":\n                    result = (long) (result - operand.get(i + 1));\n                    break;\n                case \"*\":\n                    result = (long) (result * operand.get(i + 1));\n                    break;\n                case \"/\":\n                    result = (long) (result / operand.get(i + 1));\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, (long) operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < operand.size() - 1; i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                result = (long) result / operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        for(int i = 0; i < op.size(); i++){\n            if(i == 0){\n                operand.set(1, (long)(operand.get(0) + operand.get(1)));\n                operand.remove(0);\n            }\n            if(op.get(i).equals(\"-\")){\n                operand.set(1, (long)(operand.get(1) - operand.get(0)));\n                operand.remove(0);\n            }\n            if(op.get(i).equals(\"*\")){\n                operand.set(1, (long)(operand.get(1) * operand.get(0)));\n                operand.remove(0);\n            }\n            if(op.get(i).equals(\"//\")){\n                operand.set(1, (long)(operand.get(1) / operand.get(0)));\n                operand.remove(0);\n            }\n            if(op.get(i).equals(\"**\")){\n                operand.set(1, (long)(Math.pow(operand.get(1), operand.get(0))));\n                operand.remove(0);\n            }\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long num = 0;\n        if(op.size() == 0){\n            num = operand.get(0);\n        } else{\n            for(int i = 0; i < op.size(); i++){\n                if(op.get(i).equals(\"+\")){\n                    num = operand.get(i) + operand.get(i + 1);\n                    i += 2;\n                } else if(op.get(i).equals(\"-\")){\n                    num = operand.get(i) - operand.get(i + 1);\n                    i += 2;\n                } else if(op.get(i).equals(\"*\")){\n                    num = operand.get(i) * operand.get(i + 1);\n                    i += 2;\n                } else if(op.get(i).equals(\"//\")){\n                    num = operand.get(i) / operand.get(i + 1);\n                    i += 2;\n                } else if(op.get(i).equals(\"**\")){\n                    num = (long) Math.pow(operand.get(i), operand.get(i + 1));\n                    i += 2;\n                }\n            }\n        }\n        return num;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here.", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        long result = operand.get(0);\n        while (i < op.size()) {\n            if (op.get(i) == \"+\") result += operand.get(i + 1);\n            else if (op.get(i) == \"-\") result -= operand.get(i + 1);\n            else if (op.get(i) == \"*\") result *= operand.get(i + 1);\n            else if (op.get(i) == \"//\") result /= operand.get(i + 1);\n            else if (op.get(i) == \"**\") result = (long)Math.pow(result, operand.get(i + 1));\n            i++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Iterator<String> opIt = op.iterator();\n        Iterator<Long> opdIt = operand.iterator();\n        long result = 0;\n        while (opdIt.hasNext()) {\n            result = opdIt.next();\n        }\n        while (opdIt.hasNext()) {\n            long tmp = opdIt.next();\n            switch (opIt.next()) {\n                case \"+\":\n                    result += tmp;\n                    break;\n                case \"-\":\n                    result -= tmp;\n                    break;\n                case \"*\":\n                    result *= tmp;\n                    break;\n                case \"//\":\n                    result = result / tmp;\n                    break;\n                case \"**\":\n                    result = Math.pow(result, tmp);\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        ArrayList<Long> ops = new ArrayList<Long>();\n        ArrayList<Long> ops2 = new ArrayList<Long>();\n        while (i < op.size()) {\n            if (op.get(i).equals(\"+\")) {\n                ops.add(operand.get(i));\n                i++;\n            } else {\n                ops.add(operand.get(i));\n                ops.add(operand.get(i+1));\n                i = i+2;\n            }\n        }\n        if (ops.size() == 1) {\n            return ops.get(0);\n        } else if (ops.size() == 2) {\n            return ops.get(0) + ops.get(1);\n        } else {\n            i = 0;\n            while (i < ops.size()-1) {\n                ops2.add(ops.get(i));\n                ops2.add(ops.get(i+1));\n                i = i+2;\n            }\n            ops2.add(ops.get(ops.size()-1));\n            return doAlgebra(op, ops2);\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\": result += operand.get(i + 1); break;\n                case \"-\": result -= operand.get(i + 1); break;\n                case \"*\": result *= operand.get(i + 1); break;\n                case \"//\": result /= operand.get(i + 1); break;\n                case \"**\": result = Math.pow(result, operand.get(i + 1)); break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            if (op.get(i - 1).equals(\"+\"))\n                result += operand.get(i);\n            else if (op.get(i - 1).equals(\"-\"))\n                result -= operand.get(i);\n            else if (op.get(i - 1).equals(\"*\"))\n                result *= operand.get(i);\n            else if (op.get(i - 1).equals(\"//\"))\n                result /= operand.get(i);\n            else if (op.get(i - 1).equals(\"**\"))\n                result = (long) Math.pow(result, operand.get(i));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long)Math.pow(result, operand.get(i + 1));\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 1;\n        long result = operand.get(0);\n        while(i < operand.size()) {\n            switch (op.get(i-1)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"//\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (long)Math.pow(result, operand.get(i));\n                    break;\n            }\n            i++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int size = op.size();\n        if(size == 0 || size > operand.size()) {\n            return 0L;\n        }\n        if(size == 1) {\n            return operand.get(0) + operand.get(1);\n        }\n        if(size == 2) {\n            return operand.get(0) + (operand.get(1) * operand.get(2));\n        }\n        if(size == 3) {\n            return operand.get(0) + (operand.get(1) * operand.get(2)) - operand.get(3);\n        }\n        if(size == 4) {\n            return operand.get(0) + (operand.get(1) * operand.get(2)) - (operand.get(3) * operand.get(4));\n        }\n        return 0L;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int index = 0;\n        long result = operand.get(index++);\n        while(index < operand.size()) {\n            switch(op.get(index-1)) {\n                case \"+\":\n                    result += operand.get(index++);\n                    break;\n                case \"-\":\n                    result -= operand.get(index++);\n                    break;\n                case \"*\":\n                    result *= operand.get(index++);\n                    break;\n                case \"//\":\n                    result /= operand.get(index++);\n                    break;\n                case \"**\":\n                    result = (long)Math.pow(result, operand.get(index++));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"/\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long)Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int num1, num2;\n        num1 = operand.remove(0).intValue();\n        while(!operand.isEmpty()) {\n            num2 = operand.remove(0).intValue();\n            switch (op.remove(0)) {\n                case \"+\":\n                    num1 = num1 + num2;\n                    break;\n                case \"-\":\n                    num1 = num1 - num2;\n                    break;\n                case \"*\":\n                    num1 = num1 * num2;\n                    break;\n                case \"/\":\n                    num1 = num1 / num2;\n                    break;\n                case \"**\":\n                    num1 = (long)Math.pow(num1, num2);\n                    break;\n            }\n        }\n        return num1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int num1 = 0, num2 = 0;\n        long ans = operand.get(num1++);\n        while (num1 < operand.size()) {\n            ans = switch (op.get(num2++)) {\n                case \"+\":\n                    ans += operand.get(num1++);\n                    break;\n                case \"-\":\n                    ans -= operand.get(num1++);\n                    break;\n                case \"*\":\n                    ans *= operand.get(num1++);\n                    break;\n                case \"//\":\n                    ans /= operand.get(num1++);\n                    break;\n                case \"**\":\n                    ans = (long) Math.pow(ans, operand.get(num1++));\n                    break;\n            };\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int length = operand.size();\n        long result = operand.get(0);\n        for(int i = 0; i < length - 1; i++) {\n            if(op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if(op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if(op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if(op.get(i).equals(\"//\")) {\n                result /= operand.get(i + 1);\n            } else {\n                result = (long)Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int opsize = op.size();\n        int oprsize = operand.size();\n        int left_value = (int)operand.get(0);\n        int operator;\n        String left = operand.get(0).toString();\n        String right = operand.get(0).toString();\n        String operation;\n        int result = 0;\n        for(int i = 1; i < opsize + 1; i++) {\n            int k = i - 1;\n            int j = i;\n            operator = op.indexOf(op.get(i));\n            left_value = (int)operand.get(k);\n            if(i < oprsize) {\n                operation = op.get(i);\n                right = operand.get(j).toString();\n                result = calculate(operation, left_value, right);\n                left = result.toString();\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int len = op.size();\n        int i = 0;\n        while (i < len) {\n            switch (op.get(i)) {\n                case \"+\":\n                    operand.set(i, operand.get(i) + operand.get(i+1));\n                    operand.remove(i+1);\n                    op.remove(i);\n                    len--;\n                    break;\n                case \"-\":\n                    operand.set(i, operand.get(i) - operand.get(i+1));\n                    operand.remove(i+1);\n                    op.remove(i);\n                    len--;\n                    break;\n                case \"*\":\n                    operand.set(i, operand.get(i) * operand.get(i+1));\n                    operand.remove(i+1);\n                    op.remove(i);\n                    len--;\n                    break;\n                case \"/\":\n                    operand.set(i, operand.get(i) / operand.get(i+1));\n                    operand.remove(i+1);\n                    op.remove(i);\n                    len--;\n                    break;\n                case \"**\":\n                    operand.set(i, Math.pow(operand.get(i), operand.get(i+1)));\n                    operand.remove(i+1);\n                    op.remove(i);\n                    len--;\n                    break;\n            }\n            i++;\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            switch (op.get(i - 1)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"//\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = Math.pow(result, operand.get(i).intValue());\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        if (operand.size() == 1) {\n            return operand.get(0);\n        }\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < operand.size() - 1; i++) {\n            output.add(evaluate(operand.get(i), operand.get(i + 1), op.get(i)));\n        }\n        return doAlgebra(new ArrayList<>(Arrays.asList(\"+\")), output);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        String[] operators = new String[op.size()];\n        int i = 0;\n        for (i = 0; i < op.size(); i++) {\n            operators[i] = op.get(i);\n        }\n        result.add(operand.get(0));\n        for (int j = 1; j < operand.size(); j++) {\n            if (operators[j-1].equals(\"+\")) {\n                result.add(result.get(result.size() - 1) + operand.get(j));\n            } else if (operators[j-1].equals(\"-\")) {\n                result.add(result.get(result.size() - 1) - operand.get(j));\n            } else if (operators[j-1].equals(\"*\")) {\n                result.add(result.get(result.size() - 1) * operand.get(j));\n            } else if (operators[j-1].equals(\"//\")) {\n                result.add(result.get(result.size() - 1) / operand.get(j));\n            } else {\n                result.add(result.get(result.size() - 1) % operand.get(j));\n            }\n        }\n        long finalResult = 1;\n        for (i = 0; i < result.size(); i++) {\n            finalResult = finalResult * result.get(i);\n        }\n        return finalResult;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            if (op.get(i - 1).equals(\"+\")) {\n                result += operand.get(i);\n            }\n            else if (op.get(i - 1).equals(\"-\")) {\n                result -= operand.get(i);\n            }\n            else if (op.get(i - 1).equals(\"*\")) {\n                result *= operand.get(i);\n            }\n            else if (op.get(i - 1).equals(\"//\")) {\n                result = (long) Math.floor((double) result / (double) operand.get(i));\n            }\n            else if (op.get(i - 1).equals(\"**\")) {\n                result = (long) Math.pow((double) result, (double) operand.get(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        long result = operand.get(0);\n        for(int i = 0; i < op.size(); i++) {\n            if(op.get(i).equals(\"+\")) {\n                result = result + operand.get(i + 1);\n            } else if(op.get(i).equals(\"-\")) {\n                result = result - operand.get(i + 1);\n            } else if(op.get(i).equals(\"*\")) {\n                result = result * operand.get(i + 1);\n            } else if(op.get(i).equals(\"//\")) {\n                result = result / operand.get(i + 1);\n            } else if(op.get(i).equals(\"**\")) {\n                result = (long)Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int index = 0;\n        long temp1;\n        long temp2;\n        while (index < op.size()){\n            switch (op.get(index)){\n                case \"+\":\n                    temp1 = operand.get(index);\n                    temp2 = operand.get(index+1);\n                    operand.set(index, temp1 + temp2);\n                    break;\n                case \"-\":\n                    temp1 = operand.get(index);\n                    temp2 = operand.get(index+1);\n                    operand.set(index, temp1 - temp2);\n                    break;\n                case \"*\":\n                    temp1 = operand.get(index);\n                    temp2 = operand.get(index+1);\n                    operand.set(index, temp1 * temp2);\n                    break;\n                case \"/\":\n                    temp1 = operand.get(index);\n                    temp2 = operand.get(index+1);\n                    operand.set(index, temp1 / temp2);\n                    break;\n                case \"**\":\n                    temp1 = operand.get(index);\n                    temp2 = operand.get(index+1);\n                    operand.set(index, (long) Math.pow(temp1, temp2));\n                    break;\n            }\n            operand.remove(index+1);\n            op.remove(index);\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        String first = op.get(0);\n        long firstNum = operand.get(0);\n        for (int i = 1; i < op.size(); i++) {\n            String op2 = op.get(i);\n            long num2 = operand.get(i);\n            long num1 = operand.get(i - 1);\n            if (first == \"+\") {\n                firstNum += num2;\n            } else if (first == \"-\") {\n                firstNum -= num2;\n            } else if (first == \"*\") {\n                firstNum *= num2;\n            } else if (first == \"/\") {\n                firstNum = (long) (firstNum / num2);\n            } else if (first == \"**\") {\n                firstNum = (long) (Math.pow(firstNum, num2));\n            }\n            first = op2;\n        }\n        return firstNum;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<Long> out = new ArrayList<>();\n        for (int i = 0; i < operand.size() - 1; i++) {\n            switch(op.get(i)) {\n                case \"+\": out.add(operand.get(i) + operand.get(i + 1)); break;\n                case \"-\": out.add(operand.get(i) - operand.get(i + 1)); break;\n                case \"*\": out.add(operand.get(i) * operand.get(i + 1)); break;\n                case \"/\": out.add(operand.get(i) / operand.get(i + 1)); break;\n                case \"**\": out.add(operand.get(i) ** operand.get(i + 1)); break;\n            }\n        }\n        return out.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if(op.isEmpty())\n            return operand.get(0);\n        long result = operand.get(0);\n        for(int i = 0; i < op.size(); i++){\n            switch (op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"/\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        long r1 = (Long) operand.get(0);\n        for (int i = 0; i < operand.size() - 1; i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    r1 += operand.get(i+1);\n                    break;\n                case \"-\":\n                    r1 -= operand.get(i+1);\n                    break;\n                case \"*\":\n                    r1 *= operand.get(i+1);\n                    break;\n                case \"//\":\n                    r1 = (long) Math.floor((double) r1 / (double) operand.get(i+1));\n                    break;\n                case \"**\":\n                    r1 = (long) Math.pow((double) r1, (double) operand.get(i+1));\n                    break;\n                default:\n                    break;\n            }\n        }\n        return r1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long a = operand.remove(0);\n        for (int i = 0; i < operand.size(); ++i) {\n            if (op.get(i).equals(\"+\")) {\n                a += operand.get(i);\n            } else if (op.get(i).equals(\"-\")) {\n                a -= operand.get(i);\n            } else if (op.get(i).equals(\"*\")) {\n                a *= operand.get(i);\n            } else if (op.get(i).equals(\"//\")) {\n                a /= operand.get(i);\n            } else if (op.get(i).equals(\"**\")) {\n                a = (long)Math.pow(a, operand.get(i));\n            }\n        }\n        return a;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    operand.set(i, operand.get(i) + operand.get(i + 1));\n                    op.set(i, null);\n                    operand.remove(i + 1);\n                    break;\n                case \"-\":\n                    operand.set(i, operand.get(i) - operand.get(i + 1));\n                    op.set(i, null);\n                    operand.remove(i + 1);\n                    break;\n                case \"*\":\n                    operand.set(i, operand.get(i) * operand.get(i + 1));\n                    op.set(i, null);\n                    operand.remove(i + 1);\n                    break;\n                case \"/\":\n                    operand.set(i, operand.get(i) / operand.get(i + 1));\n                    op.set(i, null);\n                    operand.remove(i + 1);\n                    break;\n                case \"**\":\n                    operand.set(i, Math.pow(operand.get(i), operand.get(i + 1)));\n                    op.set(i, null);\n                    operand.remove(i + 1);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for(int i = 1; i < operand.size(); i++) {\n            if(op.get(i-1).equals(\"+\")) {\n                result += operand.get(i);\n            }\n            if(op.get(i-1).equals(\"-\")) {\n                result -= operand.get(i);\n            }\n            if(op.get(i-1).equals(\"*\")) {\n                result *= operand.get(i);\n            }\n            if(op.get(i-1).equals(\"//\")) {\n                result = result / operand.get(i);\n            }\n            if(op.get(i-1).equals(\"**\")) {\n                result = (long)Math.pow(result, operand.get(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int index = 0;\n        int count = 0;\n        double answer = 0;\n        double sum = 0;\n        while(i < op.size()){\n            if(count == 0){\n                if(op.get(i).equals(\"+\") || op.get(i).equals(\"-\") || op.get(i).equals(\"*\") || op.get(i).equals(\"/\") || op.get(i).equals(\"//\") || op.get(i).equals(\"**\")){\n                    if(op.get(i).equals(\"+\")){\n                        sum += operand.get(j);\n                        j++;\n                    }\n                    else if(op.get(i).equals(\"*\")){\n                        sum = sum * operand.get(j);\n                        j++;\n                    }\n                    else if(op.get(i).equals(\"-\")){\n                        sum -= operand.get(j);\n                        j++;\n                    }\n                    else if(op.get(i).equals(\"/\")){\n                        sum /= operand.get(j);\n                        j++;\n                    }\n                    else if(op.get(i).equals(\"//\")){\n                        sum = (long)sum / operand.get(j);\n                        j++;\n                    }\n                    else if(op.get(i).equals(\"**\")){\n                        sum = Math.pow(sum, operand.get(j));\n                        j++;\n                    }\n                }\n                count++;\n                i++;\n            }\n            else{\n                if(op.get(i).equals(\"+\") || op.get(i).equals(\"-\") || op.get(i).equals(\"*\") || op.get(i).equals(\"/\") || op.get(i).equals(\"//\") || op.get(i).equals(\"**\")){\n                    if(op.get(i).equals(\"+\")){\n                        sum += operand.get(j);\n                        j++;\n                    }\n                    else if(op.get(i).equals(\"*\")){\n                        sum = sum * operand.get(j);\n                        j++;\n                    }\n                    else if(op.get(i).equals(\"-\")){\n                        sum -= operand.get(j);\n                        j++;\n                    }\n                    else if(op.get(i).equals(\"/\")){\n                        sum /= operand.get(j);\n                        j++;\n                    }\n                    else if(op.get(i).equals(\"//\")){\n                        sum = (long)sum / operand.get(j);\n                        j++;\n                    }\n                    else if(op.get(i).equals(\"**\")){\n                        sum = Math.pow(sum, operand", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        long result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            result = operate(result, op.get(i - 1), operand.get(i));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        while(i < operand.size() - 1)\n        {\n            if(op.get(i).equals(\"+\"))\n            {\n                operand.set(i, operand.get(i) + operand.get(i+1));\n                op.remove(i);\n                operand.remove(i+1);\n                i--;\n            }\n            else if(op.get(i).equals(\"-\"))\n            {\n                operand.set(i, operand.get(i) - operand.get(i+1));\n                op.remove(i);\n                operand.remove(i+1);\n                i--;\n            }\n            else if(op.get(i).equals(\"*\"))\n            {\n                operand.set(i, operand.get(i) * operand.get(i+1));\n                op.remove(i);\n                operand.remove(i+1);\n                i--;\n            }\n            else if(op.get(i).equals(\"//\"))\n            {\n                operand.set(i, operand.get(i)/operand.get(i+1));\n                op.remove(i);\n                operand.remove(i+1);\n                i--;\n            }\n            else if(op.get(i).equals(\"**\"))\n            {\n                operand.set(i, (long)Math.pow(operand.get(i), operand.get(i+1)));\n                op.remove(i);\n                operand.remove(i+1);\n                i--;\n            }\n            i++;\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            switch (op.get(i - 1)) {\n            case \"+\":\n                result += operand.get(i);\n                break;\n            case \"-\":\n                result -= operand.get(i);\n                break;\n            case \"*\":\n                result *= operand.get(i);\n                break;\n            case \"//\":\n                result = result / operand.get(i);\n                break;\n            case \"**\":\n                result = (long) Math.pow(result, operand.get(i));\n                break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < operand.size() - 1; i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long)Math.pow(result, operand.get(i + 1));\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        ArrayList<String> operators = op;\n        ArrayList<Integer> operands = (ArrayList<Integer>) operand.stream().map(s -> s.intValue()).collect(Collectors.toList());\n        int size = operators.size();\n        int i = 0;\n        int num1 = operands.get(i);\n        i++;\n        int num2 = operands.get(i);\n        while (i < size) {\n            int index = i;\n            char operator = operators.get(index).charAt(0);\n            i++;\n            num2 = (operator == '+') ? num1 + num2 : (operator == '-') ? num1 - num2 : (operator == '*') ? num1 * num2 : (operator == '/') ? num1 / num2 : (operator == '^') ? (long) Math.pow(num1, num2) : 0;\n            num1 = operands.get(i);\n            i++;\n        }\n        return num2;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        Stack<Long> st = new Stack<>();\n        for(int i = 0; i < operand.size(); i++){\n            st.push(operand.get(i));\n        }\n        for(int i = 0; i < op.size(); i++){\n            switch(op.get(i)){\n                case \"+\":\n                    st.push(st.pop() + st.pop());\n                    break;\n                case \"-\":\n                    st.push(-st.pop() + st.pop());\n                    break;\n                case \"*\":\n                    st.push(st.pop() * st.pop());\n                    break;\n                case \"/\":\n                    st.push(st.pop() / st.pop());\n                    break;\n                case \"**\":\n                    st.push(Math.pow(st.pop(),st.pop()));\n                    break;\n            }\n        }\n        return st.pop();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result = Math.floorDiv(result, operand.get(i + 1));\n                    break;\n                case \"**\":\n                    result = Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if (operand.size() == 1) return operand.get(0);\n        long result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            switch (op.get(i - 1)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Stack<Long> st = new Stack<>();\n        for (int i = 0; i < op.size(); i++) {\n            st.push(operand.get(i));\n            if (i + 1 < op.size()) {\n                if (op.get(i + 1).equals(\"+\")) {\n                    operand.set(i + 1, st.pop() + st.pop());\n                } else if (op.get(i + 1).equals(\"-\")) {\n                    Long t = st.pop();\n                    st.pop();\n                    operand.set(i + 1, st.pop() - t);\n                } else if (op.get(i + 1).equals(\"*\")) {\n                    operand.set(i + 1, st.pop() * st.pop());\n                } else if (op.get(i + 1).equals(\"//\")) {\n                    Long t = st.pop();\n                    st.pop();\n                    operand.set(i + 1, st.pop() / t);\n                } else if (op.get(i + 1).equals(\"**\")) {\n                    Long t = st.pop();\n                    st.pop();\n                    operand.set(i + 1, st.pop() % t);\n                }\n            }\n        }\n        return operand.get(op.size());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            }\n            if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            }\n            if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            }\n            if (op.get(i).equals(\"//\")) {\n                result /= operand.get(i + 1);\n            }\n            if (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        for (int i = 0; i < operand.size() - 1; i++) {\n            long a = operand.get(i);\n            long b = operand.get(i + 1);\n            switch (op.get(i)) {\n                case \"+\": operand.set(i + 1, a + b); break;\n                case \"-\": operand.set(i + 1, a - b); break;\n                case \"*\": operand.set(i + 1, a * b); break;\n                case \"//\": operand.set(i + 1, a / b); break;\n                case \"**\": operand.set(i + 1, (long) Math.pow(a, b)); break;\n            }\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 1; i < op.size() + 1; i++) {\n            long right = operand.get(i);\n            long left = operand.get(i - 1);\n            String ope = op.get(i - 1);\n            switch (ope) {\n            case \"+\":\n                result += right;\n                break;\n            case \"-\":\n                result -= right;\n                break;\n            case \"*\":\n                result *= right;\n                break;\n            case \"/\":\n                result /= right;\n                break;\n            case \"**\":\n                result = (long) Math.pow(left, right);\n                break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // WRITE YOUR CODE HERE\n        LinkedList<Long> l=new LinkedList<Long>();\n        for(long e:operand){\n            l.add(e);\n        }\n        while(l.size()>1){\n            long l1=l.remove();\n            long l2=l.remove();\n            long res=0;\n            if(op.get(0).equals(\"+\"))\n                res=l1+l2;\n            if(op.get(0).equals(\"*\"))\n                res=l1*l2;\n            if(op.get(0).equals(\"-\"))\n                res=l1-l2;\n            if(op.get(0).equals(\"//\"))\n                res=l1/l2;\n            if(op.get(0).equals(\"**\"))\n                res=Math.pow(l1,l2);\n            l.add(res);\n            op.remove(0);\n        }\n        return l.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Long result = operand.get(0);\n        for (int i = 0; i < op.size(); ++i) {\n            if (op.get(i).equals(\"+\")) result += operand.get(i + 1);\n            else if (op.get(i).equals(\"-\")) result -= operand.get(i + 1);\n            else if (op.get(i).equals(\"*\")) result *= operand.get(i + 1);\n            else if (op.get(i).equals(\"//\")) result /= operand.get(i + 1);\n            else if (op.get(i).equals(\"**\")) result = (long) Math.pow(result, operand.get(i + 1));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"/\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        // convert operand into a linkedlist to use pollFirst\n        LinkedList<Long> operandLinkedList = new LinkedList<>();\n        operandLinkedList.addAll(operand);\n        // use a stack to store operators\n        Stack<String> operatorStack = new Stack<>();\n        // create a result variable\n        long result = 0;\n        // loop through the operator arraylist\n        for (int i = 0; i < op.size(); i++) {\n            // if the operator is **, push the operator to the stack\n            if (op.get(i).equals(\"**\")) {\n                operatorStack.push(\"**\");\n            }\n            // if the operator is ** and the stack is not empty, pop the operator from the stack \n            // and evaluate the expression\n            else if (op.get(i).equals(\"**\") && !operatorStack.isEmpty()) {\n                String operator = operatorStack.pop();\n                // if the stack is not empty, pop the operand from the linkedlist\n                if (!operandLinkedList.isEmpty()) {\n                    Long operand1 = operandLinkedList.pollFirst();\n                    Long operand2 = operandLinkedList.pollFirst();\n                    // evaluate the expression and store the result in the result variable\n                    if (operator.equals(\"+\")) {\n                        result = operand1 + operand2;\n                    } else if (operator.equals(\"-\")) {\n                        result = operand1 - operand2;\n                    } else if (operator.equals(\"*\")) {\n                        result = operand1 * operand2;\n                    } else if (operator.equals(\"//\")) {\n                        result = operand1 / operand2;\n                    } else if (operator.equals(\"**\")) {\n                        result = (long) Math.pow(operand1, operand2);\n                    }\n                    // push the result to the operand linkedlist\n                    operandLinkedList.addFirst(result);\n                }\n            }\n            // if the operator is not **, push the operator to the stack\n            else {\n                operatorStack.push(op.get(i));\n            }\n        }\n        // if the stack is not empty, pop the operator from the stack \n        // and evaluate the expression\n        while (!operatorStack.isEmpty()) {\n            String operator = operatorStack.pop();\n            if (!operandLinkedList.isEmpty()) {\n                Long operand1 = operandLinkedList.pollFirst();\n                Long operand2 = operandLinkedList.pollFirst();\n                if (operator.equals(\"+\")) {\n                    result = operand1 + operand2;\n                } else if (operator.equals(\"-\")) {\n                    result = operand1 - operand2;\n                } else if (operator.equals(\"*\")) {\n                    result = operand1 * operand2;\n                } else if (operator.equals(\"//\")) {", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for(int i = 0; i < op.size(); i++){\n            switch(op.get(i)) {\n                case(\"+\"): result += operand.get(i + 1); break;\n                case(\"-\"): result -= operand.get(i + 1); break;\n                case(\"*\"): result *= operand.get(i + 1); break;\n                case(\"//\"): result /= operand.get(i + 1); break;\n                case(\"**\"): result = (long)Math.pow(result, operand.get(i + 1)); break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        while (i < op.size()) {\n            if (op.get(i).equals(\"+\")) {\n                operand.set(i, operand.get(i) + operand.get(i + 1));\n                operand.remove(i + 1);\n                op.remove(i);\n            } else if (op.get(i).equals(\"-\")) {\n                operand.set(i, operand.get(i) - operand.get(i + 1));\n                operand.remove(i + 1);\n                op.remove(i);\n            } else if (op.get(i).equals(\"*\")) {\n                operand.set(i, operand.get(i) * operand.get(i + 1));\n                operand.remove(i + 1);\n                op.remove(i);\n            } else if (op.get(i).equals(\"//\")) {\n                operand.set(i, operand.get(i) / operand.get(i + 1));\n                operand.remove(i + 1);\n                op.remove(i);\n            } else if (op.get(i).equals(\"**\")) {\n                operand.set(i, (long) Math.pow(operand.get(i), operand.get(i + 1)));\n                operand.remove(i + 1);\n                op.remove(i);\n            }\n            i++;\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        long temp = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            if (op.get(i-1).equals(\"+\")) {\n                temp += operand.get(i);\n            }\n            else if (op.get(i-1).equals(\"-\")) {\n                temp -= operand.get(i);\n            }\n            else if (op.get(i-1).equals(\"*\")) {\n                temp *= operand.get(i);\n            }\n            else if (op.get(i-1).equals(\"//\")) {\n                temp /= operand.get(i);\n            }\n            else if (op.get(i-1).equals(\"**\")) {\n                temp = (long) Math.pow(temp, operand.get(i));\n            }\n        }\n        return temp;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        if (op.size()==0) return operand.get(0);\n        else {\n            int index = 0;\n            Long firstNum = operand.get(index);\n            index++;\n            String operator = op.get(index);\n            index++;\n            Long secondNum = operand.get(index);\n            while (index < op.size()) {\n                Long currentNum = operand.get(index + 1);\n                switch (operator) {\n                    case \"+\":\n                        secondNum += currentNum;\n                        break;\n                    case \"-\":\n                        secondNum -= currentNum;\n                        break;\n                    case \"*\":\n                        secondNum *= currentNum;\n                        break;\n                    case \"/\":\n                        secondNum = secondNum / currentNum;\n                        break;\n                    case \"**\":\n                        secondNum = (long) Math.pow(secondNum, currentNum);\n                        break;\n                }\n                index += 2;\n                if (index < op.size()) {\n                    operator = op.get(index);\n                    index++;\n                }\n            }\n            return firstNum + secondNum;\n        }", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if (operand.size() == 0) return 0;\n        if (op.size() == 0) return operand.get(0);\n        ArrayList<Long> newOperand = new ArrayList<Long>();\n        newOperand.add(operand.get(0));\n        int i = 1;\n        while (i < operand.size()) {\n            switch (op.get(i - 1)) {\n                case \"+\":\n                    newOperand.add(newOperand.get(newOperand.size() - 1) + operand.get(i));\n                    break;\n                case \"-\":\n                    newOperand.add(newOperand.get(newOperand.size() - 1) - operand.get(i));\n                    break;\n                case \"*\":\n                    newOperand.add(newOperand.get(newOperand.size() - 1) * operand.get(i));\n                    break;\n                case \"/\":\n                    newOperand.add(newOperand.get(newOperand.size() - 1) / operand.get(i));\n                    break;\n                case \"**\":\n                    newOperand.add(newOperand.get(newOperand.size() - 1) + operand.get(i));\n                    break;\n            }\n            i += 1;\n        }\n        return newOperand.get(newOperand.size() - 1);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        String opr = \"(\";\n        int i = 0;\n        while (i < op.size()) {\n            opr += operand.get(i) + op.get(i);\n            i++;\n        }\n        opr += operand.get(i);\n        return eval(opr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if (operand.size() == 1) {\n            return operand.get(0);\n        }\n        long sum = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            if (i % 2 == 0) {\n                sum += operand.get(i);\n            } else {\n                switch (op.get(i - 1)) {\n                    case \"+\":\n                        sum += operand.get(i);\n                        break;\n                    case \"-\":\n                        sum -= operand.get(i);\n                        break;\n                    case \"*\":\n                        sum *= operand.get(i);\n                        break;\n                    case \"/\":\n                        sum /= operand.get(i);\n                        break;\n                    case \"**\":\n                        sum = (long) Math.pow(sum, operand.get(i));\n                        break;\n                }\n            }\n        }\n        return sum;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long r = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                r = r + operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                r = r - operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                r = r * operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                r = r / operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n                r = (long) Math.pow(r, operand.get(i + 1));\n            }\n        }\n        return r;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here.\n        long result = operand.get(0);\n        for(int i = 0; i < op.size(); i++) {\n            if(op.get(i).equals(\"+\")) result += operand.get(i + 1);\n            else if(op.get(i).equals(\"-\")) result -= operand.get(i + 1);\n            else if(op.get(i).equals(\"*\")) result *= operand.get(i + 1);\n            else if(op.get(i).equals(\"//\")) result = (long) Math.floorDiv(result, operand.get(i + 1));\n            else if(op.get(i).equals(\"**\")) result = (long) Math.pow(result, operand.get(i + 1));\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        int i=0;\n        long result=operand.get(i);\n        while(i<op.size()){\n            switch(op.get(i)){\n                case \"+\":\n                    result+=operand.get(++i);\n                    break;\n                case \"-\":\n                    result-=operand.get(++i);\n                    break;\n                case \"*\":\n                    result*=operand.get(++i);\n                    break;\n                case \"/\":\n                    result/=operand.get(++i);\n                    break;\n                case \"**\":\n                    result=Math.pow(result,operand.get(++i));\n                    break;\n            }\n            i++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here.\n        int index = 0;\n        int size = operand.size();\n        while (index < size - 1) {\n            if (op.get(index).equals(\"+\")) {\n                operand.set(index, operand.get(index) + operand.get(index + 1));\n            } else if (op.get(index).equals(\"-\")) {\n                operand.set(index, operand.get(index) - operand.get(index + 1));\n            } else if (op.get(index).equals(\"*\")) {\n                operand.set(index, operand.get(index) * operand.get(index + 1));\n            } else if (op.get(index).equals(\"//\")) {\n                operand.set(index, operand.get(index) / operand.get(index + 1));\n            } else if (op.get(index).equals(\"**\")) {\n                operand.set(index, (long) Math.pow(operand.get(index).doubleValue(), operand.get(index + 1).doubleValue()));\n            }\n            operand.remove(index + 1);\n            op.remove(index);\n            index++;\n            size--;\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Stack<Long> nums = new Stack<Long>();\n        int opIndex = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (opIndex < op.size() && opIndex == i) {\n                int a = (int) nums.pop();\n                int b = (int) nums.pop();\n                switch (op.get(opIndex)) {\n                    case \"+\":\n                        nums.push(b + a);\n                        break;\n                    case \"-\":\n                        nums.push(b - a);\n                        break;\n                    case \"*\":\n                        nums.push(b * a);\n                        break;\n                    case \"/\":\n                        nums.push(b / a);\n                        break;\n                    case \"**\":\n                        nums.push(b ** a);\n                        break;\n                }\n                opIndex++;\n            } else {\n                nums.push(operand.get(i));\n            }\n        }\n        return nums.pop();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        String ops = op.get(i);\n        long result = operand.get(i);\n        for(i = 1; i < op.size(); i++) {\n            switch(op.get(i)) {\n            case \"+\":\n                result += operand.get(i);\n                break;\n            case \"-\":\n                result -= operand.get(i);\n                break;\n            case \"*\":\n                result *= operand.get(i);\n                break;\n            case \"/\":\n                result /= operand.get(i);\n                break;\n            case \"**\":\n                result = (long) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n                case \"+\":\n                    result += operand.get(i+1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i+1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i+1);\n                    break;\n                case \"/\":\n                    result /= operand.get(i+1);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i+1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        // get the size of the operand array list\n        int size = operand.size();\n        // create a new array list\n        ArrayList<Long> arr = new ArrayList<>();\n        // iterate over the operand array list\n        for (int i = 0; i < size; i++) {\n            // get the next operand\n            long num = operand.get(i);\n            // if there is no element in the array list\n            if (arr.size() == 0) {\n                // add the operand to the array list\n                arr.add(num);\n            // else if there is one element in the array list\n            } else if (arr.size() == 1) {\n                // get the element in the array list\n                long num1 = arr.get(0);\n                // get the operator\n                String op_str = op.get(i-1);\n                // declare the variable to store the result\n                long result = 0;\n                // if the operator is '+'\n                if (op_str.equals(\"+\")) {\n                    // add the operand to the result\n                    result = num + num1;\n                // else if the operator is '-'\n                } else if (op_str.equals(\"-\")) {\n                    // subtract the operand from the result\n                    result = num1 - num;\n                // else if the operator is '*'\n                } else if (op_str.equals(\"*\")) {\n                    // multiply the operand with the result\n                    result = num * num1;\n                // else if the operator is '//'\n                } else if (op_str.equals(\"//\")) {\n                    // divide the result with the operand\n                    result = num1 / num;\n                // else if the operator is '**'\n                } else if (op_str.equals(\"**\")) {\n                    // power the operand with the result\n                    result = (long) Math.pow(num1, num);\n                }\n                // add the result to the array list\n                arr.add(result);\n            // else if there are at least two elements in the array list\n            } else if (arr.size() >= 2) {\n                // get the last two elements\n                long num1 = arr.get(arr.size()-1);\n                long num2 = arr.get(arr.size()-2);\n                // get the operator\n                String op_str = op.get(i-1);\n                // declare the variable to store the result\n                long result = 0;\n                // if the operator is '+'\n                if (op_str.equals(\"+\")) {\n                    // add the operand to the result\n                    result = num + num2;\n                // else if the operator is '-'\n                } else if (op_str.equals(\"-\")) {\n                    // subtract the operand from the result\n                    result = num2 - num;\n                // else if the operator is '*'\n", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int j = 0;\n        String operator = op.get(j);\n        for (long i : operand) {\n            if (operator.equals(\"+\")) {\n                operand.set(j, operand.get(j) + i);\n            } else if (operator.equals(\"-\")) {\n                operand.set(j, operand.get(j) - i);\n            } else if (operator.equals(\"*\")) {\n                operand.set(j, operand.get(j) * i);\n            } else if (operator.equals(\"//\")) {\n                operand.set(j, operand.get(j) / i);\n            } else if (operator.equals(\"**\")) {\n                operand.set(j, (long)Math.pow(operand.get(j), i));\n            }\n            j++;\n            if (j == op.size()) {\n                j = 0;\n            }\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        int sum = 0;\n        int left = 0;\n        int right = 0;\n        int operator = 0;\n        int count = 0;\n        long total = 0;\n        int result = 0;\n        while(i < op.size()){\n            left = operand.get(count);\n            right = operand.get(count + 1);\n            operator = i;\n            count += 2;\n            switch(op.get(i)){\n                case \"+\":\n                    sum = left + right;\n                    break;\n                case \"-\":\n                    sum = left - right;\n                    break;\n                case \"*\":\n                    sum = left * right;\n                    break;\n                case \"//\":\n                    sum = (int) left / (int) right;\n                    break;\n                case \"**\":\n                    sum = (int) left ** right;\n                    break;\n            }\n            total += sum;\n            i++;\n        }\n        result = total;\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for(int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                result = result + operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result = result - operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                result = result * operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                result = result / operand.get(i + 1);\n            } else {\n                result = (long) Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        String previousOperator = \"\";\n        for(int i = 0; i < op.size(); i++) {\n            if(op.get(i).equals(\"+\") || op.get(i).equals(\"-\")) {\n                if(previousOperator.equals(\"*\")) result =  (long) (result * operand.get(i + 1));\n                if(previousOperator.equals(\"//\")) result =  (long) (result / operand.get(i + 1));\n                if(previousOperator.equals(\"**\")) result =  (long) (Math.pow(result, operand.get(i + 1)));\n            } else {\n                if(op.get(i).equals(\"*\")) {\n                    result =  (long) (result * operand.get(i + 1));\n                    previousOperator = \"**\";\n                } else if(op.get(i).equals(\"//\")) {\n                    result =  (long) (result / operand.get(i + 1));\n                    previousOperator = \"//\";\n                } else if(op.get(i).equals(\"**\")) {\n                    result =  (long) (Math.pow(result, operand.get(i + 1)));\n                    previousOperator = \"**\";\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        while(i < op.size()){\n            if(op.get(i).equals(\"+\")){\n                operand.set(i, operand.get(i) + operand.get(i+1));\n                operand.remove(i+1);\n                op.remove(i);\n            }\n            else if(op.get(i).equals(\"-\")){\n                operand.set(i, operand.get(i) - operand.get(i+1));\n                operand.remove(i+1);\n                op.remove(i);\n            }\n            else if(op.get(i).equals(\"*\")){\n                operand.set(i, operand.get(i) * operand.get(i+1));\n                operand.remove(i+1);\n                op.remove(i);\n            }\n            else if(op.get(i).equals(\"//\")){\n                operand.set(i, operand.get(i) / operand.get(i+1));\n                operand.remove(i+1);\n                op.remove(i);\n            }\n            else if(op.get(i).equals(\"**\")){\n                operand.set(i, operand.get(i) * (operand.get(i+1) * (operand.get(i+2))));\n                operand.remove(i+1);\n                operand.remove(i+1);\n                op.remove(i);\n            }\n            else{\n                i++;\n            }\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Iterator<String> it1 = op.iterator();\n        Iterator<Long> it2 = operand.iterator();\n        long result = it2.next();\n        while(it1.hasNext() && it2.hasNext()) {\n            String next = it1.next();\n            long nextOperand = it2.next();\n            if(next.equals(\"+\")) {\n                result += nextOperand;\n            } else if(next.equals(\"-\")) {\n                result -= nextOperand;\n            } else if(next.equals(\"*\")) {\n                result *= nextOperand;\n            } else if(next.equals(\"//\")) {\n                result /= nextOperand;\n            } else if(next.equals(\"**\")) {\n                result = (long) Math.pow(result, nextOperand);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long num1 = operand.get(0);\n        long num2 = operand.get(1);\n        int i = 1;\n        while (i < op.size()) {\n            if (op.get(i).equals(\"+\")) {\n                num1 += num2;\n            }\n            else if (op.get(i).equals(\"-\")) {\n                num1 -= num2;\n            }\n            else if (op.get(i).equals(\"*\")) {\n                num1 *= num2;\n            }\n            else if (op.get(i).equals(\"//\")) {\n                num1 /= num2;\n            }\n            else if (op.get(i).equals(\"**\")) {\n                num1 = (long) Math.pow(num1, num2);\n            }\n            i++;\n            num2 = operand.get(i);\n        }\n        return num1;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int o = 0;\n        if (op.get(0).equals(\"+\")) {\n            o = 0;\n        }\n        if (op.get(0).equals(\"-\")) {\n            o = 1;\n        }\n        if (op.get(0).equals(\"*\")) {\n            o = 2;\n        }\n        if (op.get(0).equals(\"//\")) {\n            o = 3;\n        }\n        if (op.get(0).equals(\"**\")) {\n            o = 4;\n        }\n        long result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            if (o == 0) {\n                result += operand.get(i);\n            }\n            if (o == 1) {\n                result -= operand.get(i);\n            }\n            if (o == 2) {\n                result *= operand.get(i);\n            }\n            if (o == 3) {\n                result = result / operand.get(i);\n            }\n            if (o == 4) {\n                result = (long) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        String operators[] = op.toArray(new String[0]);\n        long ops[] = operand.stream().mapToLong(Long::longValue).toArray();\n        int i = 0;\n        int j = 0;\n        if (operand.size() == 1) {\n            return ops[0];\n        } else if (operand.size() == 2) {\n            if (operators[0].equals(\"+\")) {\n                return ops[0] + ops[1];\n            } else if (operators[0].equals(\"-\")) {\n                return ops[0] - ops[1];\n            } else if (operators[0].equals(\"*\")) {\n                return ops[0] * ops[1];\n            } else if (operators[0].equals(\"//\")) {\n                return ops[0] / ops[1];\n            } else if (operators[0].equals(\"**\")) {\n                return (long) Math.pow(ops[0], ops[1]);\n            }\n        } else {\n            while (i < operators.length - 1) {\n                if (operators[i].equals(\"+\")) {\n                    ops[j] += ops[j + 1];\n                } else if (operators[i].equals(\"-\")) {\n                    ops[j] -= ops[j + 1];\n                } else if (operators[i].equals(\"*\")) {\n                    ops[j] *= ops[j + 1];\n                } else if (operators[i].equals(\"//\")) {\n                    ops[j] /= ops[j + 1];\n                } else if (operators[i].equals(\"**\")) {\n                    ops[j] = (long) Math.pow(ops[j], ops[j + 1]);\n                }\n                i++;\n                j++;\n            }\n            return ops[0];\n        }\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        var left = operand.get(0);\n        for(int i = 0; i < operand.size() - 1; i++) {\n            switch(op.get(i)) {\n                case \"+\":\n                    left += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    left -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    left *= operand.get(i + 1);\n                    break;\n                case \"/\":\n                    left /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    left = Math.pow(left, operand.get(i + 1));\n                    break;\n                default:\n                    return 0L;\n            }\n        }\n        return left;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        return operand.get(0) + operand.get(1) - operand.get(2) * operand.get(3);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < operand.size() - 1; i++) {\n            switch (op.get(i)) {\n            case \"+\":\n                result += operand.get(i + 1);\n                break;\n            case \"-\":\n                result -= operand.get(i + 1);\n                break;\n            case \"*\":\n                result *= operand.get(i + 1);\n                break;\n            case \"//\":\n                result = (long) Math.floor((double) result / (double) operand.get(i + 1));\n                break;\n            case \"**\":\n                result = (long) Math.pow(result, operand.get(i + 1));\n                break;\n            default:\n                break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long ans = operand.get(0);\n        for(int i = 0; i < op.size(); i++) {\n            if(op.get(i).equals(\"+\")) {\n                ans += operand.get(i + 1);\n            }\n            else if(op.get(i).equals(\"-\")) {\n                ans -= operand.get(i + 1);\n            }\n            else if(op.get(i).equals(\"*\")) {\n                ans *= operand.get(i + 1);\n            }\n            else if(op.get(i).equals(\"//\")) {\n                ans /= operand.get(i + 1);\n            }\n            else {\n                ans = (long)Math.pow(ans, operand.get(i + 1));\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long[] ops = operand.stream().mapToLong(i -> i).toArray();\n        int l = ops.length - 1;\n        for(int i = 0; i < l; i++) {\n            switch(op.get(i)) {\n                case \"+\":\n                    ops[i+1] += ops[i];\n                    break;\n                case \"-\":\n                    ops[i+1] -= ops[i];\n                    break;\n                case \"*\":\n                    ops[i+1] *= ops[i];\n                    break;\n                case \"/\":\n                    ops[i+1] /= ops[i];\n                    break;\n                case \"**\":\n                    ops[i+1] = (long) Math.pow(ops[i], ops[i+1]);\n                    break;\n            }\n        }\n        return ops[l];", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int n = operand.size();\n        long[] ops = new long[n - 1];\n        for (int i = 0; i < ops.length; i++) {\n            ops[i] = op.get(i).equals(\"+\") ? operand.get(i) + operand.get(i + 1) :\n                op.get(i).equals(\"-\") ? operand.get(i) - operand.get(i + 1) :\n                op.get(i).equals(\"*\") ? operand.get(i) * operand.get(i + 1) :\n                op.get(i).equals(\"//\") ? operand.get(i) / operand.get(i + 1) :\n                (long)(Math.pow(operand.get(i), operand.get(i + 1)));\n        }\n        for (long i = n - 2; i >= 0; i--) {\n            ops[i] = op.get(i).equals(\"+\") ? ops[i] + ops[i + 1] :\n                op.get(i).equals(\"-\") ? ops[i] - ops[i + 1] :\n                op.get(i).equals(\"*\") ? ops[i] * ops[i + 1] :\n                op.get(i).equals(\"//\") ? ops[i] / ops[i + 1] :\n                (long)(Math.pow(ops[i], ops[i + 1]));\n        }\n        return ops[0];", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        String ans = operand.get(0) + \"\";\n        for(int i = 1; i < operand.size(); i++) {\n            if(op.get(i - 1).equals(\"+\")) {\n                ans += \" + \" + operand.get(i);\n            }\n            else if(op.get(i - 1).equals(\"-\")) {\n                ans += \" - \" + operand.get(i);\n            }\n            else if(op.get(i - 1).equals(\"*\")) {\n                ans += \" * \" + operand.get(i);\n            }\n            else if(op.get(i - 1).equals(\"//\")) {\n                ans += \" // \" + operand.get(i);\n            }\n            else {\n                ans += \" ** \" + operand.get(i);\n            }\n        }\n        //System.out.println(ans);\n        return (long) new ScriptEngineManager().getEngineByName(\"python\").eval(ans);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        Stack<Long> nums = new Stack<Long>();\n        Stack<String> ops = new Stack<String>();\n        int i = 0;\n        while (i < op.size()) {\n            if (op.get(i) != \"+\" && op.get(i) != \"-\" && op.get(i) != \"*\" && op.get(i) != \"/\" && op.get(i) != \"%\" && op.get(i) != \"**\") {\n                ops.push(op.get(i));\n            } else if (op.get(i) == \"+\" || op.get(i) == \"-\" || op.get(i) == \"*\" || op.get(i) == \"/\" || op.get(i) == \"%\" || op.get(i) == \"**\") {\n                String op1 = ops.pop();\n                String op2 = ops.pop();\n                String op3 = op.get(i);\n                long res = 0;\n                if (op1 == \"+\" && op2 == \"+\" && op3 == \"+\") {\n                    res = nums.pop() + nums.pop() + nums.pop();\n                } else if (op1 == \"+\" && op2 == \"+\" && op3 == \"-\") {\n                    res = nums.pop() + nums.pop() - nums.pop();\n                } else if (op1 == \"+\" && op2 == \"+\" && op3 == \"*\") {\n                    res = nums.pop() + nums.pop() * nums.pop();\n                } else if (op1 == \"+\" && op2 == \"+\" && op3 == \"/\") {\n                    res = nums.pop() + nums.pop() / nums.pop();\n                } else if (op1 == \"+\" && op2 == \"+\" && op3 == \"%\") {\n                    res = nums.pop() + nums.pop() % nums.pop();\n                } else if (op1 == \"+\" && op2 == \"+\" && op3 == \"**\") {\n                    res = nums.pop() + nums.pop() ** nums.pop();\n                } else if (op1 == \"+\" && op2 == \"-\" && op3 == \"+\") {\n                    res = nums.pop() + nums.pop() - nums.pop();\n                } else if (op1 == \"+\" && op2 == \"-\" && op3 == \"-\") {\n                    res = nums.pop() + nums.pop() - nums.pop();\n                } else if (op1 == \"+\" && op2 == \"-\" && op3 == \"*\") {\n                    res = nums.pop() + nums.pop() * nums.pop();\n                } else if (op1 == \"+\" && op2 == \"-\" && op3 == \"/\") {\n                    res = nums.pop() + nums.pop() / nums.", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        Stack<Long> num = new Stack<Long>();\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            num.add(operand.get(i));\n            if (op.get(i) != null) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result = num.pop() + num.pop();\n                        num.add(result);\n                        break;\n                    case \"-\":\n                        result = num.pop() - num.pop();\n                        num.add(result);\n                        break;\n                    case \"*\":\n                        result = num.pop() * num.pop();\n                        num.add(result);\n                        break;\n                    case \"/\":\n                        result = num.pop() / num.pop();\n                        num.add(result);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(num.pop().doubleValue(), num.pop().doubleValue());\n                        num.add(result);\n                        break;\n                }\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long res = (long)operand.get(0);\n        for(int i=0; i<op.size(); i++){\n            if(op.get(i).equals(\"+\")){\n                res+=operand.get(i+1);\n            }\n            else if(op.get(i).equals(\"-\")){\n                res-=operand.get(i+1);\n            }\n            else if(op.get(i).equals(\"*\")){\n                res*=operand.get(i+1);\n            }\n            else if(op.get(i).equals(\"//\")){\n                res/=operand.get(i+1);\n            }\n            else{\n                res=Math.pow(res, operand.get(i+1).intValue());\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Add your code here.\n        // I. For each operator in the operator array list, we must evaluate the expression based on the operator.\n        // II. The first operand is the first operator in the operator array list, and the second operand is the second \n        // operator in the operator array list, and the third operand is the third operator in the operator array list.\n        // III. The final expression is the first operator in the operator array list, followed by the first operand, followed\n        // by the second operand, followed by the operator in the second operator in the operator array list, followed by the \n        // third operator in the operator array list, followed by the fourth operand in the operand array list, followed by the \n        // third operand in the operand array list, followed by the second operand in the operand array list.\n        // IV. We must use the Math.pow method to compute the exponentiation of the operands.\n        // V. We must use the Math.floorDiv method to compute the floor division of the operands.\n        // VI. We must use the Math.floorDiv method to compute the floor division of the operands.\n        // VII. We must use the Math.abs method to compute the absolute value of the operands.\n        // VIII. We must use the Math.sqrt method to compute the square root of the operands.\n        // IX. The final result is the result of the final expression.\n        int opSize = op.size();\n        int operandSize = operand.size();\n        long result = 0;\n        for (int i = 0; i < opSize; i++) {\n            if (i == 0) {\n                result = operand.get(i);\n                continue;\n            }\n            if (\"+\".equals(op.get(i))) {\n                result += operand.get(i);\n            } else if (\"-\".equals(op.get(i))) {\n                result -= operand.get(i);\n            } else if (\"*\".equals(op.get(i))) {\n                result *= operand.get(i);\n            } else if (\"//\".equals(op.get(i))) {\n                result /= operand.get(i);\n            } else if (\"**\".equals(op.get(i))) {\n                result = (long)Math.pow(result, operand.get(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int count = 0;\n        int i = 0;\n        long result = 0;\n        while (i < operand.size() - 1) {\n            result = 0;\n            count++;\n            if (op.get(i) == \"+\")\n                result = operand.get(i) + operand.get(i + 1);\n            else if (op.get(i) == \"-\")\n                result = operand.get(i) - operand.get(i + 1);\n            else if (op.get(i) == \"*\")\n                result = operand.get(i) * operand.get(i + 1);\n            else if (op.get(i) == \"/\")\n                result = operand.get(i) / operand.get(i + 1);\n            else if (op.get(i) == \"**\")\n                result = (long) Math.pow(operand.get(i), operand.get(i + 1));\n            operand.set(i, result);\n            operand.remove(i + 1);\n            i++;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        long x = operand.get(i);\n        for (i = 1; i < operand.size(); i++) {\n            int j = i;\n            String opStr = op.get(i - 1);\n            long y = operand.get(j);\n            switch (opStr) {\n                case \"+\":\n                    x += y;\n                    break;\n                case \"-\":\n                    x -= y;\n                    break;\n                case \"*\":\n                    x *= y;\n                    break;\n                case \"/\":\n                    x /= y;\n                    break;\n                case \"**\":\n                    x = (long) Math.pow(x, y);\n                    break;\n            }\n        }\n        return x;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = (long) operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0, j = 0;\n        while (i < operand.size() - 1) {\n            switch (op.get(j++)) {\n                case \"+\":\n                    operand.set(i, operand.get(i) + operand.get(++i));\n                    break;\n                case \"-\":\n                    operand.set(i, operand.get(i) - operand.get(++i));\n                    break;\n                case \"*\":\n                    operand.set(i, operand.get(i) * operand.get(++i));\n                    break;\n                case \"//\":\n                    operand.set(i, operand.get(i) / operand.get(++i));\n                    break;\n                case \"**\":\n                    operand.set(i, Math.pow(operand.get(i), operand.get(++i)));\n                    break;\n            }\n        }\n        return operand.get(0);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int i = 0;\n        int n = operand.size();\n        Stack<Long> st = new Stack<>();\n        for (int j = 0; j < n; j++) {\n            st.push(operand.get(j));\n            if (j < n - 1) {\n                if (op.get(i++).equals(\"*\")) {\n                    Long x = st.pop(), y = st.pop();\n                    st.push(x * y);\n                } else if (op.get(i++).equals(\"/\")) {\n                    Long x = st.pop(), y = st.pop();\n                    st.push(y / x);\n                } else if (op.get(i++).equals(\"+\")) {\n                    Long x = st.pop(), y = st.pop();\n                    st.push(x + y);\n                } else if (op.get(i++).equals(\"-\")) {\n                    Long x = st.pop(), y = st.pop();\n                    st.push(y - x);\n                }\n            }\n        }\n        return st.pop();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long)Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result = result / operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        Stack<Long> st = new Stack<>();\n        for(int i = 0; i < op.size(); i++){\n            if(op.get(i).equals(\"+\")){\n                st.push(st.pop() + st.pop());\n            }else if(op.get(i).equals(\"-\")){\n                st.push(st.pop() - st.pop());\n            }else if(op.get(i).equals(\"*\")){\n                st.push(st.pop() * st.pop());\n            }else{\n                st.push(st.pop() / st.pop());\n            }\n        }\n        return st.pop();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        LinkedList<Long> nums = new LinkedList<>();\n        for (int i = 0; i < operand.size(); i++)\n            nums.add(operand.get(i));\n        int i = 0;\n        while (nums.size() > 1) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\"))\n                    nums.addLast(nums.removeFirst() + nums.removeLast());\n                else if (op.get(j).equals(\"-\"))\n                    nums.addLast(nums.removeFirst() - nums.removeLast());\n                else if (op.get(j).equals(\"*\"))\n                    nums.addLast(nums.removeFirst() * nums.removeLast());\n                else if (op.get(j).equals(\"//\"))\n                    nums.addLast(nums.removeFirst() / nums.removeLast());\n                else if (op.get(j).equals(\"**\"))\n                    nums.addLast(Math.pow(nums.removeFirst(), nums.removeLast().intValue()));\n            }\n        }\n        return nums.getFirst();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        String ops = op.get(0);\n        long operands = operand.get(0);\n        for(int i = 0; i < operand.size(); i++) {\n            ops = ops + operand.get(i);\n        }\n        return new ScriptEngineManager().getEngineByName(\"JavaScript\").eval(ops);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        int index = 0;\n        String operator = op.get(index);\n        long result = operand.get(index);\n        for(int i = 1; i < operand.size(); i++) {\n            int operatorIndex = i - 1;\n            String newOperator = op.get(operatorIndex);\n            if (newOperator.equals(\"+\")) {\n                result += operand.get(i);\n            } else if (newOperator.equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (newOperator.equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (newOperator.equals(\"//\")) {\n                result /= operand.get(i);\n            } else if (newOperator.equals(\"**\")) {\n                result = (long)Math.pow(result, operand.get(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if (op.size() == 1)\n            return operand.get(0);\n        else if (op.size() == 2)\n            return op.get(0).equals(\"+\") ? operand.get(0) + operand.get(1) : operand.get(0) - operand.get(1);\n        else if (op.size() == 3)\n            return op.get(0).equals(\"+\") ? operand.get(0) + operand.get(1) * operand.get(2) : operand.get(0) - operand.get(1) * operand.get(2);\n        else if (op.size() == 4)\n            return op.get(0).equals(\"+\") ? operand.get(0) + operand.get(1) * operand.get(2) / operand.get(3) : operand.get(0) - operand.get(1) * operand.get(2) / operand.get(3);\n        else\n            return op.get(0).equals(\"+\") ? operand.get(0) + operand.get(1) * operand.get(2) / operand.get(3) ** operand.get(4) : operand.get(0) - operand.get(1) * operand.get(2) / operand.get(3) ** operand.get(4);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        // Write your code here\n        int opLen = op.size();\n        Stack<Long> stack = new Stack<>();\n        for(int i = 0; i < opLen + 1; i++){\n            if(i == opLen){\n                long res = stack.pop();\n                while(!stack.isEmpty()){\n                    long r = stack.pop();\n                    long l = stack.pop();\n                    String opc = stack.pop();\n                    switch (opc){\n                        case \"+\":\n                            res = l + r;\n                            break;\n                        case \"-\":\n                            res = l - r;\n                            break;\n                        case \"*\":\n                            res = l * r;\n                            break;\n                        case \"/\":\n                            res = (long) Math.floor((double) l / (double) r);\n                            break;\n                        case \"^\":\n                            res = (long) Math.pow((double) l, (double) r);\n                            break;\n                    }\n                }\n                return res;\n            }\n            if(i % 2 == 0){\n                stack.add(operand.get(i));\n            } else {\n                stack.add(op.get(i));\n            }\n        }\n        return 0;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            if (op.get(i - 1).equals(\"+\")) {\n                result += operand.get(i);\n            }\n            else if (op.get(i - 1).equals(\"-\")) {\n                result -= operand.get(i);\n            }\n            else if (op.get(i - 1).equals(\"*\")) {\n                result *= operand.get(i);\n            }\n            else if (op.get(i - 1).equals(\"//\")) {\n                result /= operand.get(i);\n            }\n            else if (op.get(i - 1).equals(\"**\")) {\n                result = (long)Math.pow(result, operand.get(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < op.size(); i++) {\n            if (i == 0)\n                result = operand.get(i);\n            switch (op.get(i)) {\n            case \"+\":\n                result += operand.get(i + 1);\n                break;\n            case \"-\":\n                result -= operand.get(i + 1);\n                break;\n            case \"*\":\n                result *= operand.get(i + 1);\n                break;\n            case \"//\":\n                result /= operand.get(i + 1);\n                break;\n            case \"**\":\n                result = (long) Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;"], ["import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String ret = \"\";\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c))\n                ret += Character.toLowerCase(c);\n            else\n                ret += Character.toUpperCase(c);\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(Character.toLowerCase(c));\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(\n            i -> Character.isLowerCase(i) ? (char)(i - 32) : Character.toLowerCase(i)).collect(StringBuilder::new,\n            StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> (char) (c < 0x5F ? c + 0x20 : c - 0x20)).map(String::valueOf).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder builder = new StringBuilder();\n        char[] characters = string.toCharArray();\n        for (int i = 0; i < characters.length; i++) {\n            if (Character.isUpperCase(characters[i])) {\n                builder.append(Character.toLowerCase(characters[i]));\n            }\n            else {\n                builder.append(Character.toUpperCase(characters[i]));\n            }\n        }\n        return builder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < string.length(); i++) {\n            buf.append(Character.isUpperCase(string.charAt(i)) ? Character.toLowerCase(string.charAt(i)) : Character.toUpperCase(string.charAt(i)));\n        }\n        return buf.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String output = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                output += Character.toLowerCase(c);\n            }\n            if (Character.isLowerCase(c)) {\n                output += Character.toUpperCase(c);\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder builder = new StringBuilder();\n        for(char c: string.toCharArray()) {\n            builder.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n        }\n        return builder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.codePoints().map(ch -> Character.isUpperCase(ch) ? Character.toLowerCase(ch) : Character.toUpperCase(ch)).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder output = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            output.append(Character.isLowerCase(string.charAt(i)) ? Character.toUpperCase(string.charAt(i)) : Character.toLowerCase(string.charAt(i)));\n        }\n        return output.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i]))\n                chars[i] = Character.toUpperCase(chars[i]);\n            else if (Character.isUpperCase(chars[i]))\n                chars[i] = Character.toLowerCase(chars[i]);\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String[] strs = new String[string.length()];\n        for (int i = 0; i < string.length(); i++) {\n            char tmp = string.charAt(i);\n            if (Character.isLowerCase(tmp)) {\n                strs[i] = Character.toString(Character.toUpperCase(tmp));\n            } else if (Character.isUpperCase(tmp)) {\n                strs[i] = Character.toString(Character.toLowerCase(tmp));\n            } else {\n                strs[i] = Character.toString(tmp);\n            }\n        }\n        return String.join(\"\", strs);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] c = string.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            c[i] = (Character.isLowerCase(c[i])) ? Character.toUpperCase(c[i]) : Character.toLowerCase(c[i]);\n        }\n        return new String(c);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            } else if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(string.charAt(i));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String upperCase = string.toUpperCase();\n        String lowerCase = string.toLowerCase();\n        String flipped = \"\";\n        for(int i = 0; i < string.length(); i++) {\n            if(upperCase.charAt(i) == string.charAt(i)) {\n                flipped += string.charAt(i);\n            }\n            else {\n                flipped += upperCase.charAt(i);\n            }\n        }\n        return flipped;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> (char) ((c + 32) % 123)).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        // BEGIN\n        String ans = \"\";\n        for(int i = 0; i < string.length(); i++) {\n            if(string.charAt(i) >= 'A' && string.charAt(i) <= 'Z')\n                ans += (char)(string.charAt(i) + 32);\n            else if(string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n                ans += (char)(string.charAt(i) - 32);\n            else\n                ans += string.charAt(i);\n        }\n        return ans;\n        // END", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\n            res.append(Character.isLowerCase(string.charAt(i)) ? Character.toUpperCase(string.charAt(i)) : Character.toLowerCase(string.charAt(i)));\n        return res.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuffer result = new StringBuffer();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] cArray = string.toCharArray();\n        for (int i = 0; i < cArray.length; i++) {\n            if (Character.isLowerCase(cArray[i])) {\n                cArray[i] = Character.toUpperCase(cArray[i]);\n            } else if (Character.isUpperCase(cArray[i])) {\n                cArray[i] = Character.toLowerCase(cArray[i]);\n            }\n        }\n        return String.valueOf(cArray);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (char ch : chars) {\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n            }\n            sb.append(ch);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] arr = string.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            char c = arr[i];\n            if (Character.isLowerCase(c)) {\n                arr[i] = Character.toUpperCase(c);\n            }\n            else if (Character.isUpperCase(c)) {\n                arr[i] = Character.toLowerCase(c);\n            }\n        }\n        return new String(arr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.toLowerCase().replaceAll(\"[a-z]\", String::valueOf).toUpperCase().replaceAll(\"[A-Z]\", String::valueOf);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String ret = \"\";\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                ret += String.valueOf(Character.toLowerCase(c));\n            } else {\n                ret += String.valueOf(Character.toUpperCase(c));\n            }\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                builder.append(Character.toLowerCase(c));\n            } else {\n                builder.append(Character.toUpperCase(c));\n            }\n        }\n        return builder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String temp = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                temp += Character.toUpperCase(c);\n            } else {\n                temp += Character.toLowerCase(c);\n            }\n        }\n        return temp;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder(string);\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                sb.setCharAt(i, Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                sb.setCharAt(i, Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i]))\n                chars[i] = Character.toUpperCase(chars[i]);\n            else if (Character.isUpperCase(chars[i]))\n                chars[i] = Character.toLowerCase(chars[i]);\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String ans = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                ans += Character.toLowerCase(string.charAt(i));\n            } else {\n                ans += Character.toUpperCase(string.charAt(i));\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.codePoints().map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))\n                .collect(StringBuilder::new, (s, c) -> s.appendCodePoint(c), StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        string = string.toLowerCase();\n        int length = string.length();\n        char[] chars = string.toCharArray();\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] -= 32;\n            }\n            else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] += 32;\n            }\n        }\n        builder.append(chars);\n        return builder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(\n            c -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)\n        ).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] stringArray = string.toCharArray();\n        StringBuilder stringBuilder = new StringBuilder();\n        for(int i = 0; i < stringArray.length; i++) {\n            char c = stringArray[i];\n            if (Character.isLowerCase(c)) {\n                stringBuilder.append(Character.toUpperCase(c));\n            } else {\n                stringBuilder.append(Character.toLowerCase(c));\n            }\n        }\n        return stringBuilder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i] += 32;\n            } else if (Character.isLowerCase(chars[i])) {\n                chars[i] -= 32;\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder output = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            output.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n        }\n        return output.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        // write your code here\n        char[] c = string.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            if (Character.isLowerCase(c[i])) {\n                c[i] = Character.toUpperCase(c[i]);\n            } else if (Character.isUpperCase(c[i])) {\n                c[i] = Character.toLowerCase(c[i]);\n            }\n        }\n        return String.valueOf(c);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> c >= 65 && c <= 90 ? (char) (c + 32) : (c >= 97 && c <= 122 ? (char) (c - 32) : Character.toString((char) c))).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if ('a' <= chars[i] && chars[i] <= 'z') {\n                chars[i] += 'A' - 'a';\n            } else if ('A' <= chars[i] && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i]))\n                chars[i] = Character.toUpperCase(chars[i]);\n            else if (Character.isUpperCase(chars[i]))\n                chars[i] = Character.toLowerCase(chars[i]);\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(i -> (char) (i <= 'Z' ? i - 32 : i + 32)).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> {\n            char ch = (char) c;\n            return Character.isUpperCase(ch) ? Character.toLowerCase(ch) : Character.toUpperCase(ch);\n        }).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] arr = string.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (char c : arr) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] str = string.toCharArray();\n        char[] newStr = new char[str.length];\n        for (int i = 0; i < str.length; i++) {\n            newStr[i] = str[i];\n            if (Character.isUpperCase(str[i]))\n                newStr[i] = Character.toLowerCase(str[i]);\n            else if (Character.isLowerCase(str[i]))\n                newStr[i] = Character.toUpperCase(str[i]);\n        }\n        return new String(newStr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String newString = \"\";\n        for(int i = 0; i < string.length(); i++) {\n            char currentCharacter = string.charAt(i);\n            if(Character.isUpperCase(currentCharacter)) {\n                newString += Character.toLowerCase(currentCharacter);\n            } else {\n                newString += Character.toUpperCase(currentCharacter);\n            }\n        }\n        return newString;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> c <= 122 && c >= 97 ? (char) (c ^ 32) : (char) c).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return new StringBuilder().append(string.chars().mapToObj(i -> (char) (i >= 'A' && i <= 'Z' ? i + 32 : i - 32)).collect(Collectors.joining())).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        int size = string.length();\n        char[] temp = string.toCharArray();\n        for (int i = 0; i < size; i++) {\n            if (Character.isUpperCase(temp[i]))\n                temp[i] = Character.toLowerCase(temp[i]);\n            else\n                temp[i] = Character.toUpperCase(temp[i]);\n        }\n        return String.valueOf(temp);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder builder = new StringBuilder();\n        for(int i = 0; i < string.length(); i++) {\n            char current = string.charAt(i);\n            if(Character.isUpperCase(current)) {\n                builder.append(Character.toLowerCase(current));\n            } else {\n                builder.append(Character.toUpperCase(current));\n            }\n        }\n        return builder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(i -> (char)i).map(i -> Character.isUpperCase(i) ? Character.toLowerCase(i) : Character.toUpperCase(i)).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\n                result += Character.toUpperCase(c);\n            else\n                result += Character.toLowerCase(c);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) >= 97 && string.charAt(i) <= 122) {\n                result += Character.toUpperCase(string.charAt(i));\n            } else {\n                result += Character.toLowerCase(string.charAt(i));\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] str = string.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < str.length; i++) {\n            if(Character.isLowerCase(str[i])) {\n                sb.append(Character.toUpperCase(str[i]));\n            } else {\n                sb.append(Character.toLowerCase(str[i]));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] str = string.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < str.length; i++){\n            char ch = str[i];\n            if(Character.isLowerCase(ch))\n                sb.append(Character.toUpperCase(ch));\n            else if(Character.isUpperCase(ch))\n                sb.append(Character.toLowerCase(ch));\n            else\n                sb.append(ch);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] cArray = string.toCharArray();\n        for (int i = 0; i < cArray.length; i++) {\n            cArray[i] = Character.isUpperCase(cArray[i]) ? Character.toLowerCase(cArray[i]) : Character.toUpperCase(cArray[i]);\n        }\n        return String.valueOf(cArray);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder output = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char currentChar = string.charAt(i);\n            if (Character.isUpperCase(currentChar)) {\n                output.append(Character.toLowerCase(currentChar));\n            } else {\n                output.append(Character.toUpperCase(currentChar));\n            }\n        }\n        return output.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c)) {\n                result += Character.toUpperCase(c);\n            } else {\n                result += c;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(i -> {\n            if (Character.isLowerCase((char) i)) {\n                return Character.toUpperCase((char) i);\n            } else if (Character.isUpperCase((char) i)) {\n                return Character.toLowerCase((char) i);\n            } else {\n                return (char) i;\n            }\n        }).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return new String(string.chars().map(ch -> {\n            boolean lowerCase = ch >= 'a' && ch <= 'z';\n            return lowerCase ? (char) (ch - 32) : (char) (ch + 32);\n        }).toArray());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(x -> {\n            if (x >= 'a' && x <= 'z') {\n                return (char) (x - 32);\n            } else if (x >= 'A' && x <= 'Z') {\n                return (char) (x + 32);\n            } else {\n                return (char) x;\n            }\n        }).collect(StringBuilder::new, StringBuilder::append, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String output = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                output += Character.toLowerCase(string.charAt(i));\n            } else if (Character.isLowerCase(string.charAt(i))) {\n                output += Character.toUpperCase(string.charAt(i));\n            } else {\n                output += string.charAt(i);\n            }\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuffer result = new StringBuffer();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c))\n                result.append(Character.toLowerCase(c));\n            else if (Character.isLowerCase(c))\n                result.append(Character.toUpperCase(c));\n            else\n                result.append(c);\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for(int i = 0; i < string.length(); i++) {\n            char ch = string.charAt(i);\n            if(Character.isUpperCase(ch)) result += Character.toLowerCase(ch);\n            else result += Character.toUpperCase(ch);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        int len = string.length();\n        char[] charArr = string.toCharArray();\n        String res = \"\";\n        for(int i = 0; i < len; i++) {\n            char c = charArr[i];\n            if(Character.isUpperCase(c)) {\n                res += Character.toLowerCase(c);\n            }\n            else if(Character.isLowerCase(c)) {\n                res += Character.toUpperCase(c);\n            }\n            else {\n                res += c;\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String newString = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char currChar = string.charAt(i);\n            if (Character.isLowerCase(currChar)) {\n                newString += Character.toUpperCase(currChar);\n            } else {\n                newString += Character.toLowerCase(currChar);\n            }\n        }\n        return newString;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String newStr = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char ch = string.charAt(i);\n            if (ch >= 'a' && ch <= 'z') {\n                ch = (char) (ch - 32);\n            } else if (ch >= 'A' && ch <= 'Z') {\n                ch = (char) (ch + 32);\n            }\n            newStr += ch;\n        }\n        return newStr;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return new StringBuffer(string).chars().mapToObj(i -> (char) (('A' <= i && i <= 'Z') ? i - 'A' + 'a' : (i <= 'Z' && i >= 'a') ? i - 'a' + 'A' : i)).map(i -> (char) i).reduce(\"\", String::concat);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(ch -> Character.isUpperCase(ch) ? String.valueOf(Character.toLowerCase((char)ch)) : String.valueOf(Character.toUpperCase((char)ch))).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuffer stringBuffer = new StringBuffer();\n        for(int i = 0; i < string.length(); i++) {\n            if(Character.isUpperCase(string.charAt(i))) {\n                stringBuffer.append(Character.toLowerCase(string.charAt(i)));\n            } else {\n                stringBuffer.append(Character.toUpperCase(string.charAt(i)));\n            }\n        }\n        return stringBuffer.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String ret = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                ret += Character.toLowerCase(string.charAt(i));\n            } else if (Character.isLowerCase(string.charAt(i))) {\n                ret += Character.toUpperCase(string.charAt(i));\n            } else {\n                ret += string.charAt(i);\n            }\n        }\n        return ret;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        // Write your code here.\n        return string.chars().mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase((char) c) : Character.toUpperCase((char) c)).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> (char) (c < 97 ? c - 32 : c + 32)).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c);\n            }\n            else if (Character.isLowerCase(c)) {\n                result += Character.toUpperCase(c);\n            }\n            else {\n                result += c;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] string_char = string.toCharArray();\n        for (int i = 0; i < string_char.length; i++) {\n            char char_i = string_char[i];\n            if (Character.isUpperCase(char_i)) {\n                string_char[i] = Character.toLowerCase(char_i);\n            } else if (Character.isLowerCase(char_i)) {\n                string_char[i] = Character.toUpperCase(char_i);\n            }\n        }\n        return new String(string_char);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] arr = string.toCharArray();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else if (Character.isLowerCase(arr[i])) {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        return new String(arr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < string.length(); i++) {\n            char ch = string.charAt(i);\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n            }\n            buffer.append(ch);\n        }\n        return buffer.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        string = string.chars().map(c -> {\n            if (Character.isLowerCase(c)) {\n                return Character.toUpperCase(c);\n            } else if (Character.isUpperCase(c)) {\n                return Character.toLowerCase(c);\n            } else {\n                return (char) c;\n            }\n        }).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();\n        return string;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] array = string.toCharArray();\n        for (int i = 0; i < array.length; i++) {\n            if (Character.isUpperCase(array[i])) {\n                array[i] = Character.toLowerCase(array[i]);\n            } else if (Character.isLowerCase(array[i])) {\n                array[i] = Character.toUpperCase(array[i]);\n            }\n        }\n        return new String(array);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] result = string.toCharArray();\n        for (int i = 0; i < result.length; i++) {\n            if (Character.isUpperCase(result[i]))\n                result[i] = Character.toLowerCase(result[i]);\n            else if (Character.isLowerCase(result[i]))\n                result[i] = Character.toUpperCase(result[i]);\n        }\n        return String.valueOf(result);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            }\n            else if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return String.valueOf(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        string = string.toLowerCase();\n        return string.toUpperCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuffer newString = new StringBuffer();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                newString.append(Character.toUpperCase(string.charAt(i)));\n            } else if (Character.isUpperCase(string.charAt(i))) {\n                newString.append(Character.toLowerCase(string.charAt(i)));\n            } else {\n                newString.append(string.charAt(i));\n            }\n        }\n        return newString.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                c = (char) (c - ('a' - 'A'));\n            }\n            else if (Character.isUpperCase(c)) {\n                c = (char) (c - ('A' - 'a'));\n            }\n            result += c;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] c = string.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            if (Character.isUpperCase(c[i])) {\n                c[i] = Character.toLowerCase(c[i]);\n            } else if (Character.isLowerCase(c[i])) {\n                c[i] = Character.toUpperCase(c[i]);\n            }\n        }\n        return String.valueOf(c);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String newString = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                newString += Character.toUpperCase(string.charAt(i));\n            } else if (Character.isUpperCase(string.charAt(i))) {\n                newString += Character.toLowerCase(string.charAt(i));\n            } else {\n                newString += string.charAt(i);\n            }\n        }\n        return newString;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                buffer.append(Character.toLowerCase(string.charAt(i)));\n            }\n            else if (Character.isLowerCase(string.charAt(i))) {\n                buffer.append(Character.toUpperCase(string.charAt(i)));\n            }\n            else {\n                buffer.append(string.charAt(i));\n            }\n        }\n        return buffer.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        // Write your code here.\n        return new StringBuffer(string).reverse().toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> (char) ((c >= 'a' && c <= 'z') ? c - 'a' + 'A' : c >= 'A' && c <= 'Z' ? c - 'A' + 'a' : c)).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(i -> Character.isUpperCase(i) ? Character.toLowerCase(i) : Character.toUpperCase(i)).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String flipped = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                flipped += Character.toLowerCase(string.charAt(i));\n            } else if (Character.isLowerCase(string.charAt(i))) {\n                flipped += Character.toUpperCase(string.charAt(i));\n            } else {\n                flipped += string.charAt(i);\n            }\n        }\n        return flipped;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for(int i = 0; i < string.length(); i++){\n            if(Character.isUpperCase(string.charAt(i)))\n                result += (char)(string.charAt(i) + 32);\n            else if(Character.isLowerCase(string.charAt(i)))\n                result += (char)(string.charAt(i) - 32);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for(char i : string.toCharArray()){\n            if(Character.isUpperCase(i)){\n                result += Character.toLowerCase(i);\n            }\n            else{\n                result += Character.toUpperCase(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> c >= 97 && c <= 122 ? (char) (c - 32) : c >= 65 && c <= 90 ? (char) (c + 32) : (char) c).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\n                result += Character.toLowerCase(c);\n            else if (Character.isLowerCase(c))\n                result += Character.toUpperCase(c);\n            else\n                result += c;\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        string = string.replaceAll(\"([A-Z])\", \"[L$1]\").replaceAll(\"([a-z])\", \"[U$1]\").replaceAll(\"[UL]\", \"\").replaceAll(\"[lU]\", \"\");\n        string = string.replaceAll(\"([L])\", \"[$1]\").replaceAll(\"([U])\", \"[$1]\").replaceAll(\"\\\\[\", \"\");\n        return string;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> {\n            if (Character.isLowerCase(c)) {\n                return Character.toUpperCase(c);\n            }\n            else if (Character.isUpperCase(c)) {\n                return Character.toLowerCase(c);\n            }\n            else {\n                return (char) c;\n            }\n        }).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        string = string.toUpperCase();\n        string = string.toLowerCase();\n        return string;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder out = new StringBuilder();\n        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if(Character.isLowerCase(c))\n                c = Character.toUpperCase(c);\n            else if(Character.isUpperCase(c))\n                c = Character.toLowerCase(c);\n            out.append(c);\n        }\n        return out.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            } else if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> (char) (c ^ 32)).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String output = \"\";\n        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if(Character.isUpperCase(c))\n                output += Character.toLowerCase(c);\n            else if(Character.isLowerCase(c))\n                output += Character.toUpperCase(c);\n            else\n                output += c;\n        }\n        return output;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder output = new StringBuilder();\n        for(int i = 0; i < string.length(); i++) {\n            if(Character.isUpperCase(string.charAt(i))) {\n                output.append(Character.toLowerCase(string.charAt(i)));\n            } else if (Character.isLowerCase(string.charAt(i))) {\n                output.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                output.append(string.charAt(i));\n            }\n        }\n        return output.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder s = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                s.append(Character.toUpperCase(c));\n            } else {\n                s.append(Character.toLowerCase(c));\n            }\n        }\n        return s.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] temp = string.toCharArray();\n        int counter = 0;\n        for (char c : temp) {\n            if (Character.isUpperCase(c)) {\n                temp[counter] = Character.toLowerCase(c);\n            } else {\n                temp[counter] = Character.toUpperCase(c);\n            }\n            counter++;\n        }\n        String result = String.valueOf(temp);\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] array = string.toCharArray();\n        for(int i = 0; i < array.length; i++) {\n            if(Character.isUpperCase(array[i])) {\n                array[i] = Character.toLowerCase(array[i]);\n            } else if(Character.isLowerCase(array[i])) {\n                array[i] = Character.toUpperCase(array[i]);\n            }\n        }\n        return new String(array);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] str = string.toCharArray();\n        for (int i = 0; i < str.length; i++) {\n            if (Character.isUpperCase(str[i])) {\n                str[i] = Character.toLowerCase(str[i]);\n            } else {\n                str[i] = Character.toUpperCase(str[i]);\n            }\n        }\n        return String.valueOf(str);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder out = new StringBuilder(string);\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                out.setCharAt(i, Character.toLowerCase(string.charAt(i)));\n            }\n            if (Character.isLowerCase(string.charAt(i))) {\n                out.setCharAt(i, Character.toUpperCase(string.charAt(i)));\n            }\n        }\n        return out.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) result.append(Character.toUpperCase(c));\n            else result.append(Character.toLowerCase(c));\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return new StringBuilder(string.length())\n        .append(string.chars()\n        .mapToObj(c -> c >= 'A' && c <= 'Z' ? (char)(c | 0x20) : c >= 'a' && c <= 'z' ? (char)(c & ~0x20) : (char)c)\n        .mapToInt(c -> c)\n        .toArray())\n        .toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder res = new StringBuilder();\n        for(char ch : string.toCharArray()) {\n            if (Character.isUpperCase(ch)) {\n                res.append(Character.toLowerCase(ch));\n            } else {\n                res.append(Character.toUpperCase(ch));\n            }\n        }\n        return res.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String res = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                res += Character.toLowerCase(string.charAt(i));\n            } else {\n                res += Character.toUpperCase(string.charAt(i));\n            }\n        }\n        return res;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] arr = string.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isUpperCase(arr[i]))\n                arr[i] = Character.toLowerCase(arr[i]);\n            else\n                arr[i] = Character.toUpperCase(arr[i]);\n        }\n        return new String(arr);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            } else if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder ans = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                ans.append(Character.toLowerCase(c));\n            } else {\n                ans.append(Character.toUpperCase(c));\n            }\n        }\n        return ans.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        string = string.toLowerCase();\n        char[] stringChar = string.toCharArray();\n        for (int i = 0; i < stringChar.length; i++) {\n            char charAtI = stringChar[i];\n            if (Character.isUpperCase(charAtI)) {\n                stringChar[i] = Character.toLowerCase(charAtI);\n            } else if (Character.isLowerCase(charAtI)) {\n                stringChar[i] = Character.toUpperCase(charAtI);\n            }\n        }\n        return String.valueOf(stringChar);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String ans = \"\";\n        for(int i = 0; i < string.length(); i++){\n            if(Character.isLowerCase(string.charAt(i))){\n                ans += Character.toUpperCase(string.charAt(i));\n            }\n            else if(Character.isUpperCase(string.charAt(i))){\n                ans += Character.toLowerCase(string.charAt(i));\n            }\n            else{\n                ans += string.charAt(i);\n            }\n        }\n        return ans;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(i -> (char)(i <= 'Z' ? i + 32 : i - 32)).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i)))\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            else\n                sb.append(Character.toUpperCase(string.charAt(i)));\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().map(ch -> Character.isUpperCase(ch) ?\n                Character.toLowerCase(ch) : Character.toUpperCase(ch)).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] stringChar = string.toCharArray();\n        for (int i = 0; i < string.length(); i++) {\n            char curChar = stringChar[i];\n            if (Character.isUpperCase(curChar)) {\n                stringChar[i] = Character.toLowerCase(curChar);\n            } else if (Character.isLowerCase(curChar)) {\n                stringChar[i] = Character.toUpperCase(curChar);\n            }\n        }\n        return String.valueOf(stringChar);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] c = string.toCharArray();\n        int x = 0;\n        while(x < c.length) {\n            if(Character.isLowerCase(c[x])) {\n                c[x] = Character.toUpperCase(c[x]);\n            } else if(Character.isUpperCase(c[x])) {\n                c[x] = Character.toLowerCase(c[x]);\n            }\n            x++;\n        }\n        return String.valueOf(c);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for(int i=0; i < string.length(); i++) {\n            char character = string.charAt(i);\n            if(Character.isUpperCase(character)) {\n                result += Character.toLowerCase(character);\n            }\n            else if(Character.isLowerCase(character)) {\n                result += Character.toUpperCase(character);\n            }\n            else {\n                result += character;\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                builder.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                builder.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return builder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        // Write your code here\n        return string.chars().map(ch -> ch - (Character.isUpperCase(ch) ? 32 : 32)).mapToObj(ch -> Character.toString((char) ch)).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        string = string.toLowerCase();\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i]))\n                chars[i] = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i]) : Character.toUpperCase(chars[i]);\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        StringBuilder builder = new StringBuilder();\n        for (char c : chars) {\n            if (Character.isUpperCase(c)) {\n                builder.append(Character.toLowerCase(c));\n            } else {\n                builder.append(Character.toUpperCase(c));\n            }\n        }\n        return builder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String str = string.toLowerCase();\n        for (int i = 0; i < str.length(); i++)\n        {\n            if (str.charAt(i) <= 90 && str.charAt(i) >= 65)\n            {\n                str = str.substring(0, i) + (char) (str.charAt(i) + 32) + str.substring(i + 1, str.length());\n            }\n        }\n        return str;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder builder = new StringBuilder();\n        for(char c : string.toCharArray()) {\n            if(Character.isUpperCase(c)) {\n                builder.append(Character.toLowerCase(c));\n            } else {\n                builder.append(Character.toUpperCase(c));\n            }\n        }\n        return builder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n            } else {\n                chars[i] = Character.toLowerCase(c);\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        char[] charArray = string.toCharArray();\n        while (i < j) {\n            charArray[i] = Character.isLowerCase(charArray[i]) ? Character.toUpperCase(charArray[i]) : Character.toLowerCase(charArray[i]);\n            charArray[j] = Character.isLowerCase(charArray[j]) ? Character.toUpperCase(charArray[j]) : Character.toLowerCase(charArray[j]);\n            i++;\n            j--;\n        }\n        return new String(charArray);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return \"\";", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return new String(string.chars().map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)).toArray());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(x -> (char) ((x - 32) % 2 == 0 ? x : x + 32)).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder str = new StringBuilder(string);\n        int i = 0;\n        while (i < string.length()) {\n            if (Character.isLowerCase(str.charAt(i))) {\n                str.setCharAt(i, Character.toUpperCase(str.charAt(i)));\n            } else if (Character.isUpperCase(str.charAt(i))) {\n                str.setCharAt(i, Character.toLowerCase(str.charAt(i)));\n            }\n            i++;\n        }\n        return str.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return new StringBuilder(string).reverse().toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder result = new StringBuilder();\n        for (Character character : string.toCharArray()) {\n            if (Character.isLowerCase(character)) {\n                result.append(Character.toUpperCase(character));\n            } else if (Character.isUpperCase(character)) {\n                result.append(Character.toLowerCase(character));\n            } else {\n                result.append(character);\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(\n            c -> Character.isUpperCase(c) ? Character.toLowerCase((char) c) : Character.toUpperCase((char) c)\n        ).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(i -> Character.isUpperCase(i) ? Character.toLowerCase(i) : Character.toUpperCase(i)).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String temp = \"\";\n        for(int i = 0; i < string.length(); i++) {\n            if(Character.isUpperCase(string.charAt(i)))\n                temp += Character.toLowerCase(string.charAt(i));\n            else\n                temp += Character.toUpperCase(string.charAt(i));\n        }\n        return temp;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String out = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                out += Character.toLowerCase(c);\n            } else {\n                out += Character.toUpperCase(c);\n            }\n        }\n        return out;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] s = string.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length; i++) {\n            if (Character.isUpperCase(s[i])) {\n                sb.append(Character.toLowerCase(s[i]));\n            } else if (Character.isLowerCase(s[i])) {\n                sb.append(Character.toUpperCase(s[i]));\n            } else {\n                sb.append(s[i]);\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char ch = string.charAt(i);\n            if (Character.isUpperCase(ch)) {\n                result += Character.toLowerCase(ch);\n            } else {\n                result += Character.toUpperCase(ch);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String[] s = string.split(\"\");\n        String[] str = new String[s.length];\n        int i = 0;\n        for(String j:s){\n            char ch = j.charAt(0);\n            if(Character.isUpperCase(ch)) {\n                str[i] = String.valueOf(Character.toLowerCase(ch));\n            } else if(Character.isLowerCase(ch)){\n                str[i] = String.valueOf(Character.toUpperCase(ch));\n            } else {\n                str[i] = String.valueOf(ch);\n            }\n            i++;\n        }\n        return String.join(\"\", str);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        string = string.toLowerCase().equals(string) ? string.toUpperCase() : string.toLowerCase();\n        return string;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String str = \"\";\n        for(int i = 0; i < string.length(); i++) {\n            if(Character.isUpperCase(string.charAt(i))) {\n                str += String.valueOf(Character.toLowerCase(string.charAt(i)));\n            } else if (Character.isLowerCase(string.charAt(i))) {\n                str += String.valueOf(Character.toUpperCase(string.charAt(i)));\n            }\n        }\n        return str;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for(int i = 0; i < string.length(); i++) {\n            if(Character.isUpperCase(string.charAt(i))) {\n                result += Character.toLowerCase(string.charAt(i));\n            } else if(Character.isLowerCase(string.charAt(i))) {\n                result += Character.toUpperCase(string.charAt(i));\n            } else {\n                result += string.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return new StringBuilder(string).reverse().toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> c >= 97 && c <= 122 ? (char) (c - 32) : c >= 65 && c <= 90 ? (char) (c + 32) : (char) c).collect(StringBuilder::new, (sb, c) -> sb.append(c), StringBuilder::toString);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> (char)(c ^ 32)).map(c -> String.valueOf(c)).reduce(\"\", String::concat);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c))\n                sb.append(Character.toLowerCase(c));\n            else if (Character.isLowerCase(c))\n                sb.append(Character.toUpperCase(c));\n            else\n                sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder result = new StringBuilder();\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] result = string.toCharArray();\n        for (int i = 0; i < result.length; i++) {\n            if (Character.isLowerCase(result[i])) {\n                result[i] = Character.toUpperCase(result[i]);\n            } else {\n                result[i] = Character.toLowerCase(result[i]);\n            }\n        }\n        return new String(result);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        // Write your code here\n        StringBuilder str = new StringBuilder(string);\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                str.setCharAt(i, Character.toUpperCase(str.charAt(i)));\n            } else {\n                str.setCharAt(i, Character.toLowerCase(str.charAt(i)));\n            }\n        }\n        return str.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return new StringBuffer(string).chars().map(ch -> {\n            if (Character.isUpperCase(ch)) return (char)Character.toLowerCase(ch);\n            else if (Character.isLowerCase(ch)) return (char)Character.toUpperCase(ch);\n            else return (char)ch;\n        }).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        // Complete the method\n        return string.toLowerCase().concat(string.toUpperCase());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.toUpperCase().concat(string.toLowerCase());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] arr = string.toCharArray();\n        StringBuilder builder = new StringBuilder();\n        for (char c : arr) {\n            if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                builder.append(Character.toLowerCase(c));\n            } else {\n                builder.append(c);\n            }\n        }\n        return builder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z') {\n                result += (char)(string.charAt(i) + 'A' - 'a');\n            } else if (string.charAt(i) >= 'A' && string.charAt(i) <= 'Z') {\n                result += (char)(string.charAt(i) + 'a' - 'A');\n            } else {\n                result += string.charAt(i);\n            }\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars()\n            .mapToObj(c -> Character.isLowerCase(c) ?\n                Character.toUpperCase(c) : Character.toLowerCase(c))\n            .collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                res.append(Character.toLowerCase(string.charAt(i)));\n            } else {\n                res.append(Character.toUpperCase(string.charAt(i)));\n            }\n        }\n        return res.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return new StringBuffer(string).reverse().toString().toLowerCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (char ch : chars) {\n            if (Character.isUpperCase(ch)) {\n                sb.append(Character.toLowerCase(ch));\n            }\n            else {\n                sb.append(Character.toUpperCase(ch));\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase((char)c) : Character.toUpperCase((char)c)).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for (char c: string.toCharArray())\n            result += (Character.isLowerCase(c)) ? Character.toUpperCase(c) : Character.toLowerCase(c);\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] stringToCharArray = string.toCharArray();\n        for (int i = 0; i < stringToCharArray.length; i++) {\n            if (Character.isUpperCase(stringToCharArray[i])) {\n                stringToCharArray[i] = Character.toLowerCase(stringToCharArray[i]);\n            } else if (Character.isLowerCase(stringToCharArray[i])) {\n                stringToCharArray[i] = Character.toUpperCase(stringToCharArray[i]);\n            }\n        }\n        return String.valueOf(stringToCharArray);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                builder.append(Character.toLowerCase(c));\n            } else {\n                builder.append(Character.toUpperCase(c));\n            }\n        }\n        return builder.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            result += Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n        }\n        return result;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        // Implement here", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.toLowerCase().equals(string) ? string.toUpperCase() : string.toLowerCase();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        // Write your code here.\n        return string.chars().mapToObj(i -> {\n            if (Character.isUpperCase(i)) {\n                return Character.toLowerCase((char)i);\n            }\n            else if (Character.isLowerCase(i)) {\n                return Character.toUpperCase((char)i);\n            }\n            else {\n                return (char)i;\n            }\n        }).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] s = string.toCharArray();\n        for (int i = 0; i < s.length; i++) {\n            if (Character.isUpperCase(s[i])) {\n                s[i] = Character.toLowerCase(s[i]);\n            } else if (Character.isLowerCase(s[i])) {\n                s[i] = Character.toUpperCase(s[i]);\n            }\n        }\n        return String.valueOf(s);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if ('a' <= chars[i] && chars[i] <= 'z') {\n                chars[i] -= 'a' - 'A';\n            } else if ('A' <= chars[i] && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n        }\n        return new String(chars);", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> (char)(c - 32)).collect(Collectors.joining());", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return new StringBuilder(string).reverse().toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuffer stringBuffer = new StringBuffer(string);\n        for (int i = 0; i < stringBuffer.length(); i++) {\n            char c = stringBuffer.charAt(i);\n            if (Character.isLowerCase(c))\n                stringBuffer.setCharAt(i, Character.toUpperCase(c));\n            else if (Character.isUpperCase(c))\n                stringBuffer.setCharAt(i, Character.toLowerCase(c));\n        }\n        return stringBuffer.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> (char)(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c -> {\n            if ((c >= 97) && (c <= 122)) {\n                return (char)(c - 32);\n            } else if ((c >= 65) && (c <= 90)) {\n                return (char)(c + 32);\n            } else {\n                return (char)c;\n            }\n        }).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder(string.length());\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\n                c = Character.toLowerCase(c);\n            else if (Character.isLowerCase(c))\n                c = Character.toUpperCase(c);\n            sb.append(c);\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        // insert your code here", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                result.append(Character.toLowerCase(string.charAt(i)));\n            } else {\n                result.append(Character.toUpperCase(string.charAt(i)));\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for(char c: string.toCharArray())\n            sb.append(c >= 97 && c <= 122 ? (char)(c + 32) : (char)(c - 32));\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        String str = \"\";\n        for(char c: string.toCharArray()) {\n            str += Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n        }\n        return str;", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        StringBuilder result = new StringBuilder();\n        for(char c : string.toCharArray()) {\n            if(Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n        return result.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (char c: chars) {\n            if (Character.isUpperCase(c))\n                sb.append(Character.toLowerCase(c));\n            else\n                sb.append(Character.toUpperCase(c));\n        }\n        return sb.toString();", "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n        return string.toUpperCase().concat(string.toLowerCase());"], [], [], [], [], [], [], [], []]